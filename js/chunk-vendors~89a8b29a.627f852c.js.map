{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/socket/socket.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/validationtx.js","webpack:///./node_modules/avalanche/dist/common/jrpcapi.js","webpack:///./node_modules/avalanche/dist/apis/info/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/outputs.js","webpack:///./node_modules/avalanche/dist/common/output.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/utxos.js","webpack:///./node_modules/avalanche/dist/common/nbytes.js","webpack:///./node_modules/avalanche/dist/apis/index/index.js","webpack:///./node_modules/avalanche/dist/common/secp256k1.js","webpack:///./node_modules/avalanche/dist/avalanche.js","webpack:///./node_modules/avalanche/dist/apis/health/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/createsubnettx.js","webpack:///./node_modules/avalanche/dist/common/apibase.js","webpack:///./node_modules/avalanche/dist/common/keychain.js","webpack:///./node_modules/avalanche/dist/apis/info/index.js","webpack:///./node_modules/avalanche/dist/common/input.js","webpack:///./node_modules/avalanche/dist/common/assetamount.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/importtx.js","webpack:///./node_modules/avalanche/dist/common/index.js","webpack:///./node_modules/avalanche/dist/apis/health/index.js","webpack:///./node_modules/avalanche/dist/common/utxos.js","webpack:///./node_modules/avalanche/dist/apis/keystore/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/index.js","webpack:///./node_modules/avalanche/dist/common/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/metrics/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/api.js","webpack:///./node_modules/avalanche/dist/common/evmtx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/metrics/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/tx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/constants.js","webpack:///./node_modules/avalanche/dist/common/tx.js","webpack:///./node_modules/avalanche/dist/common/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/basetx.js","webpack:///./node_modules/avalanche/dist/common/restapi.js","webpack:///./node_modules/avalanche/dist/apis/index/api.js","webpack:///./node_modules/avalanche/dist/apis/keystore/api.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","Socket","isomorphic_ws_1","utils_1","default","url","MainnetAPI","options","super","data","cb","send","mcode","close","AddValidatorTx","AddDelegatorTx","WeightedValidatorTx","ValidatorTx","bn_js_1","bintools_1","basetx_1","outputs_1","buffer_1","constants_1","constants_2","helperfunctions_1","outputs_2","serialization_1","errors_1","bintools","getInstance","serialization","Serialization","BaseTx","networkID","blockchainID","outs","ins","memo","nodeID","startTime","endTime","_typeName","_typeID","undefined","Buffer","alloc","fromBNToBuffer","encoding","fields","serialize","assign","encoder","deserialize","decoder","bufferToNodeIDString","fromBufferToBN","bytes","offset","fromBuffer","copyFrom","superbuff","toBuffer","bsize","length","concat","DefaultNetworkID","weight","stakeAmount","stakeOuts","rewardOwners","PlatformVMConstants","ADDDELEGATORTX","getTxType","map","s","xferout","TransferableOutput","ParseableOutput","getWeight","val","i","add","getOutput","getAmount","getOuts","getStakeOuts","numstakeouts","outcount","readUInt32BE","push","numouts","writeUInt32BE","barr","sort","comparator","out","ro","newbase","args","delegationFee","ADDVALIDATORTX","DelegationFeeError","parseFloat","toFixed","getDelegationFeeBuffer","dbuff","delegatorMultiplier","dBuff","buffnum","superBuff","feeBuff","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","JRPCAPI","apibase_1","APIBase","core","baseURL","jrpcVersion","rpcID","callMethod","method","params","headers","ep","rpc","id","jsonrpc","headrs","getProtocol","getHost","port","getPort","axConf","responseType","resp","post","JSON","stringify","status","parse","Error","error","message","getRPCID","InfoAPI","jrpcapi_1","getBlockchainID","alias","response","getNetworkID","getNetworkName","networkName","getNodeID","getNodeVersion","version","getTxFee","txFee","creationTxFee","isBootstrapped","chain","peers","nodeIDs","uptime","SECPOwnerOutput","StakeableLockOut","SECPTransferOutput","AmountOutput","SelectOutputClass","output_1","outputid","SECPXFEROUTPUTID","SECPOWNEROUTPUTID","STAKEABLELOCKOUTID","OutputIdError","StandardTransferableOutput","arguments","output","assetID","ASSETIDLEN","StandardParseableOutput","StandardAmountOutput","newout","create","amount","addresses","locktime","threshold","stakeableLocktime","transferableOutput","synchronize","outobj","getAddresses","a","addr","Address","numaddrs","getLocktime","getThreshold","amountValue","outbuff","xferoutBuff","Output","BaseNFTOutput","OutputOwners","nbytes_1","NBytes","cb58Encode","addrbuff","b58ToBuffer","validateChecksum","newbuff","ChecksumError","AddressError","getSize","b","compare","Serializable","getAddressIdx","address","toString","getAddress","idx","AddressIndexError","meetsThreshold","asOf","now","UnixNow","qualified","getSpenders","lte","j","addrs","bufferToB58","aoutid","getOutputID","abuff","boutid","bbuff","asort","bsort","outid","sorta","sortb","getAssetID","parseableBuff","clone","groupID","getGroupID","UTXOSet","AssetAmountDestination","UTXO","inputs_1","utxos_1","tx_1","exporttx_1","importtx_1","assetamount_1","validationtx_1","createsubnettx_1","StandardUTXO","codecID","txid","outputidx","serialized","cb58Decode","utxo","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getConsumableUXTO","stakeable","getAllUTXOs","filter","stakeableOutput","getStakeableLocktime","lt","getMinimumSpendable","aad","utxoArray","tmpUTXOArray","forEach","getTypeID","stakeableLockOut1","stakeableLockOut2","toNumber","index","assetKey","fromAddresses","getSenders","assetExists","assetAmount","getAssetAmount","isFinished","lockedStakeable","unlocked","amountOutput","input","SECPTransferInput","locked","gt","StakeableLockIn","ParseableInput","spendAmount","spenders","spender","addSignatureIdx","txID","getTxID","outputIdx","getOutputIdx","transferInput","TransferableInput","addInput","canComplete","InsufficientFundsError","zero","assetAmounts","getAmounts","change","getChange","isStakeableLockChange","getStakeableLockChange","lockedChange","getAssetIDString","lockedOutputs","lockedOutput","parseableOutput","getTransferableOutput","outputAmountRemaining","sub","newChangeOutput","newLockedChangeOutput","transferOutput","addChange","newOutput","newLockedOutput","addOutput","unlockedChange","getChangeAddresses","totalAmountSpent","getSpent","stakeableLockedAmount","getStakeableLockSpent","totalUnlockedSpent","amountBurnt","getBurn","totalUnlockedAvailable","unlockedAmount","getDestinations","buildBaseTx","toAddresses","changeAddresses","fee","feeAssetID","ThresholdError","eq","addAssetAmount","_feeCheck","minSpendableErr","getInputs","getAllOutputs","baseTx","UnsignedTx","buildImportTx","atomics","sourceChain","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","gte","xferin","from","getInput","spendout","feeRemaining","importTx","ImportTx","buildExportTx","avaxAssetID","destinationChain","exportouts","FeeAssetError","Defaults","network","X","getChangeOutputs","getOutputs","exportTx","ExportTx","buildAddDelegatorTx","rewardLocktime","rewardThreshold","rewardAddresses","TimeError","rewardOutputOwners","UTx","buildAddValidatorTx","buildCreateSubnetTx","subnetOwnerAddresses","subnetOwnerThreshold","CreateSubnetTx","utxos","utxoid","utxoidCleaned","addressUTXOs","addressCleaned","utxobalance","utxovar","UTXOError","newset","allUTXOs","addArray","b58str","emsg","buff","BufferSizeError","__createBinding","o","m","k","k2","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","__setModuleDefault","v","__importStar","SECP256k1KeyChain","SECP256k1KeyPair","elliptic","create_hash_1","keychain_1","EC","ec","ecparams","curve","BN","n","constructor","StandardKeyPair","_sigFromSigBuffer","sig","r","recoveryParam","readUIntBE","sigOpt","generateKey","keypair","genKeyPair","privk","getPrivate","padStart","pubk","getPublic","importKey","keyFromPrivate","addressFromPublicKey","keyFromPublic","sha256","update","digest","ripesha","PublicKeyError","getPrivateKeyString","getPublicKeyString","sign","msg","sigObj","canonical","recovery","writeUInt8","toArray","verify","recover","recoverPubKey","encodeCompressed","StandardKeyChain","newKey","addKey","axios_1","AvalancheCore","host","protocol","hrp","auth","requestConfig","apis","setAddress","replace","protocols","includes","ProtocolError","getIP","getURL","getHeaders","getRequestConfig","setNetworkID","netID","getPreferredHRP","getHRP","setHRP","setHeader","key","removeHeader","removeAllHeaders","prop","setRequestConfig","removeRequestConfig","removeAllRequestConfigs","setAuthToken","_setHeaders","entries","Authorization","addAPI","apiName","ConstructorFN","baseurl","api","_request","xhrmethod","getdata","postdata","axiosConfig","config","request","xhrdata","RequestResponseData","statusText","delete","put","patch","HealthAPI","health","subnetOwners","CREATESUBNETTX","SubnetOwnerError","typeID","db_1","setBaseURL","db","backup","getAll","clearAll","getNamespace","setAll","getBaseURL","getDB","getPrivateKey","getPublicKey","keys","values","kp","getAddressStrings","getAddressString","removeKey","kaddr","hasKey","getKey","StandardAmountInput","StandardTransferableInput","StandardParseableInput","Input","credentials_1","sigCount","sigIdxs","getSigIdxs","addressIdx","sigidx","SigIdx","setSource","sidx","sigbuff","getInputID","inbuff","inid","getUTXOID","AssetAmount","burn","spent","stakeableLockSpent","stakeableLockChange","finished","stakeableLocked","total","destinations","senders","amounts","amountkey","inputs","outputs","aa","assetHexStr","KeyChain","KeyPair","secp256k1_1","chainid","type","bufferToType","getChainID","setChainID","newkp","makeKey","pk","split","newkc","kc","AmountInput","SelectInputClass","input_1","inputid","SECPINPUTID","STAKEABLELOCKINID","InputIdError","getCredentialID","SECPCREDENTIAL","transferableInput","xferinBuff","credentials_2","IMPORTTX","numIns","getSourceChain","Array","isArray","TransferableInputError","ii","anIn","ChainIdError","sigs","cred","SelectCredentialClass","sigidxs","getSource","signval","Signature","addSignature","getCodecID","readUInt8","getCodecIDBuffer","outputidbuffer","utxoX","parseUTXO","console","log","remove","removeArray","removed","getUTXO","utxoids","results","getAllUTXOStrings","u","getUTXOIDs","spendable","indexOf","getBalance","asset","spend","getAssetIDs","Set","merge","utxoset","hasUTXOIDs","utxos1","utxos2","process","intersection","us1","us2","difference","symDifference","union","mergeByRule","mergeRule","uSet","MergeRuleError","overwrite","added","lambda","MetricsAPI","restapi_1","RESTAPI","getMetrics","PlatformVMAPI","payload_1","keychain","PlatformChainID","blockchainAlias","AVAXAssetID","minValidatorStake","minDelegatorStake","getBlockchainAlias","netid","setBlockchainAlias","refreshBlockchainID","parseAddress","ADDRESSLENGTH","addressFromBuffer","getAVAXAssetID","refresh","getStakingAssetID","setAVAXAssetID","getDefaultTxFee","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","keyChain","newKeyChain","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","ONEAVAX","mul","createBlockchain","username","password","subnetID","vmID","fxIDs","name","genesis","genesisData","getBlockchainStatus","getValidatorsAt","height","createAddress","listAddresses","getCurrentValidators","getPendingValidators","sampleValidators","sampleSize","size","validators","addValidator","rewardAddress","delegationFeeRate","getTime","addSubnetValidator","addDelegator","createSubnet","controlKeys","validatedBy","validates","blockchainIDs","getBlockchains","blockchains","exportAVAX","to","importAVAX","issueTx","tx","Transaction","txobj","Tx","TransactionError","getCurrentSupply","supply","getHeight","getMinStake","setMinStake","getStake","staked","stakedOutputs","stakedOutput","buf","getSubnets","ids","subnets","exportKey","privateKey","getTx","getTxStatus","includeReason","getUTXOs","limit","startIndex","persistOpts","has","getName","selfArray","self","getMergeRule","set","getOverwrite","numFetched","parseInt","ownerAddresses","_cleanAddressArray","stringToAddress","srcChain","atomicUTXOs","PayloadBase","getPayload","builtUnsignedTx","GooseEggCheckError","prefixes","rewards","minStake","StakeError","NodeIDStringToBuffer","owners","getRewardUTXOs","caller","bech32","EVMStandardTx","EVMStandardUnsignedTx","EVMStandardBaseTx","serializer","transaction","codecBuf","writeUInt16BE","getInputTotal","aIDHex","txtype","basebuff","unsignedTx","credentials","getUnsignedTx","c","txbuff","credlen","credential","credid","credbuff","exportOuts","EXPORTTX","numOuts","getDestinationChain","TransferableOutputError","eo","getExportOutputs","anOut","SelectTxClass","BASETX","StandardUnsignedTx","readUInt16BE","StandardTx","numcreds","SECPFXID","SUBNETAUTHID","LOCKEDSTAKEABLES","ADDSUBNETVALIDATORTX","CREATECHAINTX","ADVANCETIMETX","REWARDVALIDATORTX","BLOCKCHAINIDLEN","SYMBOLMAXLEN","ASSETNAMELEN","StandardBaseTx","cb58","hex","decimalString","buffer","numins","getMemo","memolen","getTransaction","getIns","getTotalOuts","getCredentials","setCodecID","credID","Credential","source","sigarray","sigArray","siglen","writeInt32BE","SECPCredential","CredIdError","newbasetx","tx_2","newOut","newIn","incount","contentType","acceptType","prepHeaders","getContentType","getAcceptType","IndexAPI","getLastAccepted","getContainerByIndex","getContainerByID","containerID","getContainerRange","numToFetch","getIndex","isAccepted","KeystoreAPI","createUser","success","exportUser","user","importUser","listUsers","users","deleteUser"],"mappings":"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","file":"js/chunk-vendors~89a8b29a.627f852c.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst utils_1 = require(\"../../utils\");\nclass Socket extends isomorphic_ws_1.default {\n    /**\n     * Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n     *\n     * @param url Defaults to [[MainnetAPI]]\n     * @param options Optional\n     */\n    constructor(url = `wss://${utils_1.MainnetAPI}:443/ext/bc/X/events`, options) {\n        super(url, options);\n    }\n    /**\n     * Send a message to the server\n     *\n     * @param data\n     * @param cb Optional\n     */\n    send(data, cb) {\n        super.send(data, cb);\n    }\n    /**\n     * Terminates the connection completely\n     *\n     * @param mcode Optional\n     * @param data Optional\n     */\n    close(mcode, data) {\n        super.close(mcode, data);\n    }\n}\nexports.Socket = Socket;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvc29ja2V0L3NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxrRUFBcUM7QUFDckMsdUNBQXdDO0FBQ3hDLE1BQWEsTUFBTyxTQUFRLHVCQUFTO0lBOEJuQzs7Ozs7T0FLRztJQUNILFlBQ0UsTUFBa0MsU0FBUyxrQkFBVSxzQkFBc0IsRUFDM0UsT0FBcUQ7UUFFckQsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBL0JEOzs7OztPQUtHO0lBQ0gsSUFBSSxDQUFDLElBQVMsRUFBRSxFQUFRO1FBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxLQUFjLEVBQUUsSUFBYTtRQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0NBY0Y7QUExQ0Qsd0JBMENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVNvY2tldFxuICovXG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0QXJncyB9IGZyb20gXCJodHRwXCJcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSBcImlzb21vcnBoaWMtd3NcIlxuaW1wb3J0IHsgTWFpbm5ldEFQSSB9IGZyb20gXCIuLi8uLi91dGlsc1wiXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgV2ViU29ja2V0IHtcbiAgLy8gRmlyZXMgb25jZSB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXJcbiAgb25vcGVuOiBhbnlcbiAgLy8gRmlyZXMgd2hlbiB0aGUgc2VydmVyIHNlbmRzIHNvbWUgZGF0YVxuICBvbm1lc3NhZ2U6IGFueVxuICAvLyBGaXJlcyBhZnRlciBlbmQgb2YgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiBzZXJ2ZXIgYW5kIHRoZSBjbGllbnRcbiAgb25jbG9zZTogYW55XG4gIC8vIEZpcmVzIGZvciBzb21lIG1pc3Rha2UsIHdoaWNoIGhhcHBlbnMgZHVyaW5nIHRoZSBjb21tdW5pY2F0aW9uXG4gIG9uZXJyb3I6IGFueVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2VydmVyXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwYXJhbSBjYiBPcHRpb25hbFxuICAgKi9cbiAgc2VuZChkYXRhOiBhbnksIGNiPzogYW55KTogdm9pZCB7XG4gICAgc3VwZXIuc2VuZChkYXRhLCBjYilcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXJtaW5hdGVzIHRoZSBjb25uZWN0aW9uIGNvbXBsZXRlbHlcbiAgICpcbiAgICogQHBhcmFtIG1jb2RlIE9wdGlvbmFsXG4gICAqIEBwYXJhbSBkYXRhIE9wdGlvbmFsXG4gICAqL1xuICBjbG9zZShtY29kZT86IG51bWJlciwgZGF0YT86IHN0cmluZyk6IHZvaWQge1xuICAgIHN1cGVyLmNsb3NlKG1jb2RlLCBkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIHRoZSBBUEkgZm9yIGNyZWF0aW5nIGFuZCBtYW5hZ2luZyBhIFdlYlNvY2tldCBjb25uZWN0aW9uIHRvIGEgc2VydmVyLCBhcyB3ZWxsIGFzIGZvciBzZW5kaW5nIGFuZCByZWNlaXZpbmcgZGF0YSBvbiB0aGUgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVybCBEZWZhdWx0cyB0byBbW01haW5uZXRBUEldXVxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdXJsOiBzdHJpbmcgfCBpbXBvcnQoXCJ1cmxcIikuVVJMID0gYHdzczovLyR7TWFpbm5ldEFQSX06NDQzL2V4dC9iYy9YL2V2ZW50c2AsXG4gICAgb3B0aW9ucz86IFdlYlNvY2tldC5DbGllbnRPcHRpb25zIHwgQ2xpZW50UmVxdWVzdEFyZ3NcbiAgKSB7XG4gICAgc3VwZXIodXJsLCBvcHRpb25zKVxuICB9XG59XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ValidationTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddValidatorTx = exports.AddDelegatorTx = exports.WeightedValidatorTx = exports.ValidatorTx = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst basetx_1 = require(\"./basetx\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst buffer_1 = require(\"buffer/\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst outputs_2 = require(\"./outputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Abstract class representing an transactions with validation information.\n */\nclass ValidatorTx extends basetx_1.BaseTx {\n    constructor(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ValidatorTx\";\n        this._typeID = undefined;\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.nodeID = nodeID;\n        this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        this.endTime = bintools.fromBNToBuffer(endTime, 8);\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { nodeID: serialization.encoder(this.nodeID, encoding, \"Buffer\", \"nodeID\"), startTime: serialization.encoder(this.startTime, encoding, \"Buffer\", \"decimalString\"), endTime: serialization.encoder(this.endTime, encoding, \"Buffer\", \"decimalString\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.nodeID = serialization.decoder(fields[\"nodeID\"], encoding, \"nodeID\", \"Buffer\", 20);\n        this.startTime = serialization.decoder(fields[\"startTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.endTime = serialization.decoder(fields[\"endTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getNodeID() {\n        return this.nodeID;\n    }\n    /**\n     * Returns a string for the nodeID amount.\n     */\n    getNodeIDString() {\n        return (0, helperfunctions_1.bufferToNodeIDString)(this.nodeID);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length +\n            this.nodeID.length +\n            this.startTime.length +\n            this.endTime.length;\n        return buffer_1.Buffer.concat([superbuff, this.nodeID, this.startTime, this.endTime], bsize);\n    }\n}\nexports.ValidatorTx = ValidatorTx;\nclass WeightedValidatorTx extends ValidatorTx {\n    /**\n     * Class representing an unsigned AddSubnetValidatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param weight Optional. The amount of nAVAX the validator is staking.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, weight = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime);\n        this._typeName = \"WeightedValidatorTx\";\n        this._typeID = undefined;\n        this.weight = buffer_1.Buffer.alloc(8);\n        if (typeof weight !== undefined) {\n            this.weight = bintools.fromBNToBuffer(weight, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { weight: serialization.encoder(this.weight, encoding, \"Buffer\", \"decimalString\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.weight = serialization.decoder(fields[\"weight\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getWeight() {\n        return bintools.fromBufferToBN(this.weight);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getWeightBuffer() {\n        return this.weight;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.weight = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddSubnetValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        return buffer_1.Buffer.concat([superbuff, this.weight]);\n    }\n}\nexports.WeightedValidatorTx = WeightedValidatorTx;\n/* Must implement later, the signing process isn't friendly to AvalancheJS\n\nexport class AddSubnetValidatorTx extends WeightedValidatorTx {\n    protected subnetID:Buffer = Buffer.alloc(32);\n    protected subnetAddrs:Buffer[] = [];\n    protected subnetAuthIdxs:Buffer[] = [];\n\n\n    getTxType = ():number => {\n        return PlatformVMConstants.ADDSUBNETVALIDATORTX;\n    }\n\n\n    getSubnetID = ():Buffer => {\n        return this.subnetID;\n    }\n\n\n    getSubnetIDString = ():string => {\n        return bintools.cb58Encode(this.subnetID);\n    }\n\n\n    getSubnetAuthAddresses = ():Buffer[] => {\n        return this.subnetAddrs;\n    }\n\n\n    setSubnetAuthAddresses = (addrs:Buffer[]):void => {\n        this.subnetAddrs = addrs;\n    }\n\n    calcSubnetAuthIdxs = (addrs:Buffer[]):Buffer[] => {\n        let idxs:Buffer[] = [];\n        addrs = addrs.sort();\n        for(let i: number = 0; i < addrs.length; i++){\n            let idx:Buffer = Buffer.alloc(4);\n            idx.writeUInt32BE(i,0);\n            idxs.push(idx);\n        }\n    }\n\n\n    getSubnetAuthIdxs = ():Buffer[] => {\n        return this.subnetAddrs;\n    }\n\n    fromBuffer(bytes:Buffer, offset:number = 0):number {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        let sublenbuff:Buffer = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let sublen:number = sublenbuff.readUInt32BE(0);\n        for(let i: number = 0; i < sublen; i++){\n\n        }\n        offset = this.subnetAuth.fromBuffer(bytes, offset);\n        return offset;\n    }\n\n\n    toBuffer():Buffer {\n        const superbuff:Buffer = super.toBuffer();\n\n        return Buffer.concat([superbuff, this.subnetID, subAuth], superbuff.length + this.subnetID.length + subAuth.length);\n    }\n\n\n    sign(msg:Buffer, kc:KeyChain):Credential[] {\n        let creds:SECPCredential[] = super.sign(msg, kc);\n        const cred:SECPCredential = SelectCredentialClass(PlatformVMConstants.SECPCREDENTIAL) as SECPCredential;\n        for(let i: number = 0; i  < this.subnetAuth.length ; i++) {\n            if(!kc.hasKey(this.subnetAuth[i])) {\n                throw new Error(\"AddSubnetValidatorTx.sign -- specified address in subnetAuth not existent in provided keychain.\");\n            }\n\n            let kp:KeyPair = kc.getKey(this.subnetAuth[i]);\n            const signval:Buffer = kp.sign(msg);\n            const sig:Signature = new Signature();\n            sig.fromBuffer(signval);\n            cred.addSignature(sig);\n        }\n        creds.push(cred);\n        return creds;\n    }\n\n\n    constructor(\n        networkID:number = DefaultNetworkID,\n        blockchainID:Buffer = Buffer.alloc(32, 16),\n        outs:TransferableOutput[] = undefined,\n        ins:TransferableInput[] = undefined,\n        memo:Buffer = undefined,\n        nodeID:Buffer = undefined,\n        startTime:BN = undefined,\n        endTime:BN = undefined,\n        weight:BN = undefined,\n        subnetID:Buffer = undefined,\n        subnetAuth:Buffer[] = undefined\n    ) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, weight);\n        if(typeof subnetID !== undefined){\n            this.subnetID = subnetID;\n        }\n        if(typeof subnetAuth !== undefined) {\n            this.subnetAuth = subnetAuth;\n        }\n    }\n\n}\n*/\n/**\n * Class representing an unsigned AddDelegatorTx transaction.\n */\nclass AddDelegatorTx extends WeightedValidatorTx {\n    /**\n     * Class representing an unsigned AddDelegatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param stakeAmount Optional. The amount of nAVAX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing a [[SECPOwnerOutput]] for the rewards.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount);\n        this._typeName = \"AddDelegatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDDELEGATORTX;\n        this.stakeOuts = [];\n        this.rewardOwners = undefined;\n        /**\n         * Returns the id of the [[AddDelegatorTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof stakeOuts !== undefined) {\n            this.stakeOuts = stakeOuts;\n        }\n        this.rewardOwners = rewardOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { stakeOuts: this.stakeOuts.map((s) => s.serialize(encoding)), rewardOwners: this.rewardOwners.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.stakeOuts = fields[\"stakeOuts\"].map((s) => {\n            let xferout = new outputs_1.TransferableOutput();\n            xferout.deserialize(s, encoding);\n            return xferout;\n        });\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        this.rewardOwners.deserialize(fields[\"rewardOwners\"], encoding);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStakeAmount() {\n        return this.getWeight();\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getStakeAmountBuffer() {\n        return this.weight;\n    }\n    /**\n     * Returns the array of outputs being staked.\n     */\n    getStakeOuts() {\n        return this.stakeOuts;\n    }\n    /**\n     * Should match stakeAmount. Used in sanity checking.\n     */\n    getStakeOutsTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            val = val.add(this.stakeOuts[`${i}`].getOutput().getAmount());\n        }\n        return val;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getRewardOwners() {\n        return this.rewardOwners;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getStakeOuts()];\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const numstakeouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = numstakeouts.readUInt32BE(0);\n        this.stakeOuts = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.stakeOuts.push(xferout);\n        }\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        offset = this.rewardOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddDelegatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        let bsize = superbuff.length;\n        const numouts = buffer_1.Buffer.alloc(4);\n        numouts.writeUInt32BE(this.stakeOuts.length, 0);\n        let barr = [super.toBuffer(), numouts];\n        bsize += numouts.length;\n        this.stakeOuts = this.stakeOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            let out = this.stakeOuts[`${i}`].toBuffer();\n            barr.push(out);\n            bsize += out.length;\n        }\n        let ro = this.rewardOwners.toBuffer();\n        barr.push(ro);\n        bsize += ro.length;\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new AddDelegatorTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new AddDelegatorTx(...args);\n    }\n}\nexports.AddDelegatorTx = AddDelegatorTx;\nclass AddValidatorTx extends AddDelegatorTx {\n    /**\n     * Class representing an unsigned AddValidatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param stakeAmount Optional. The amount of nAVAX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing the [[SECPOwnerOutput]] for the rewards.\n     * @param delegationFee Optional. The percent fee this validator charges when others delegate stake to them.\n     * Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive.\n     * For example, if delegationFeeRate is 1.2345 and someone delegates to this validator, then when the delegation\n     * period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined, delegationFee = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, rewardOwners);\n        this._typeName = \"AddValidatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDVALIDATORTX;\n        this.delegationFee = 0;\n        /**\n         * Returns the id of the [[AddValidatorTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof delegationFee === \"number\") {\n            if (delegationFee >= 0 && delegationFee <= 100) {\n                this.delegationFee = parseFloat(delegationFee.toFixed(4));\n            }\n            else {\n                throw new errors_1.DelegationFeeError(\"AddValidatorTx.constructor -- delegationFee must be in the range of 0 and 100, inclusively.\");\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { delegationFee: serialization.encoder(this.getDelegationFeeBuffer(), encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let dbuff = serialization.decoder(fields[\"delegationFee\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.delegationFee =\n            dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n    }\n    /**\n     * Returns the delegation fee (represents a percentage from 0 to 100);\n     */\n    getDelegationFee() {\n        return this.delegationFee;\n    }\n    /**\n     * Returns the binary representation of the delegation fee as a {@link https://github.com/feross/buffer|Buffer}.\n     */\n    getDelegationFeeBuffer() {\n        let dBuff = buffer_1.Buffer.alloc(4);\n        let buffnum = parseFloat(this.delegationFee.toFixed(4)) *\n            AddValidatorTx.delegatorMultiplier;\n        dBuff.writeUInt32BE(buffnum, 0);\n        return dBuff;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        let dbuff = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.delegationFee =\n            dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n        return offset;\n    }\n    toBuffer() {\n        let superBuff = super.toBuffer();\n        let feeBuff = this.getDelegationFeeBuffer();\n        return buffer_1.Buffer.concat([superBuff, feeBuff]);\n    }\n}\nexports.AddValidatorTx = AddValidatorTx;\nAddValidatorTx.delegatorMultiplier = 10000;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-JRPCAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JRPCAPI = void 0;\nconst apibase_1 = require(\"./apibase\");\nclass JRPCAPI extends apibase_1.APIBase {\n    /**\n     *\n     * @param core Reference to the Avalanche instance using this endpoint\n     * @param baseURL Path of the APIs baseURL - ex: \"/ext/bc/avm\"\n     * @param jrpcVersion The jrpc version to use, default \"2.0\".\n     */\n    constructor(core, baseURL, jrpcVersion = \"2.0\") {\n        super(core, baseURL);\n        this.jrpcVersion = \"2.0\";\n        this.rpcID = 1;\n        this.callMethod = (method, params, baseURL, headers) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.id = this.rpcID;\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            else if (this.jrpcVersion === \"1.0\") {\n                rpc.params = [];\n            }\n            if (this.jrpcVersion !== \"1.0\") {\n                rpc.jsonrpc = this.jrpcVersion;\n            }\n            let headrs = { \"Content-Type\": \"application/json;charset=UTF-8\" };\n            if (headers) {\n                headrs = Object.assign(Object.assign({}, headrs), headers);\n            }\n            baseURL = `${this.core.getProtocol()}://${this.core.getHost()}`;\n            const port = this.core.getPort();\n            if (port != undefined && typeof port === \"number\" && port >= 0) {\n                baseURL = `${baseURL}:${port}`;\n            }\n            const axConf = {\n                baseURL: baseURL,\n                responseType: \"json\"\n            };\n            const resp = yield this.core.post(ep, {}, JSON.stringify(rpc), headrs, axConf);\n            if (resp.status >= 200 && resp.status < 300) {\n                this.rpcID += 1;\n                if (typeof resp.data === \"string\") {\n                    resp.data = JSON.parse(resp.data);\n                }\n                if (typeof resp.data === \"object\" &&\n                    (resp.data === null || \"error\" in resp.data)) {\n                    throw new Error(resp.data.error.message);\n                }\n            }\n            return resp;\n        });\n        /**\n         * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next\n         * request ID that will be sent.\n         */\n        this.getRPCID = () => this.rpcID;\n        this.jrpcVersion = jrpcVersion;\n        this.rpcID = 1;\n    }\n}\nexports.JRPCAPI = JRPCAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianJwY2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vanJwY2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7QUFJSCx1Q0FBd0Q7QUFFeEQsTUFBYSxPQUFRLFNBQVEsaUJBQU87SUFzRWxDOzs7OztPQUtHO0lBQ0gsWUFDRSxJQUFtQixFQUNuQixPQUFlLEVBQ2YsY0FBc0IsS0FBSztRQUUzQixLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBaEZaLGdCQUFXLEdBQVcsS0FBSyxDQUFBO1FBQzNCLFVBQUssR0FBRyxDQUFDLENBQUE7UUFFbkIsZUFBVSxHQUFHLENBQ1gsTUFBYyxFQUNkLE1BQTBCLEVBQzFCLE9BQWdCLEVBQ2hCLE9BQWdCLEVBQ2MsRUFBRTtZQUNoQyxNQUFNLEVBQUUsR0FBVyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQTtZQUMxQyxNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUE7WUFDbkIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1lBQ25CLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1lBRW5CLDJCQUEyQjtZQUMzQixJQUFJLE1BQU0sRUFBRTtnQkFDVixHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTthQUNwQjtpQkFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO2dCQUNyQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQTthQUNoQjtZQUVELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTthQUMvQjtZQUVELElBQUksTUFBTSxHQUFXLEVBQUUsY0FBYyxFQUFFLGdDQUFnQyxFQUFFLENBQUE7WUFDekUsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsTUFBTSxtQ0FBUSxNQUFNLEdBQUssT0FBTyxDQUFFLENBQUE7YUFDbkM7WUFFRCxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQTtZQUMvRCxNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO1lBQ3hDLElBQUksSUFBSSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFDOUQsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFBO2FBQy9CO1lBRUQsTUFBTSxNQUFNLEdBQXVCO2dCQUNqQyxPQUFPLEVBQUUsT0FBTztnQkFDaEIsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQTtZQUVELE1BQU0sSUFBSSxHQUF3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNwRCxFQUFFLEVBQ0YsRUFBRSxFQUNGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQ25CLE1BQU0sRUFDTixNQUFNLENBQ1AsQ0FBQTtZQUNELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFBO2dCQUNmLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtpQkFDbEM7Z0JBQ0QsSUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUTtvQkFDN0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUM1QztvQkFDQSxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO2lCQUN6QzthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUE7UUFDYixDQUFDLENBQUEsQ0FBQTtRQUVEOzs7V0FHRztRQUNILGFBQVEsR0FBRyxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBY2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1FBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ2hCLENBQUM7Q0FDRjtBQXJGRCwwQkFxRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tSlJQQ0FQSVxuICovXG5cbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gXCJheGlvc1wiXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEFQSUJhc2UsIFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi9hcGliYXNlXCJcblxuZXhwb3J0IGNsYXNzIEpSUENBUEkgZXh0ZW5kcyBBUElCYXNlIHtcbiAgcHJvdGVjdGVkIGpycGNWZXJzaW9uOiBzdHJpbmcgPSBcIjIuMFwiXG4gIHByb3RlY3RlZCBycGNJRCA9IDFcblxuICBjYWxsTWV0aG9kID0gYXN5bmMgKFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IG9iamVjdFtdIHwgb2JqZWN0LFxuICAgIGJhc2VVUkw/OiBzdHJpbmcsXG4gICAgaGVhZGVycz86IG9iamVjdFxuICApOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcDogc3RyaW5nID0gYmFzZVVSTCB8fCB0aGlzLmJhc2VVUkxcbiAgICBjb25zdCBycGM6IGFueSA9IHt9XG4gICAgcnBjLmlkID0gdGhpcy5ycGNJRFxuICAgIHJwYy5tZXRob2QgPSBtZXRob2RcblxuICAgIC8vIFNldCBwYXJhbWV0ZXJzIGlmIGV4aXN0c1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBwYXJhbXNcbiAgICB9IGVsc2UgaWYgKHRoaXMuanJwY1ZlcnNpb24gPT09IFwiMS4wXCIpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBbXVxuICAgIH1cblxuICAgIGlmICh0aGlzLmpycGNWZXJzaW9uICE9PSBcIjEuMFwiKSB7XG4gICAgICBycGMuanNvbnJwYyA9IHRoaXMuanJwY1ZlcnNpb25cbiAgICB9XG5cbiAgICBsZXQgaGVhZHJzOiBvYmplY3QgPSB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIgfVxuICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICBoZWFkcnMgPSB7IC4uLmhlYWRycywgLi4uaGVhZGVycyB9XG4gICAgfVxuXG4gICAgYmFzZVVSTCA9IGAke3RoaXMuY29yZS5nZXRQcm90b2NvbCgpfTovLyR7dGhpcy5jb3JlLmdldEhvc3QoKX1gXG4gICAgY29uc3QgcG9ydDogbnVtYmVyID0gdGhpcy5jb3JlLmdldFBvcnQoKVxuICAgIGlmIChwb3J0ICE9IHVuZGVmaW5lZCAmJiB0eXBlb2YgcG9ydCA9PT0gXCJudW1iZXJcIiAmJiBwb3J0ID49IDApIHtcbiAgICAgIGJhc2VVUkwgPSBgJHtiYXNlVVJMfToke3BvcnR9YFxuICAgIH1cblxuICAgIGNvbnN0IGF4Q29uZjogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgYmFzZVVSTDogYmFzZVVSTCxcbiAgICAgIHJlc3BvbnNlVHlwZTogXCJqc29uXCJcbiAgICB9XG5cbiAgICBjb25zdCByZXNwOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jb3JlLnBvc3QoXG4gICAgICBlcCxcbiAgICAgIHt9LFxuICAgICAgSlNPTi5zdHJpbmdpZnkocnBjKSxcbiAgICAgIGhlYWRycyxcbiAgICAgIGF4Q29uZlxuICAgIClcbiAgICBpZiAocmVzcC5zdGF0dXMgPj0gMjAwICYmIHJlc3Auc3RhdHVzIDwgMzAwKSB7XG4gICAgICB0aGlzLnJwY0lEICs9IDFcbiAgICAgIGlmICh0eXBlb2YgcmVzcC5kYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJlc3AuZGF0YSA9IEpTT04ucGFyc2UocmVzcC5kYXRhKVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVzcC5kYXRhID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIChyZXNwLmRhdGEgPT09IG51bGwgfHwgXCJlcnJvclwiIGluIHJlc3AuZGF0YSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcC5kYXRhLmVycm9yLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNwXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcnBjaWQsIGEgc3RyaWN0bHktaW5jcmVhc2luZyBudW1iZXIsIHN0YXJ0aW5nIGZyb20gMSwgaW5kaWNhdGluZyB0aGUgbmV4dFxuICAgKiByZXF1ZXN0IElEIHRoYXQgd2lsbCBiZSBzZW50LlxuICAgKi9cbiAgZ2V0UlBDSUQgPSAoKTogbnVtYmVyID0+IHRoaXMucnBjSURcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGNvcmUgUmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgaW5zdGFuY2UgdXNpbmcgdGhpcyBlbmRwb2ludFxuICAgKiBAcGFyYW0gYmFzZVVSTCBQYXRoIG9mIHRoZSBBUElzIGJhc2VVUkwgLSBleDogXCIvZXh0L2JjL2F2bVwiXG4gICAqIEBwYXJhbSBqcnBjVmVyc2lvbiBUaGUganJwYyB2ZXJzaW9uIHRvIHVzZSwgZGVmYXVsdCBcIjIuMFwiLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29yZTogQXZhbGFuY2hlQ29yZSxcbiAgICBiYXNlVVJMOiBzdHJpbmcsXG4gICAganJwY1ZlcnNpb246IHN0cmluZyA9IFwiMi4wXCJcbiAgKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZVVSTClcbiAgICB0aGlzLmpycGNWZXJzaW9uID0ganJwY1ZlcnNpb25cbiAgICB0aGlzLnJwY0lEID0gMVxuICB9XG59XG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InfoAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for interacting with a node's InfoAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass InfoAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/info\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/info\") {\n        super(core, baseURL);\n        /**\n         * Fetches the blockchainID from the node for a given alias.\n         *\n         * @param alias The blockchain alias to get the blockchainID\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the blockchainID.\n         */\n        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                alias\n            };\n            const response = yield this.callMethod(\"info.getBlockchainID\", params);\n            return response.data.result.blockchainID;\n        });\n        /**\n         * Fetches the networkID from the node.\n         *\n         * @returns Returns a Promise<number> of the networkID.\n         */\n        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNetworkID\");\n            return response.data.result.networkID;\n        });\n        /**\n         * Fetches the network name this node is running on\n         *\n         * @returns Returns a Promise<string> containing the network name.\n         */\n        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNetworkName\");\n            return response.data.result.networkName;\n        });\n        /**\n         * Fetches the nodeID from the node.\n         *\n         * @returns Returns a Promise<string> of the nodeID.\n         */\n        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNodeID\");\n            return response.data.result.nodeID;\n        });\n        /**\n         * Fetches the version of Gecko this node is running\n         *\n         * @returns Returns a Promise<string> containing the version of Gecko.\n         */\n        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNodeVersion\");\n            return response.data.result.version;\n        });\n        /**\n         * Fetches the transaction fee from the node.\n         *\n         * @returns Returns a Promise<object> of the transaction fee in nAVAX.\n         */\n        this.getTxFee = () => __awaiter(this, void 0, void 0, function* () {\n            // TODO - Add `GetTxFee` response interface\n            const response = yield this.callMethod(\"info.getTxFee\");\n            return {\n                txFee: new bn_js_1.default(response.data.result.txFee, 10),\n                creationTxFee: new bn_js_1.default(response.data.result.creationTxFee, 10)\n            };\n        });\n        /**\n         * Check whether a given chain is done bootstrapping\n         * @param chain The ID or alias of a chain.\n         *\n         * @returns Returns a Promise<boolean> of whether the chain has completed bootstrapping.\n         */\n        this.isBootstrapped = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            const response = yield this.callMethod(\"info.isBootstrapped\", params);\n            return response.data.result.isBootstrapped;\n        });\n        /**\n         * Returns the peers connected to the node.\n         * @param nodeIDs an optional parameter to specify what nodeID's descriptions should be returned.\n         * If this parameter is left empty, descriptions for all active connections will be returned.\n         * If the node is not connected to a specified nodeID, it will be omitted from the response.\n         *\n         * @returns Promise for the list of connected peers in PeersResponse format.\n         */\n        this.peers = (nodeIDs = []) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                nodeIDs\n            };\n            const response = yield this.callMethod(\"info.peers\", params);\n            return response.data.result.peers;\n        });\n        /**\n         * Returns the network's observed uptime of this node.\n         *\n         * @returns Returns a Promise<UptimeResponse> which contains rewardingStakePercentage and weightedAveragePercentage.\n         */\n        this.uptime = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.uptime\");\n            return response.data.result;\n        });\n    }\n}\nexports.InfoAPI = InfoAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPOwnerOutput = exports.StakeableLockOut = exports.SECPTransferOutput = exports.AmountOutput = exports.ParseableOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nconst SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.PlatformVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.SECPOWNEROUTPUTID) {\n        return new SECPOwnerOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.STAKEABLELOCKOUTID) {\n        return new StakeableLockOut(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nexports.SelectOutputClass = SelectOutputClass;\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += constants_1.PlatformVMConstants.ASSETIDLEN;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass ParseableOutput extends output_1.StandardParseableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableOutput = ParseableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockOut extends AmountOutput {\n    /**\n     * A [[Output]] class which specifies a [[ParseableOutput]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableOutput A [[ParseableOutput]] which is embedded into this output.\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined, stakeableLocktime = undefined, transferableOutput = undefined) {\n        super(amount, addresses, locktime, threshold);\n        this._typeName = \"StakeableLockOut\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKOUTID;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableOutput !== \"undefined\") {\n            this.transferableOutput = transferableOutput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { stakeableLocktime: serialization.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), transferableOutput: this.transferableOutput.serialize(encoding) });\n        delete outobj[\"addresses\"];\n        delete outobj[\"locktime\"];\n        delete outobj[\"threshold\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"addresses\"] = [];\n        fields[\"locktime\"] = \"0\";\n        fields[\"threshold\"] = \"1\";\n        fields[\"amount\"] = \"99\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serialization.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableOutput = new ParseableOutput();\n        this.transferableOutput.deserialize(fields[\"transferableOutput\"], encoding);\n        this.synchronize();\n    }\n    //call this every time you load in data\n    synchronize() {\n        let output = this.transferableOutput.getOutput();\n        this.addresses = output.getAddresses().map((a) => {\n            let addr = new output_1.Address();\n            addr.fromBuffer(a);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        this.locktime = bintools.fromBNToBuffer(output.getLocktime(), 8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.threshold.writeUInt32BE(output.getThreshold(), 0);\n        this.amount = bintools.fromBNToBuffer(output.getAmount(), 8);\n        this.amountValue = output.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferableOutput() {\n        return this.transferableOutput;\n    }\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockOut]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(outbuff, offset, offset + 8);\n        offset += 8;\n        this.transferableOutput = new ParseableOutput();\n        offset = this.transferableOutput.fromBuffer(outbuff, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockOut]] instance.\n     */\n    toBuffer() {\n        let xferoutBuff = this.transferableOutput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferoutBuff.length;\n        const barr = [this.stakeableLocktime, xferoutBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new StakeableLockOut(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.StakeableLockOut = StakeableLockOut;\n/**\n * An [[Output]] class which only specifies an Output ownership and uses secp256k1 signature scheme.\n */\nclass SECPOwnerOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPOwnerOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPOWNEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPOwnerOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.SECPOwnerOutput = SECPOwnerOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Output\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseNFTOutput = exports.StandardAmountOutput = exports.StandardTransferableOutput = exports.StandardParseableOutput = exports.Output = exports.OutputOwners = exports.Address = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing an address used in [[Output]] types\n */\nclass Address extends nbytes_1.NBytes {\n    /**\n     * Class for representing an address used in [[Output]] types\n     */\n    constructor() {\n        super();\n        this._typeName = \"Address\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(20);\n        this.bsize = 20;\n    }\n    /**\n     * Returns a base-58 representation of the [[Address]].\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n     * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.\n     *\n     * @param bytes A base-58 string containing a raw [[Address]]\n     *\n     * @returns The length of the raw [[Address]]\n     */\n    fromString(addr) {\n        const addrbuff = bintools.b58ToBuffer(addr);\n        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {\n            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);\n            if (newbuff.length === 20) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (addrbuff.length === 24) {\n            throw new errors_1.ChecksumError(\"Error - Address.fromString: invalid checksum on address\");\n        }\n        else if (addrbuff.length === 20) {\n            this.bytes = addrbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.AddressError(\"Error - Address.fromString: invalid address\");\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new Address();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Address();\n    }\n}\nexports.Address = Address;\n/**\n * Returns a function used to sort an array of [[Address]]es\n */\nAddress.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n/**\n * Defines the most basic values for output ownership. Mostly inherited from, but can be used in population of NFT Owner data.\n */\nclass OutputOwners extends serialization_1.Serializable {\n    /**\n     * An [[Output]] class which contains addresses, locktimes, and thresholds.\n     *\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(addresses = undefined, locktime = undefined, threshold = undefined) {\n        super();\n        this._typeName = \"OutputOwners\";\n        this._typeID = undefined;\n        this.locktime = buffer_1.Buffer.alloc(8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.addresses = [];\n        /**\n         * Returns the threshold of signers required to spend this output.\n         */\n        this.getThreshold = () => this.threshold.readUInt32BE(0);\n        /**\n         * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.\n         */\n        this.getLocktime = () => bintools.fromBufferToBN(this.locktime);\n        /**\n         * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.\n         */\n        this.getAddresses = () => {\n            const result = [];\n            for (let i = 0; i < this.addresses.length; i++) {\n                result.push(this.addresses[`${i}`].toBuffer());\n            }\n            return result;\n        };\n        /**\n         * Returns the index of the address.\n         *\n         * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.\n         *\n         * @returns The index of the address.\n         */\n        this.getAddressIdx = (address) => {\n            for (let i = 0; i < this.addresses.length; i++) {\n                if (this.addresses[`${i}`].toBuffer().toString(\"hex\") ===\n                    address.toString(\"hex\")) {\n                    return i;\n                }\n            }\n            /* istanbul ignore next */\n            return -1;\n        };\n        /**\n         * Returns the address from the index provided.\n         *\n         * @param idx The index of the address.\n         *\n         * @returns Returns the string representing the address.\n         */\n        this.getAddress = (idx) => {\n            if (idx < this.addresses.length) {\n                return this.addresses[`${idx}`].toBuffer();\n            }\n            throw new errors_1.AddressIndexError(\"Error - Output.getAddress: idx out of range\");\n        };\n        /**\n         * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.\n         */\n        this.meetsThreshold = (addresses, asOf = undefined) => {\n            let now;\n            if (typeof asOf === \"undefined\") {\n                now = (0, helperfunctions_1.UnixNow)();\n            }\n            else {\n                now = asOf;\n            }\n            const qualified = this.getSpenders(addresses, now);\n            const threshold = this.threshold.readUInt32BE(0);\n            if (qualified.length >= threshold) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.\n         */\n        this.getSpenders = (addresses, asOf = undefined) => {\n            const qualified = [];\n            let now;\n            if (typeof asOf === \"undefined\") {\n                now = (0, helperfunctions_1.UnixNow)();\n            }\n            else {\n                now = asOf;\n            }\n            const locktime = bintools.fromBufferToBN(this.locktime);\n            if (now.lte(locktime)) {\n                // not unlocked, not spendable\n                return qualified;\n            }\n            const threshold = this.threshold.readUInt32BE(0);\n            for (let i = 0; i < this.addresses.length && qualified.length < threshold; i++) {\n                for (let j = 0; j < addresses.length && qualified.length < threshold; j++) {\n                    if (addresses[`${j}`].toString(\"hex\") ===\n                        this.addresses[`${i}`].toBuffer().toString(\"hex\")) {\n                        qualified.push(addresses[`${j}`]);\n                    }\n                }\n            }\n            return qualified;\n        };\n        if (typeof addresses !== \"undefined\" && addresses.length) {\n            const addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                addrs[`${i}`] = new Address();\n                addrs[`${i}`].fromBuffer(addresses[`${i}`]);\n            }\n            this.addresses = addrs;\n            this.addresses.sort(Address.comparator());\n            this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        }\n        if (typeof threshold !== undefined) {\n            this.threshold.writeUInt32BE(threshold || 1, 0);\n        }\n        if (typeof locktime !== \"undefined\") {\n            this.locktime = bintools.fromBNToBuffer(locktime, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { locktime: serialization.encoder(this.locktime, encoding, \"Buffer\", \"decimalString\", 8), threshold: serialization.encoder(this.threshold, encoding, \"Buffer\", \"decimalString\", 4), addresses: this.addresses.map((a) => a.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.locktime = serialization.decoder(fields[\"locktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.threshold = serialization.decoder(fields[\"threshold\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.addresses = fields[\"addresses\"].map((a) => {\n            let addr = new Address();\n            addr.deserialize(a, encoding);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.locktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.threshold = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.numaddrs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numaddrs = this.numaddrs.readUInt32BE(0);\n        this.addresses = [];\n        for (let i = 0; i < numaddrs; i++) {\n            const addr = new Address();\n            offset = addr.fromBuffer(bytes, offset);\n            this.addresses.push(addr);\n        }\n        this.addresses.sort(Address.comparator());\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[Output]] instance.\n     */\n    toBuffer() {\n        this.addresses.sort(Address.comparator());\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        let bsize = this.locktime.length + this.threshold.length + this.numaddrs.length;\n        const barr = [this.locktime, this.threshold, this.numaddrs];\n        for (let i = 0; i < this.addresses.length; i++) {\n            const b = this.addresses[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.OutputOwners = OutputOwners;\nOutputOwners.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOutputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOutputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass Output extends OutputOwners {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Output\";\n        this._typeID = undefined;\n    }\n}\nexports.Output = Output;\nclass StandardParseableOutput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[ParseableOutput]] for a transaction.\n     *\n     * @param output A number representing the InputID of the [[ParseableOutput]]\n     */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"StandardParseableOutput\";\n        this._typeID = undefined;\n        this.getOutput = () => this.output;\n        if (output instanceof Output) {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { output: this.output.serialize(encoding) });\n    }\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outid = buffer_1.Buffer.alloc(4);\n        outid.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [outid, outbuff];\n        return buffer_1.Buffer.concat(barr, outid.length + outbuff.length);\n    }\n}\nexports.StandardParseableOutput = StandardParseableOutput;\n/**\n * Returns a function used to sort an array of [[ParseableOutput]]s\n */\nStandardParseableOutput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableOutput extends StandardParseableOutput {\n    /**\n     * Class representing an [[StandardTransferableOutput]] for a transaction.\n     *\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]\n     * @param output A number representing the InputID of the [[StandardTransferableOutput]]\n     */\n    constructor(assetID = undefined, output = undefined) {\n        super(output);\n        this._typeName = \"StandardTransferableOutput\";\n        this._typeID = undefined;\n        this.assetID = undefined;\n        this.getAssetID = () => this.assetID;\n        if (typeof assetID !== \"undefined\") {\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const barr = [this.assetID, parseableBuff];\n        return buffer_1.Buffer.concat(barr, this.assetID.length + parseableBuff.length);\n    }\n}\nexports.StandardTransferableOutput = StandardTransferableOutput;\n/**\n * An [[Output]] class which specifies a token amount .\n */\nclass StandardAmountOutput extends Output {\n    /**\n     * A [[StandardAmountOutput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"StandardAmountOutput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (typeof amount !== \"undefined\") {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { amount: serialization.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serialization.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StandardAmountOutput]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.amount = bintools.copyFrom(outbuff, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(outbuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[StandardAmountOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountOutput = StandardAmountOutput;\n/**\n * An [[Output]] class which specifies an NFT.\n */\nclass BaseNFTOutput extends Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"BaseNFTOutput\";\n        this._typeID = undefined;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the groupID as a number.\n         */\n        this.getGroupID = () => {\n            return this.groupID.readUInt32BE(0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { groupID: serialization.encoder(this.groupID, encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serialization.decoder(fields[\"groupID\"], encoding, \"decimalString\", \"Buffer\", 4);\n    }\n}\nexports.BaseNFTOutput = BaseNFTOutput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9vdXRwdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsb0NBQWdDO0FBQ2hDLGtEQUFzQjtBQUN0QixpRUFBd0M7QUFDeEMscUNBQWlDO0FBQ2pDLDhEQUFrRDtBQUNsRCwwREFJK0I7QUFDL0IsNENBQWdGO0FBRWhGOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUNqRCxNQUFNLGFBQWEsR0FBa0IsNkJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVoRTs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLGVBQU07SUFpRWpDOztPQUVHO0lBQ0g7UUFDRSxLQUFLLEVBQUUsQ0FBQTtRQXBFQyxjQUFTLEdBQUcsU0FBUyxDQUFBO1FBQ3JCLFlBQU8sR0FBRyxTQUFTLENBQUE7UUFFN0IsOENBQThDO1FBRXBDLFVBQUssR0FBRyxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3hCLFVBQUssR0FBRyxFQUFFLENBQUE7SUErRHBCLENBQUM7SUFyREQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxVQUFVLENBQUMsSUFBWTtRQUNyQixNQUFNLFFBQVEsR0FBVyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ25ELElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUksUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2pFLE1BQU0sT0FBTyxHQUFXLFFBQVEsQ0FBQyxRQUFRLENBQ3ZDLFFBQVEsRUFDUixDQUFDLEVBQ0QsUUFBUSxDQUFDLE1BQU0sR0FB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QUFjLFNBQVEsTUFBTTtJQUFsRDs7UUFDWSxjQUFTLEdBQUcsZUFBZSxDQUFBO1FBQzNCLFlBQU8sR0FBRyxTQUFTLENBQUE7UUEwQm5CLFlBQU8sR0FBVyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTNDOztXQUVHO1FBQ0gsZUFBVSxHQUFHLEdBQVcsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3JDLENBQUMsQ0FBQTtJQUNILENBQUM7SUFoQ0MsU0FBUyxDQUFDLFdBQStCLEtBQUs7UUFDNUMsSUFBSSxNQUFNLEdBQVcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5Qyx1Q0FDSyxNQUFNLEtBQ1QsT0FBTyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQzVCLElBQUksQ0FBQyxPQUFPLEVBQ1osUUFBUSxFQUNSLFFBQVEsRUFDUixlQUFlLEVBQ2YsQ0FBQyxDQUNGLElBQ0Y7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FDbEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUNqQixRQUFRLEVBQ1IsZUFBZSxFQUNmLFFBQVEsRUFDUixDQUFDLENBQ0YsQ0FBQTtJQUNILENBQUM7Q0FVRjtBQXBDRCxzQ0FvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tT3V0cHV0XG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7IE5CeXRlcyB9IGZyb20gXCIuL25ieXRlc1wiXG5pbXBvcnQgeyBVbml4Tm93IH0gZnJvbSBcIi4uL3V0aWxzL2hlbHBlcmZ1bmN0aW9uc1wiXG5pbXBvcnQge1xuICBTZXJpYWxpemFibGUsXG4gIFNlcmlhbGl6YXRpb24sXG4gIFNlcmlhbGl6ZWRFbmNvZGluZ1xufSBmcm9tIFwiLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG5pbXBvcnQgeyBDaGVja3N1bUVycm9yLCBBZGRyZXNzRXJyb3IsIEFkZHJlc3NJbmRleEVycm9yIH0gZnJvbSBcIi4uL3V0aWxzL2Vycm9yc1wiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhbiBhZGRyZXNzIHVzZWQgaW4gW1tPdXRwdXRdXSB0eXBlc1xuICovXG5leHBvcnQgY2xhc3MgQWRkcmVzcyBleHRlbmRzIE5CeXRlcyB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIkFkZHJlc3NcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIC8vc2VyaWFsaXplIGFuZCBkZXNlcmlhbGl6ZSBib3RoIGFyZSBpbmhlcml0ZWRcblxuICBwcm90ZWN0ZWQgYnl0ZXMgPSBCdWZmZXIuYWxsb2MoMjApXG4gIHByb3RlY3RlZCBic2l6ZSA9IDIwXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB1c2VkIHRvIHNvcnQgYW4gYXJyYXkgb2YgW1tBZGRyZXNzXV1lc1xuICAgKi9cbiAgc3RhdGljIGNvbXBhcmF0b3IgPVxuICAgICgpOiAoKGE6IEFkZHJlc3MsIGI6IEFkZHJlc3MpID0+IDEgfCAtMSB8IDApID0+XG4gICAgKGE6IEFkZHJlc3MsIGI6IEFkZHJlc3MpOiAxIHwgLTEgfCAwID0+XG4gICAgICBCdWZmZXIuY29tcGFyZShhLnRvQnVmZmVyKCksIGIudG9CdWZmZXIoKSkgYXMgMSB8IC0xIHwgMFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYmFzZS01OCByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tBZGRyZXNzXV0uXG4gICAqL1xuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBiaW50b29scy5jYjU4RW5jb2RlKHRoaXMudG9CdWZmZXIoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIGJhc2UtNTggc3RyaW5nIGNvbnRhaW5pbmcgYW4gW1tBZGRyZXNzXV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgQWRkcmVzcyBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEgYmFzZS01OCBzdHJpbmcgY29udGFpbmluZyBhIHJhdyBbW0FkZHJlc3NdXVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tBZGRyZXNzXV1cbiAgICovXG4gIGZyb21TdHJpbmcoYWRkcjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBhZGRyYnVmZjogQnVmZmVyID0gYmludG9vbHMuYjU4VG9CdWZmZXIoYWRkcilcbiAgICBpZiAoYWRkcmJ1ZmYubGVuZ3RoID09PSAyNCAmJiBiaW50b29scy52YWxpZGF0ZUNoZWNrc3VtKGFkZHJidWZmKSkge1xuICAgICAgY29uc3QgbmV3YnVmZjogQnVmZmVyID0gYmludG9vbHMuY29weUZyb20oXG4gICAgICAgIGFkZHJidWZmLFxuICAgICAgICAwLFxuICAgICAgICBhZGRyYnVmZi5sZW5ndGggLSA0XG4gICAgICApXG4gICAgICBpZiAobmV3YnVmZi5sZW5ndGggPT09IDIwKSB7XG4gICAgICAgIHRoaXMuYnl0ZXMgPSBuZXdidWZmXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhZGRyYnVmZi5sZW5ndGggPT09IDI0KSB7XG4gICAgICB0aHJvdyBuZXcgQ2hlY2tzdW1FcnJvcihcbiAgICAgICAgXCJFcnJvciAtIEFkZHJlc3MuZnJvbVN0cmluZzogaW52YWxpZCBjaGVja3N1bSBvbiBhZGRyZXNzXCJcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGFkZHJidWZmLmxlbmd0aCA9PT0gMjApIHtcbiAgICAgIHRoaXMuYnl0ZXMgPSBhZGRyYnVmZlxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEFkZHJlc3NFcnJvcihcIkVycm9yIC0gQWRkcmVzcy5mcm9tU3RyaW5nOiBpbnZhbGlkIGFkZHJlc3NcIilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2l6ZSgpXG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTogQWRkcmVzcyA9IG5ldyBBZGRyZXNzKClcbiAgICBuZXdiYXNlLmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKVxuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXNcbiAgfVxuXG4gIGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXMge1xuICAgIHJldHVybiBuZXcgQWRkcmVzcygpIGFzIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGFuIGFkZHJlc3MgdXNlZCBpbiBbW091dHB1dF1dIHR5cGVzXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBtb3N0IGJhc2ljIHZhbHVlcyBmb3Igb3V0cHV0IG93bmVyc2hpcC4gTW9zdGx5IGluaGVyaXRlZCBmcm9tLCBidXQgY2FuIGJlIHVzZWQgaW4gcG9wdWxhdGlvbiBvZiBORlQgT3duZXIgZGF0YS5cbiAqL1xuZXhwb3J0IGNsYXNzIE91dHB1dE93bmVycyBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIk91dHB1dE93bmVyc1wiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIGxvY2t0aW1lOiBzZXJpYWxpemF0aW9uLmVuY29kZXIoXG4gICAgICAgIHRoaXMubG9ja3RpbWUsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIkJ1ZmZlclwiLFxuICAgICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgICAgOFxuICAgICAgKSxcbiAgICAgIHRocmVzaG9sZDogc2VyaWFsaXphdGlvbi5lbmNvZGVyKFxuICAgICAgICB0aGlzLnRocmVzaG9sZCxcbiAgICAgICAgZW5jb2RpbmcsXG4gICAgICAgIFwiQnVmZmVyXCIsXG4gICAgICAgIFwiZGVjaW1hbFN0cmluZ1wiLFxuICAgICAgICA0XG4gICAgICApLFxuICAgICAgYWRkcmVzc2VzOiB0aGlzLmFkZHJlc3Nlcy5tYXAoKGE6IEFkZHJlc3MpOiBvYmplY3QgPT5cbiAgICAgICAgYS5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgICApXG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gICAgdGhpcy5sb2NrdGltZSA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcImxvY2t0aW1lXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICA4XG4gICAgKVxuICAgIHRoaXMudGhyZXNob2xkID0gc2VyaWFsaXphdGlvbi5kZWNvZGVyKFxuICAgICAgZmllbGRzW1widGhyZXNob2xkXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICA0XG4gICAgKVxuICAgIHRoaXMuYWRkcmVzc2VzID0gZmllbGRzW1wiYWRkcmVzc2VzXCJdLm1hcCgoYTogb2JqZWN0KSA9PiB7XG4gICAgICBsZXQgYWRkcjogQWRkcmVzcyA9IG5ldyBBZGRyZXNzKClcbiAgICAgIGFkZHIuZGVzZXJpYWxpemUoYSwgZW5jb2RpbmcpXG4gICAgICByZXR1cm4gYWRkclxuICAgIH0pXG4gICAgdGhpcy5udW1hZGRycyA9IEJ1ZmZlci5hbGxvYyg0KVxuICAgIHRoaXMubnVtYWRkcnMud3JpdGVVSW50MzJCRSh0aGlzLmFkZHJlc3Nlcy5sZW5ndGgsIDApXG4gIH1cblxuICBwcm90ZWN0ZWQgbG9ja3RpbWU6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg4KVxuICBwcm90ZWN0ZWQgdGhyZXNob2xkOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgcHJvdGVjdGVkIG51bWFkZHJzOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgcHJvdGVjdGVkIGFkZHJlc3NlczogQWRkcmVzc1tdID0gW11cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGhyZXNob2xkIG9mIHNpZ25lcnMgcmVxdWlyZWQgdG8gc3BlbmQgdGhpcyBvdXRwdXQuXG4gICAqL1xuICBnZXRUaHJlc2hvbGQgPSAoKTogbnVtYmVyID0+IHRoaXMudGhyZXNob2xkLnJlYWRVSW50MzJCRSgwKVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59IHJlcGVyc2VudGluZyB0aGUgVU5JWCBUaW1lc3RhbXAgd2hlbiB0aGUgbG9jayBpcyBtYWRlIGF2YWlsYWJsZS5cbiAgICovXG4gIGdldExvY2t0aW1lID0gKCk6IEJOID0+IGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKHRoaXMubG9ja3RpbWUpXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2Yge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1zIGZvciB0aGUgYWRkcmVzc2VzLlxuICAgKi9cbiAgZ2V0QWRkcmVzc2VzID0gKCk6IEJ1ZmZlcltdID0+IHtcbiAgICBjb25zdCByZXN1bHQ6IEJ1ZmZlcltdID0gW11cbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5hZGRyZXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMuYWRkcmVzc2VzW2Ake2l9YF0udG9CdWZmZXIoKSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBhZGRyZXNzLlxuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9mIHRoZSBhZGRyZXNzIHRvIGxvb2sgdXAgdG8gcmV0dXJuIGl0cyBpbmRleC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGluZGV4IG9mIHRoZSBhZGRyZXNzLlxuICAgKi9cbiAgZ2V0QWRkcmVzc0lkeCA9IChhZGRyZXNzOiBCdWZmZXIpOiBudW1iZXIgPT4ge1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLmFkZHJlc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmFkZHJlc3Nlc1tgJHtpfWBdLnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIikgPT09XG4gICAgICAgIGFkZHJlc3MudG9TdHJpbmcoXCJoZXhcIilcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiAtMVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFkZHJlc3MgZnJvbSB0aGUgaW5kZXggcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpZHggVGhlIGluZGV4IG9mIHRoZSBhZGRyZXNzLlxuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBhZGRyZXNzLlxuICAgKi9cbiAgZ2V0QWRkcmVzcyA9IChpZHg6IG51bWJlcik6IEJ1ZmZlciA9PiB7XG4gICAgaWYgKGlkeCA8IHRoaXMuYWRkcmVzc2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWRkcmVzc2VzW2Ake2lkeH1gXS50b0J1ZmZlcigpXG4gICAgfVxuICAgIHRocm93IG5ldyBBZGRyZXNzSW5kZXhFcnJvcihcIkVycm9yIC0gT3V0cHV0LmdldEFkZHJlc3M6IGlkeCBvdXQgb2YgcmFuZ2VcIilcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhbiBhcnJheSBvZiBhZGRyZXNzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9cyBhbmQgYW4gb3B0aW9uYWwgdGltZXN0YW1wLCByZXR1cm5zIHRydWUgaWYgdGhlIGFkZHJlc3NlcyBtZWV0IHRoZSB0aHJlc2hvbGQgcmVxdWlyZWQgdG8gc3BlbmQgdGhlIG91dHB1dC5cbiAgICovXG4gIG1lZXRzVGhyZXNob2xkID0gKGFkZHJlc3NlczogQnVmZmVyW10sIGFzT2Y6IEJOID0gdW5kZWZpbmVkKTogYm9vbGVhbiA9PiB7XG4gICAgbGV0IG5vdzogQk5cbiAgICBpZiAodHlwZW9mIGFzT2YgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG5vdyA9IFVuaXhOb3coKVxuICAgIH0gZWxzZSB7XG4gICAgICBub3cgPSBhc09mXG4gICAgfVxuICAgIGNvbnN0IHF1YWxpZmllZDogQnVmZmVyW10gPSB0aGlzLmdldFNwZW5kZXJzKGFkZHJlc3Nlcywgbm93KVxuICAgIGNvbnN0IHRocmVzaG9sZDogbnVtYmVyID0gdGhpcy50aHJlc2hvbGQucmVhZFVJbnQzMkJFKDApXG4gICAgaWYgKHF1YWxpZmllZC5sZW5ndGggPj0gdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGFuIGFycmF5IG9mIGFkZHJlc3NlcyBhbmQgYW4gb3B0aW9uYWwgdGltZXN0YW1wLCBzZWxlY3QgYW4gYXJyYXkgb2YgYWRkcmVzcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfXMgb2YgcXVhbGlmaWVkIHNwZW5kZXJzIGZvciB0aGUgb3V0cHV0LlxuICAgKi9cbiAgZ2V0U3BlbmRlcnMgPSAoYWRkcmVzc2VzOiBCdWZmZXJbXSwgYXNPZjogQk4gPSB1bmRlZmluZWQpOiBCdWZmZXJbXSA9PiB7XG4gICAgY29uc3QgcXVhbGlmaWVkOiBCdWZmZXJbXSA9IFtdXG4gICAgbGV0IG5vdzogQk5cbiAgICBpZiAodHlwZW9mIGFzT2YgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG5vdyA9IFVuaXhOb3coKVxuICAgIH0gZWxzZSB7XG4gICAgICBub3cgPSBhc09mXG4gICAgfVxuICAgIGNvbnN0IGxvY2t0aW1lOiBCTiA9IGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKHRoaXMubG9ja3RpbWUpXG4gICAgaWYgKG5vdy5sdGUobG9ja3RpbWUpKSB7XG4gICAgICAvLyBub3QgdW5sb2NrZWQsIG5vdCBzcGVuZGFibGVcbiAgICAgIHJldHVybiBxdWFsaWZpZWRcbiAgICB9XG5cbiAgICBjb25zdCB0aHJlc2hvbGQ6IG51bWJlciA9IHRoaXMudGhyZXNob2xkLnJlYWRVSW50MzJCRSgwKVxuICAgIGZvciAoXG4gICAgICBsZXQgaTogbnVtYmVyID0gMDtcbiAgICAgIGkgPCB0aGlzLmFkZHJlc3Nlcy5sZW5ndGggJiYgcXVhbGlmaWVkLmxlbmd0aCA8IHRocmVzaG9sZDtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGo6IG51bWJlciA9IDA7XG4gICAgICAgIGogPCBhZGRyZXNzZXMubGVuZ3RoICYmIHF1YWxpZmllZC5sZW5ndGggPCB0aHJlc2hvbGQ7XG4gICAgICAgIGorK1xuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBhZGRyZXNzZXNbYCR7an1gXS50b1N0cmluZyhcImhleFwiKSA9PT1cbiAgICAgICAgICB0aGlzLmFkZHJlc3Nlc1tgJHtpfWBdLnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgcXVhbGlmaWVkLnB1c2goYWRkcmVzc2VzW2Ake2p9YF0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcXVhbGlmaWVkXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgW1tPdXRwdXRdXS5cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLmxvY2t0aW1lID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgOClcbiAgICBvZmZzZXQgKz0gOFxuICAgIHRoaXMudGhyZXNob2xkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNClcbiAgICBvZmZzZXQgKz0gNFxuICAgIHRoaXMubnVtYWRkcnMgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgIG9mZnNldCArPSA0XG4gICAgY29uc3QgbnVtYWRkcnM6IG51bWJlciA9IHRoaXMubnVtYWRkcnMucmVhZFVJbnQzMkJFKDApXG4gICAgdGhpcy5hZGRyZXNzZXMgPSBbXVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBudW1hZGRyczsgaSsrKSB7XG4gICAgICBjb25zdCBhZGRyOiBBZGRyZXNzID0gbmV3IEFkZHJlc3MoKVxuICAgICAgb2Zmc2V0ID0gYWRkci5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpXG4gICAgICB0aGlzLmFkZHJlc3Nlcy5wdXNoKGFkZHIpXG4gICAgfVxuICAgIHRoaXMuYWRkcmVzc2VzLnNvcnQoQWRkcmVzcy5jb21wYXJhdG9yKCkpXG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIFtbT3V0cHV0XV0gaW5zdGFuY2UuXG4gICAqL1xuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIHRoaXMuYWRkcmVzc2VzLnNvcnQoQWRkcmVzcy5jb21wYXJhdG9yKCkpXG4gICAgdGhpcy5udW1hZGRycy53cml0ZVVJbnQzMkJFKHRoaXMuYWRkcmVzc2VzLmxlbmd0aCwgMClcbiAgICBsZXQgYnNpemU6IG51bWJlciA9XG4gICAgICB0aGlzLmxvY2t0aW1lLmxlbmd0aCArIHRoaXMudGhyZXNob2xkLmxlbmd0aCArIHRoaXMubnVtYWRkcnMubGVuZ3RoXG4gICAgY29uc3QgYmFycjogQnVmZmVyW10gPSBbdGhpcy5sb2NrdGltZSwgdGhpcy50aHJlc2hvbGQsIHRoaXMubnVtYWRkcnNdXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBiOiBCdWZmZXIgPSB0aGlzLmFkZHJlc3Nlc1tgJHtpfWBdLnRvQnVmZmVyKClcbiAgICAgIGJhcnIucHVzaChiKVxuICAgICAgYnNpemUgKz0gYi5sZW5ndGhcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgYnNpemUpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgW1tPdXRwdXRdXS5cbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSlcbiAgfVxuXG4gIHN0YXRpYyBjb21wYXJhdG9yID1cbiAgICAoKTogKChhOiBPdXRwdXQsIGI6IE91dHB1dCkgPT4gMSB8IC0xIHwgMCkgPT5cbiAgICAoYTogT3V0cHV0LCBiOiBPdXRwdXQpOiAxIHwgLTEgfCAwID0+IHtcbiAgICAgIGNvbnN0IGFvdXRpZDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgICBhb3V0aWQud3JpdGVVSW50MzJCRShhLmdldE91dHB1dElEKCksIDApXG4gICAgICBjb25zdCBhYnVmZjogQnVmZmVyID0gYS50b0J1ZmZlcigpXG5cbiAgICAgIGNvbnN0IGJvdXRpZDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgICBib3V0aWQud3JpdGVVSW50MzJCRShiLmdldE91dHB1dElEKCksIDApXG4gICAgICBjb25zdCBiYnVmZjogQnVmZmVyID0gYi50b0J1ZmZlcigpXG5cbiAgICAgIGNvbnN0IGFzb3J0OiBCdWZmZXIgPSBCdWZmZXIuY29uY2F0KFxuICAgICAgICBbYW91dGlkLCBhYnVmZl0sXG4gICAgICAgIGFvdXRpZC5sZW5ndGggKyBhYnVmZi5sZW5ndGhcbiAgICAgIClcbiAgICAgIGNvbnN0IGJzb3J0OiBCdWZmZXIgPSBCdWZmZXIuY29uY2F0KFxuICAgICAgICBbYm91dGlkLCBiYnVmZl0sXG4gICAgICAgIGJvdXRpZC5sZW5ndGggKyBiYnVmZi5sZW5ndGhcbiAgICAgIClcbiAgICAgIHJldHVybiBCdWZmZXIuY29tcGFyZShhc29ydCwgYnNvcnQpIGFzIDEgfCAtMSB8IDBcbiAgICB9XG5cbiAgLyoqXG4gICAqIEFuIFtbT3V0cHV0XV0gY2xhc3Mgd2hpY2ggY29udGFpbnMgYWRkcmVzc2VzLCBsb2NrdGltZXMsIGFuZCB0aHJlc2hvbGRzLlxuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzc2VzIEFuIGFycmF5IG9mIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9cyByZXByZXNlbnRpbmcgb3V0cHV0IG93bmVyJ3MgYWRkcmVzc2VzXG4gICAqIEBwYXJhbSBsb2NrdGltZSBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59IHJlcHJlc2VudGluZyB0aGUgbG9ja3RpbWVcbiAgICogQHBhcmFtIHRocmVzaG9sZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHRoZSB0aHJlc2hvbGQgbnVtYmVyIG9mIHNpZ25lcnMgcmVxdWlyZWQgdG8gc2lnbiB0aGUgdHJhbnNhY3Rpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFkZHJlc3NlczogQnVmZmVyW10gPSB1bmRlZmluZWQsXG4gICAgbG9ja3RpbWU6IEJOID0gdW5kZWZpbmVkLFxuICAgIHRocmVzaG9sZDogbnVtYmVyID0gdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKClcbiAgICBpZiAodHlwZW9mIGFkZHJlc3NlcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhZGRyZXNzZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBhZGRyczogQWRkcmVzc1tdID0gW11cbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWRkcnNbYCR7aX1gXSA9IG5ldyBBZGRyZXNzKClcbiAgICAgICAgYWRkcnNbYCR7aX1gXS5mcm9tQnVmZmVyKGFkZHJlc3Nlc1tgJHtpfWBdKVxuICAgICAgfVxuICAgICAgdGhpcy5hZGRyZXNzZXMgPSBhZGRyc1xuICAgICAgdGhpcy5hZGRyZXNzZXMuc29ydChBZGRyZXNzLmNvbXBhcmF0b3IoKSlcbiAgICAgIHRoaXMubnVtYWRkcnMud3JpdGVVSW50MzJCRSh0aGlzLmFkZHJlc3Nlcy5sZW5ndGgsIDApXG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhyZXNob2xkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGhyZXNob2xkLndyaXRlVUludDMyQkUodGhyZXNob2xkIHx8IDEsIDApXG4gICAgfVxuICAgIGlmICh0eXBlb2YgbG9ja3RpbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMubG9ja3RpbWUgPSBiaW50b29scy5mcm9tQk5Ub0J1ZmZlcihsb2NrdGltZSwgOClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE91dHB1dCBleHRlbmRzIE91dHB1dE93bmVycyB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIk91dHB1dFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvdXRwdXRJRCBmb3IgdGhlIG91dHB1dCB3aGljaCB0ZWxscyBwYXJzZXJzIHdoYXQgdHlwZSBpdCBpc1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0T3V0cHV0SUQoKTogbnVtYmVyXG5cbiAgYWJzdHJhY3QgY2xvbmUoKTogdGhpc1xuXG4gIGFic3RyYWN0IGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXNcblxuICBhYnN0cmFjdCBzZWxlY3QoaWQ6IG51bWJlciwgLi4uYXJnczogYW55W10pOiBPdXRwdXRcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGFzc2V0SUQgQW4gYXNzZXRJRCB3aGljaCBpcyB3cmFwcGVkIGFyb3VuZCB0aGUgQnVmZmVyIG9mIHRoZSBPdXRwdXRcbiAgICpcbiAgICogTXVzdCBiZSBpbXBsZW1lbnRlZCB0byB1c2UgdGhlIGFwcHJvcHJpYXRlIFRyYW5zZmVyYWJsZU91dHB1dCBmb3IgdGhlIFZNLlxuICAgKi9cbiAgYWJzdHJhY3QgbWFrZVRyYW5zZmVyYWJsZShhc3NldElEOiBCdWZmZXIpOiBTdGFuZGFyZFRyYW5zZmVyYWJsZU91dHB1dFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RhbmRhcmRQYXJzZWFibGVPdXRwdXQgZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTdGFuZGFyZFBhcnNlYWJsZU91dHB1dFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIG91dHB1dDogdGhpcy5vdXRwdXQuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBvdXRwdXQ6IE91dHB1dFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCB0byBzb3J0IGFuIGFycmF5IG9mIFtbUGFyc2VhYmxlT3V0cHV0XV1zXG4gICAqL1xuICBzdGF0aWMgY29tcGFyYXRvciA9XG4gICAgKCk6ICgoXG4gICAgICBhOiBTdGFuZGFyZFBhcnNlYWJsZU91dHB1dCxcbiAgICAgIGI6IFN0YW5kYXJkUGFyc2VhYmxlT3V0cHV0XG4gICAgKSA9PiAxIHwgLTEgfCAwKSA9PlxuICAgIChhOiBTdGFuZGFyZFBhcnNlYWJsZU91dHB1dCwgYjogU3RhbmRhcmRQYXJzZWFibGVPdXRwdXQpOiAxIHwgLTEgfCAwID0+IHtcbiAgICAgIGNvbnN0IHNvcnRhID0gYS50b0J1ZmZlcigpXG4gICAgICBjb25zdCBzb3J0YiA9IGIudG9CdWZmZXIoKVxuICAgICAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHNvcnRhLCBzb3J0YikgYXMgMSB8IC0xIHwgMFxuICAgIH1cblxuICBnZXRPdXRwdXQgPSAoKTogT3V0cHV0ID0+IHRoaXMub3V0cHV0XG5cbiAgLy8gbXVzdCBiZSBpbXBsZW1lbnRlZCB0byBzZWxlY3Qgb3V0cHV0IHR5cGVzIGZvciB0aGUgVk0gaW4gcXVlc3Rpb25cbiAgYWJzdHJhY3QgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ/OiBudW1iZXIpOiBudW1iZXJcblxuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIGNvbnN0IG91dGJ1ZmY6IEJ1ZmZlciA9IHRoaXMub3V0cHV0LnRvQnVmZmVyKClcbiAgICBjb25zdCBvdXRpZDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgb3V0aWQud3JpdGVVSW50MzJCRSh0aGlzLm91dHB1dC5nZXRPdXRwdXRJRCgpLCAwKVxuICAgIGNvbnN0IGJhcnI6IEJ1ZmZlcltdID0gW291dGlkLCBvdXRidWZmXVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIsIG91dGlkLmxlbmd0aCArIG91dGJ1ZmYubGVuZ3RoKVxuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBbW1BhcnNlYWJsZU91dHB1dF1dIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gb3V0cHV0IEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgSW5wdXRJRCBvZiB0aGUgW1tQYXJzZWFibGVPdXRwdXRdXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3V0cHV0OiBPdXRwdXQgPSB1bmRlZmluZWQpIHtcbiAgICBzdXBlcigpXG4gICAgaWYgKG91dHB1dCBpbnN0YW5jZW9mIE91dHB1dCkge1xuICAgICAgdGhpcy5vdXRwdXQgPSBvdXRwdXRcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkVHJhbnNmZXJhYmxlT3V0cHV0IGV4dGVuZHMgU3RhbmRhcmRQYXJzZWFibGVPdXRwdXQge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTdGFuZGFyZFRyYW5zZmVyYWJsZU91dHB1dFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIGFzc2V0SUQ6IHNlcmlhbGl6YXRpb24uZW5jb2Rlcih0aGlzLmFzc2V0SUQsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImNiNThcIilcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLmFzc2V0SUQgPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoXG4gICAgICBmaWVsZHNbXCJhc3NldElEXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImNiNThcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICAzMlxuICAgIClcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3NldElEOiBCdWZmZXIgPSB1bmRlZmluZWRcblxuICBnZXRBc3NldElEID0gKCk6IEJ1ZmZlciA9PiB0aGlzLmFzc2V0SURcblxuICAvLyBtdXN0IGJlIGltcGxlbWVudGVkIHRvIHNlbGVjdCBvdXRwdXQgdHlwZXMgZm9yIHRoZSBWTSBpbiBxdWVzdGlvblxuICBhYnN0cmFjdCBmcm9tQnVmZmVyKGJ5dGVzOiBCdWZmZXIsIG9mZnNldD86IG51bWJlcik6IG51bWJlclxuXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgY29uc3QgcGFyc2VhYmxlQnVmZjogQnVmZmVyID0gc3VwZXIudG9CdWZmZXIoKVxuICAgIGNvbnN0IGJhcnI6IEJ1ZmZlcltdID0gW3RoaXMuYXNzZXRJRCwgcGFyc2VhYmxlQnVmZl1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyLCB0aGlzLmFzc2V0SUQubGVuZ3RoICsgcGFyc2VhYmxlQnVmZi5sZW5ndGgpXG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIFtbU3RhbmRhcmRUcmFuc2ZlcmFibGVPdXRwdXRdXSBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIGFzc2V0SUQgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRpbmcgdGhlIGFzc2V0SUQgb2YgdGhlIFtbT3V0cHV0XV1cbiAgICogQHBhcmFtIG91dHB1dCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIElucHV0SUQgb2YgdGhlIFtbU3RhbmRhcmRUcmFuc2ZlcmFibGVPdXRwdXRdXVxuICAgKi9cbiAgY29uc3RydWN0b3IoYXNzZXRJRDogQnVmZmVyID0gdW5kZWZpbmVkLCBvdXRwdXQ6IE91dHB1dCA9IHVuZGVmaW5lZCkge1xuICAgIHN1cGVyKG91dHB1dClcbiAgICBpZiAodHlwZW9mIGFzc2V0SUQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuYXNzZXRJRCA9IGFzc2V0SURcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBbW091dHB1dF1dIGNsYXNzIHdoaWNoIHNwZWNpZmllcyBhIHRva2VuIGFtb3VudCAuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdGFuZGFyZEFtb3VudE91dHB1dCBleHRlbmRzIE91dHB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlN0YW5kYXJkQW1vdW50T3V0cHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgYW1vdW50OiBzZXJpYWxpemF0aW9uLmVuY29kZXIoXG4gICAgICAgIHRoaXMuYW1vdW50LFxuICAgICAgICBlbmNvZGluZyxcbiAgICAgICAgXCJCdWZmZXJcIixcbiAgICAgICAgXCJkZWNpbWFsU3RyaW5nXCIsXG4gICAgICAgIDhcbiAgICAgIClcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLmFtb3VudCA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcImFtb3VudFwiXSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgXCJkZWNpbWFsU3RyaW5nXCIsXG4gICAgICBcIkJ1ZmZlclwiLFxuICAgICAgOFxuICAgIClcbiAgICB0aGlzLmFtb3VudFZhbHVlID0gYmludG9vbHMuZnJvbUJ1ZmZlclRvQk4odGhpcy5hbW91bnQpXG4gIH1cblxuICBwcm90ZWN0ZWQgYW1vdW50OiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoOClcbiAgcHJvdGVjdGVkIGFtb3VudFZhbHVlOiBCTiA9IG5ldyBCTigwKVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhbW91bnQgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfS5cbiAgICovXG4gIGdldEFtb3VudCA9ICgpOiBCTiA9PiB0aGlzLmFtb3VudFZhbHVlLmNsb25lKClcblxuICAvKipcbiAgICogUG9wdWF0ZXMgdGhlIGluc3RhbmNlIGZyb20gYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRpbmcgdGhlIFtbU3RhbmRhcmRBbW91bnRPdXRwdXRdXSBhbmQgcmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgb3V0cHV0LlxuICAgKi9cbiAgZnJvbUJ1ZmZlcihvdXRidWZmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgdGhpcy5hbW91bnQgPSBiaW50b29scy5jb3B5RnJvbShvdXRidWZmLCBvZmZzZXQsIG9mZnNldCArIDgpXG4gICAgdGhpcy5hbW91bnRWYWx1ZSA9IGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKHRoaXMuYW1vdW50KVxuICAgIG9mZnNldCArPSA4XG4gICAgcmV0dXJuIHN1cGVyLmZyb21CdWZmZXIob3V0YnVmZiwgb2Zmc2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIFtbU3RhbmRhcmRBbW91bnRPdXRwdXRdXSBpbnN0YW5jZS5cbiAgICovXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgY29uc3Qgc3VwZXJidWZmOiBCdWZmZXIgPSBzdXBlci50b0J1ZmZlcigpXG4gICAgY29uc3QgYnNpemU6IG51bWJlciA9IHRoaXMuYW1vdW50Lmxlbmd0aCArIHN1cGVyYnVmZi5sZW5ndGhcbiAgICB0aGlzLm51bWFkZHJzLndyaXRlVUludDMyQkUodGhpcy5hZGRyZXNzZXMubGVuZ3RoLCAwKVxuICAgIGNvbnN0IGJhcnI6IEJ1ZmZlcltdID0gW3RoaXMuYW1vdW50LCBzdXBlcmJ1ZmZdXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgYnNpemUpXG4gIH1cblxuICAvKipcbiAgICogQSBbW1N0YW5kYXJkQW1vdW50T3V0cHV0XV0gY2xhc3Mgd2hpY2ggaXNzdWVzIGEgcGF5bWVudCBvbiBhbiBhc3NldElELlxuICAgKlxuICAgKiBAcGFyYW0gYW1vdW50IEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn0gcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgaW4gdGhlIG91dHB1dFxuICAgKiBAcGFyYW0gYWRkcmVzc2VzIEFuIGFycmF5IG9mIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9cyByZXByZXNlbnRpbmcgYWRkcmVzc2VzXG4gICAqIEBwYXJhbSBsb2NrdGltZSBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59IHJlcHJlc2VudGluZyB0aGUgbG9ja3RpbWVcbiAgICogQHBhcmFtIHRocmVzaG9sZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHRoZSB0aHJlc2hvbGQgbnVtYmVyIG9mIHNpZ25lcnMgcmVxdWlyZWQgdG8gc2lnbiB0aGUgdHJhbnNhY3Rpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFtb3VudDogQk4gPSB1bmRlZmluZWQsXG4gICAgYWRkcmVzc2VzOiBCdWZmZXJbXSA9IHVuZGVmaW5lZCxcbiAgICBsb2NrdGltZTogQk4gPSB1bmRlZmluZWQsXG4gICAgdGhyZXNob2xkOiBudW1iZXIgPSB1bmRlZmluZWRcbiAgKSB7XG4gICAgc3VwZXIoYWRkcmVzc2VzLCBsb2NrdGltZSwgdGhyZXNob2xkKVxuICAgIGlmICh0eXBlb2YgYW1vdW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLmFtb3VudFZhbHVlID0gYW1vdW50LmNsb25lKClcbiAgICAgIHRoaXMuYW1vdW50ID0gYmludG9vbHMuZnJvbUJOVG9CdWZmZXIoYW1vdW50LCA4KVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFuIFtbT3V0cHV0XV0gY2xhc3Mgd2hpY2ggc3BlY2lmaWVzIGFuIE5GVC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VORlRPdXRwdXQgZXh0ZW5kcyBPdXRwdXQge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJCYXNlTkZUT3V0cHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgZ3JvdXBJRDogc2VyaWFsaXphdGlvbi5lbmNvZGVyKFxuICAgICAgICB0aGlzLmdyb3VwSUQsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIkJ1ZmZlclwiLFxuICAgICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgICAgNFxuICAgICAgKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuZ3JvdXBJRCA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcImdyb3VwSURcIl0sXG4gICAgICBlbmNvZGluZyxcbiAgICAgIFwiZGVjaW1hbFN0cmluZ1wiLFxuICAgICAgXCJCdWZmZXJcIixcbiAgICAgIDRcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgZ3JvdXBJRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdyb3VwSUQgYXMgYSBudW1iZXIuXG4gICAqL1xuICBnZXRHcm91cElEID0gKCk6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBJRC5yZWFkVUludDMyQkUoMClcbiAgfVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst exporttx_1 = require(\"../platformvm/exporttx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst importtx_1 = require(\"../platformvm/importtx\");\nconst basetx_1 = require(\"../platformvm/basetx\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, outputs_1.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, outputs_1.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.PlatformVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getConsumableUXTO = (asOf = (0, helperfunctions_1.UnixNow)(), stakeable = false) => {\n            return this.getAllUTXOs().filter((utxo) => {\n                if (stakeable) {\n                    // stakeable transactions can consume any UTXO.\n                    return true;\n                }\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.StakeableLockOut)) {\n                    // non-stakeable transactions can consume any UTXO that isn't locked.\n                    return true;\n                }\n                const stakeableOutput = output;\n                if (stakeableOutput.getStakeableLocktime().lt(asOf)) {\n                    // If the stakeable outputs locktime has ended, then this UTXO can still\n                    // be consumed by a non-stakeable transaction.\n                    return true;\n                }\n                // This output is locked and can't be consumed by a non-stakeable\n                // transaction.\n                return false;\n            });\n        };\n        this.getMinimumSpendable = (aad, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1, stakeable = false) => {\n            let utxoArray = this.getConsumableUXTO(asOf, stakeable);\n            let tmpUTXOArray = [];\n            if (stakeable) {\n                // If this is a stakeable transaction then have StakeableLockOut come before SECPTransferOutput\n                // so that users first stake locked tokens before staking unlocked tokens\n                utxoArray.forEach((utxo) => {\n                    // StakeableLockOuts\n                    if (utxo.getOutput().getTypeID() === 22) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                // Sort the StakeableLockOuts by StakeableLocktime so that the greatest StakeableLocktime are spent first\n                tmpUTXOArray.sort((a, b) => {\n                    let stakeableLockOut1 = a.getOutput();\n                    let stakeableLockOut2 = b.getOutput();\n                    return (stakeableLockOut2.getStakeableLocktime().toNumber() -\n                        stakeableLockOut1.getStakeableLocktime().toNumber());\n                });\n                utxoArray.forEach((utxo) => {\n                    // SECPTransferOutputs\n                    if (utxo.getOutput().getTypeID() === 7) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                utxoArray = tmpUTXOArray;\n            }\n            // outs is a map from assetID to a tuple of (lockedStakeable, unlocked)\n            // which are arrays of outputs.\n            const outs = {};\n            // We only need to iterate over UTXOs until we have spent sufficient funds\n            // to met the requested amounts.\n            utxoArray.forEach((utxo, index) => {\n                const assetID = utxo.getAssetID();\n                const assetKey = assetID.toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.AmountOutput) ||\n                    !aad.assetExists(assetKey) ||\n                    !output.meetsThreshold(fromAddresses, asOf)) {\n                    // We should only try to spend fungible assets.\n                    // We should only spend {{ assetKey }}.\n                    // We need to be able to spend the output.\n                    return;\n                }\n                const assetAmount = aad.getAssetAmount(assetKey);\n                if (assetAmount.isFinished()) {\n                    // We've already spent the needed UTXOs for this assetID.\n                    return;\n                }\n                if (!(assetKey in outs)) {\n                    // If this is the first time spending this assetID, we need to\n                    // initialize the outs object correctly.\n                    outs[`${assetKey}`] = {\n                        lockedStakeable: [],\n                        unlocked: []\n                    };\n                }\n                const amountOutput = output;\n                // amount is the amount of funds available from this UTXO.\n                const amount = amountOutput.getAmount();\n                // Set up the SECP input with the same amount as the output.\n                let input = new inputs_1.SECPTransferInput(amount);\n                let locked = false;\n                if (amountOutput instanceof outputs_1.StakeableLockOut) {\n                    const stakeableOutput = amountOutput;\n                    const stakeableLocktime = stakeableOutput.getStakeableLocktime();\n                    if (stakeableLocktime.gt(asOf)) {\n                        // Add a new input and mark it as being locked.\n                        input = new inputs_1.StakeableLockIn(amount, stakeableLocktime, new inputs_1.ParseableInput(input));\n                        // Mark this UTXO as having been re-locked.\n                        locked = true;\n                    }\n                }\n                assetAmount.spendAmount(amount, locked);\n                if (locked) {\n                    // Track the UTXO as locked.\n                    outs[`${assetKey}`].lockedStakeable.push(amountOutput);\n                }\n                else {\n                    // Track the UTXO as unlocked.\n                    outs[`${assetKey}`].unlocked.push(amountOutput);\n                }\n                // Get the indices of the outputs that should be used to authorize the\n                // spending of this input.\n                // TODO: getSpenders should return an array of indices rather than an\n                // array of addresses.\n                const spenders = amountOutput.getSpenders(fromAddresses, asOf);\n                spenders.forEach((spender) => {\n                    const idx = amountOutput.getAddressIdx(spender);\n                    if (idx === -1) {\n                        // This should never happen, which is why the error is thrown rather\n                        // than being returned. If this were to ever happen this would be an\n                        // error in the internal logic rather having called this function with\n                        // invalid arguments.\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such \" +\n                            `address in output: ${spender}`);\n                    }\n                    input.addSignatureIdx(idx, spender);\n                });\n                const txID = utxo.getTxID();\n                const outputIdx = utxo.getOutputIdx();\n                const transferInput = new inputs_1.TransferableInput(txID, outputIdx, assetID, input);\n                aad.addInput(transferInput);\n            });\n            if (!aad.canComplete()) {\n                // After running through all the UTXOs, we still weren't able to get all\n                // the necessary funds, so this transaction can't be made.\n                return new errors_1.InsufficientFundsError(\"Error - UTXOSet.getMinimumSpendable: insufficient \" +\n                    \"funds to create the transaction\");\n            }\n            // TODO: We should separate the above functionality into a single function\n            // that just selects the UTXOs to consume.\n            const zero = new bn_js_1.default(0);\n            // assetAmounts is an array of asset descriptions and how much is left to\n            // spend for them.\n            const assetAmounts = aad.getAmounts();\n            assetAmounts.forEach((assetAmount) => {\n                // change is the amount that should be returned back to the source of the\n                // funds.\n                const change = assetAmount.getChange();\n                // isStakeableLockChange is if the change is locked or not.\n                const isStakeableLockChange = assetAmount.getStakeableLockChange();\n                // lockedChange is the amount of locked change that should be returned to\n                // the sender\n                const lockedChange = isStakeableLockChange ? change : zero.clone();\n                const assetID = assetAmount.getAssetID();\n                const assetKey = assetAmount.getAssetIDString();\n                const lockedOutputs = outs[`${assetKey}`].lockedStakeable;\n                lockedOutputs.forEach((lockedOutput, i) => {\n                    const stakeableLocktime = lockedOutput.getStakeableLocktime();\n                    const parseableOutput = lockedOutput.getTransferableOutput();\n                    // We know that parseableOutput contains an AmountOutput because the\n                    // first loop filters for fungible assets.\n                    const output = parseableOutput.getOutput();\n                    let outputAmountRemaining = output.getAmount();\n                    // The only output that could generate change is the last output.\n                    // Otherwise, any further UTXOs wouldn't have needed to be spent.\n                    if (i == lockedOutputs.length - 1 && lockedChange.gt(zero)) {\n                        // update outputAmountRemaining to no longer hold the change that we\n                        // are returning.\n                        outputAmountRemaining = outputAmountRemaining.sub(lockedChange);\n                        // Create the inner output.\n                        const newChangeOutput = (0, outputs_1.SelectOutputClass)(output.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                        // Wrap the inner output in the StakeableLockOut wrapper.\n                        let newLockedChangeOutput = (0, outputs_1.SelectOutputClass)(lockedOutput.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newChangeOutput));\n                        const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedChangeOutput);\n                        aad.addChange(transferOutput);\n                    }\n                    // We know that outputAmountRemaining > 0. Otherwise, we would never\n                    // have consumed this UTXO, as it would be only change.\n                    // Create the inner output.\n                    const newOutput = (0, outputs_1.SelectOutputClass)(output.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                    // Wrap the inner output in the StakeableLockOut wrapper.\n                    const newLockedOutput = (0, outputs_1.SelectOutputClass)(lockedOutput.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newOutput));\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedOutput);\n                    aad.addOutput(transferOutput);\n                });\n                // unlockedChange is the amount of unlocked change that should be returned\n                // to the sender\n                const unlockedChange = isStakeableLockChange ? zero.clone() : change;\n                if (unlockedChange.gt(zero)) {\n                    const newChangeOutput = new outputs_1.SECPTransferOutput(unlockedChange, aad.getChangeAddresses(), zero.clone(), // make sure that we don't lock the change output.\n                    1 // only require one of the changes addresses to spend this output.\n                    );\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newChangeOutput);\n                    aad.addChange(transferOutput);\n                }\n                // totalAmountSpent is the total amount of tokens consumed.\n                const totalAmountSpent = assetAmount.getSpent();\n                // stakeableLockedAmount is the total amount of locked tokens consumed.\n                const stakeableLockedAmount = assetAmount.getStakeableLockSpent();\n                // totalUnlockedSpent is the total amount of unlocked tokens consumed.\n                const totalUnlockedSpent = totalAmountSpent.sub(stakeableLockedAmount);\n                // amountBurnt is the amount of unlocked tokens that must be burn.\n                const amountBurnt = assetAmount.getBurn();\n                // totalUnlockedAvailable is the total amount of unlocked tokens available\n                // to be produced.\n                const totalUnlockedAvailable = totalUnlockedSpent.sub(amountBurnt);\n                // unlockedAmount is the amount of unlocked tokens that should be sent.\n                const unlockedAmount = totalUnlockedAvailable.sub(unlockedChange);\n                if (unlockedAmount.gt(zero)) {\n                    const newOutput = new outputs_1.SECPTransferOutput(unlockedAmount, aad.getDestinations(), locktime, threshold);\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newOutput);\n                    aad.addOutput(transferOutput);\n                }\n            });\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new errors_1.ThresholdError(\"Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses\");\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const baseTx = new basetx_1.BaseTx(networkID, blockchainID, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned ImportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param importIns An array of [[TransferableInput]]s being imported\n         * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[`${i}`];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gte(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[`${j}`]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such \" +\n                            `address in output: ${spenders[`${j}`]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n         * Creates an unsigned ExportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the AVAX\n         * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildExportTx = (networkID, blockchainID, amount, avaxAssetID, // TODO: rename this to amountAssetID\n        toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new errors_1.FeeAssetError(\"Error - UTXOSet.buildExportTx: \" + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.Defaults.network[`${networkID}`].X[\"blockchainID\"]);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n        /**\n         * Class representing an unsigned [[AddSubnetValidatorTx]] transaction.\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n         * @param weight The amount of weight for this subnet validator.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        /* must implement later once the transaction format signing process is clearer\n        buildAddSubnetValidatorTx = (\n          networkID:number = DefaultNetworkID,\n          blockchainID:Buffer,\n          fromAddresses:Buffer[],\n          changeAddresses:Buffer[],\n          nodeID:Buffer,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          fee:BN = undefined,\n          feeAssetID:Buffer = undefined,\n          memo:Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):UnsignedTx => {\n          let ins:TransferableInput[] = [];\n          let outs:TransferableOutput[] = [];\n          //let stakeOuts:TransferableOutput[] = [];\n      \n          const zero:BN = new BN(0);\n          const now:BN = UnixNow();\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"UTXOSet.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n          }\n      \n          // Not implemented: Fees can be paid from importIns\n          if(this._feeCheck(fee, feeAssetID)) {\n            const aad:AssetAmountDestination = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n            aad.addAssetAmount(feeAssetID, zero, fee);\n            const success:Error = this.getMinimumSpendable(aad, asOf);\n            if(typeof success === \"undefined\") {\n              ins = aad.getInputs();\n              outs = aad.getAllOutputs();\n            } else {\n              throw success;\n            }\n          }\n      \n          const UTx:AddSubnetValidatorTx = new AddSubnetValidatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, weight);\n          return new UnsignedTx(UTx);\n        }\n        */\n        /**\n         * Class representing an unsigned [[AddDelegatorTx]] transaction.\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n         * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nAVAX.\n         * @param rewardLocktime The locktime field created in the resulting reward outputs\n         * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n         * @param rewardAddresses The addresses the validator reward goes.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddDelegatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, avaxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddDelegatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners));\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n         * Class representing an unsigned [[AddValidatorTx]] transaction.\n         *\n         * @param networkID NetworkID, [[DefaultNetworkID]]\n         * @param blockchainID BlockchainID, default undefined\n         * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n         * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nAVAX.\n         * @param rewardLocktime The locktime field created in the resulting reward outputs\n         * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n         * @param rewardAddresses The addresses the validator reward goes.\n         * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n         * @param minStake A {@link https://github.com/indutny/bn.js/|BN} representing the minimum stake required to validate on this network.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddValidatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, avaxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, delegationFee, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            if (delegationFee > 100 || delegationFee < 0) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddValidatorTx -- startTime must be in the range of 0 to 100, inclusively\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddValidatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners), delegationFee);\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n         * Class representing an unsigned [[CreateSubnetTx]] transaction.\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs.\n         * @param subnetOwnerAddresses An array of {@link https://github.com/feross/buffer|Buffer} for the addresses to add to a subnet\n         * @param subnetOwnerThreshold The number of owners's signatures required to add a validator to the network\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildCreateSubnetTx = (networkID = constants_2.DefaultNetworkID, blockchainID, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const locktime = new bn_js_1.default(0);\n            const UTx = new createsubnettx_1.CreateSubnetTx(networkID, blockchainID, outs, ins, memo, new outputs_1.SECPOwnerOutput(subnetOwnerAddresses, locktime, subnetOwnerThreshold));\n            return new tx_1.UnsignedTx(UTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = new UTXO();\n            utxos[`${utxoidCleaned}`].deserialize(fields[\"utxos\"][`${utxoid}`], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serialization.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][`${address}`]) {\n                let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serialization.decoder(fields[\"addressUTXOs\"][`${address}`][`${utxoid}`], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === \"string\") {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof utxos_1.StandardUTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) &&\n            feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-NBytes\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NBytes = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Abstract class that implements basic functionality for managing a\n * {@link https://github.com/feross/buffer|Buffer} of an exact length.\n *\n * Create a class that extends this one and override bsize to make it validate for exactly\n * the correct length.\n */\nclass NBytes extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NBytes\";\n        this._typeID = undefined;\n        /**\n         * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns The exact length requirement of this class\n         */\n        this.getSize = () => this.bsize;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { bsize: serialization.encoder(this.bsize, encoding, \"number\", \"decimalString\", 4), bytes: serialization.encoder(this.bytes, encoding, \"Buffer\", \"hex\", this.bsize) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.bsize = serialization.decoder(fields[\"bsize\"], encoding, \"decimalString\", \"number\", 4);\n        this.bytes = serialization.decoder(fields[\"bytes\"], encoding, \"hex\", \"Buffer\", this.bsize);\n    }\n    /**\n     * Takes a base-58 encoded string, verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromString(b58str) {\n        try {\n            this.fromBuffer(bintools.b58ToBuffer(b58str));\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromString: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return this.bsize;\n    }\n    /**\n     * Takes a [[Buffer]], verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromBuffer(buff, offset = 0) {\n        try {\n            if (buff.length - offset < this.bsize) {\n                /* istanbul ignore next */\n                throw new errors_1.BufferSizeError(\"Error - NBytes.fromBuffer: not enough space available in buffer.\");\n            }\n            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromBuffer: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return offset + this.bsize;\n    }\n    /**\n     * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toBuffer() {\n        return this.bytes;\n    }\n    /**\n     * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NBytes = NBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9uYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsaUVBQXdDO0FBQ3hDLDBEQUkrQjtBQUMvQiw0Q0FBaUQ7QUFFakQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sYUFBYSxHQUFrQiw2QkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWhFOzs7Ozs7R0FNRztBQUNILE1BQXNCLE1BQU8sU0FBUSw0QkFBWTtJQUFqRDs7UUFDWSxjQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3BCLFlBQU8sR0FBRyxTQUFTLENBQUE7UUEyQzdCOzs7O1dBSUc7UUFDSCxZQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQTJENUIsQ0FBQztJQXpHQyxTQUFTLENBQUMsV0FBK0IsS0FBSztRQUM1QyxJQUFJLE1BQU0sR0FBVyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzlDLHVDQUNLLE1BQU0sS0FDVCxLQUFLLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FDMUIsSUFBSSxDQUFDLEtBQUssRUFDVixRQUFRLEVBQ1IsUUFBUSxFQUNSLGVBQWUsRUFDZixDQUFDLENBQ0YsRUFDRCxLQUFLLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FDMUIsSUFBSSxDQUFDLEtBQUssRUFDVixRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxJQUFJLENBQUMsS0FBSyxDQUNYLElBQ0Y7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFFBQVEsRUFDUixlQUFlLEVBQ2YsUUFBUSxFQUNSLENBQUMsQ0FDRixDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsUUFBUSxFQUNSLEtBQUssRUFDTCxRQUFRLEVBQ1IsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFBO0lBQ0gsQ0FBQztJQVlEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsTUFBYztRQUN2QixJQUFJO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDOUM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLDBCQUEwQjtZQUMxQixNQUFNLElBQUksR0FBVyw4QkFBOEIsQ0FBQyxFQUFFLENBQUE7WUFDdEQsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsSUFBWSxFQUFFLFNBQWlCLENBQUM7UUFDekMsSUFBSTtZQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDckMsMEJBQTBCO2dCQUMxQixNQUFNLElBQUksd0JBQWUsQ0FDdkIsa0VBQWtFLENBQ25FLENBQUE7YUFDRjtZQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDbEU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLDBCQUEwQjtZQUMxQixNQUFNLElBQUksR0FBVyw4QkFBOEIsQ0FBQyxFQUFFLENBQUE7WUFDdEQsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7UUFDRCxPQUFPLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0NBSUY7QUE3R0Qsd0JBNkdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLU5CeXRlc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IHtcbiAgU2VyaWFsaXphYmxlLFxuICBTZXJpYWxpemF0aW9uLFxuICBTZXJpYWxpemVkRW5jb2Rpbmdcbn0gZnJvbSBcIi4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIlxuaW1wb3J0IHsgQnVmZmVyU2l6ZUVycm9yIH0gZnJvbSBcIi4uL3V0aWxzL2Vycm9yc1wiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIGJhc2ljIGZ1bmN0aW9uYWxpdHkgZm9yIG1hbmFnaW5nIGFcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9mIGFuIGV4YWN0IGxlbmd0aC5cbiAqXG4gKiBDcmVhdGUgYSBjbGFzcyB0aGF0IGV4dGVuZHMgdGhpcyBvbmUgYW5kIG92ZXJyaWRlIGJzaXplIHRvIG1ha2UgaXQgdmFsaWRhdGUgZm9yIGV4YWN0bHlcbiAqIHRoZSBjb3JyZWN0IGxlbmd0aC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5CeXRlcyBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIk5CeXRlc1wiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIGJzaXplOiBzZXJpYWxpemF0aW9uLmVuY29kZXIoXG4gICAgICAgIHRoaXMuYnNpemUsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgICAgNFxuICAgICAgKSxcbiAgICAgIGJ5dGVzOiBzZXJpYWxpemF0aW9uLmVuY29kZXIoXG4gICAgICAgIHRoaXMuYnl0ZXMsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIkJ1ZmZlclwiLFxuICAgICAgICBcImhleFwiLFxuICAgICAgICB0aGlzLmJzaXplXG4gICAgICApXG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gICAgdGhpcy5ic2l6ZSA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcImJzaXplXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgIFwibnVtYmVyXCIsXG4gICAgICA0XG4gICAgKVxuICAgIHRoaXMuYnl0ZXMgPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoXG4gICAgICBmaWVsZHNbXCJieXRlc1wiXSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgXCJoZXhcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICB0aGlzLmJzaXplXG4gICAgKVxuICB9XG5cbiAgcHJvdGVjdGVkIGJ5dGVzOiBCdWZmZXJcbiAgcHJvdGVjdGVkIGJzaXplOiBudW1iZXJcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfS5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGV4YWN0IGxlbmd0aCByZXF1aXJlbWVudCBvZiB0aGlzIGNsYXNzXG4gICAqL1xuICBnZXRTaXplID0gKCkgPT4gdGhpcy5ic2l6ZVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIGJhc2UtNTggZW5jb2RlZCBzdHJpbmcsIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgZnJvbVN0cmluZyhiNThzdHI6IHN0cmluZyk6IG51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZnJvbUJ1ZmZlcihiaW50b29scy5iNThUb0J1ZmZlcihiNThzdHIpKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBlbXNnOiBzdHJpbmcgPSBgRXJyb3IgLSBOQnl0ZXMuZnJvbVN0cmluZzogJHtlfWBcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZW1zZylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYnNpemVcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIFtbQnVmZmVyXV0sIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihidWZmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChidWZmLmxlbmd0aCAtIG9mZnNldCA8IHRoaXMuYnNpemUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdGhyb3cgbmV3IEJ1ZmZlclNpemVFcnJvcihcbiAgICAgICAgICBcIkVycm9yIC0gTkJ5dGVzLmZyb21CdWZmZXI6IG5vdCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlIGluIGJ1ZmZlci5cIlxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnl0ZXMgPSBiaW50b29scy5jb3B5RnJvbShidWZmLCBvZmZzZXQsIG9mZnNldCArIHRoaXMuYnNpemUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGNvbnN0IGVtc2c6IHN0cmluZyA9IGBFcnJvciAtIE5CeXRlcy5mcm9tQnVmZmVyOiAke2V9YFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHRocm93IG5ldyBFcnJvcihlbXNnKVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0ICsgdGhpcy5ic2l6ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIEEgcmVmZXJlbmNlIHRvIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnl0ZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBBIGJhc2UtNTggc3RyaW5nIG9mIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSlcbiAgfVxuXG4gIGFic3RyYWN0IGNsb25lKCk6IHRoaXNcbiAgYWJzdHJhY3QgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpc1xufVxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmRleC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECP256k1KeyChain = exports.SECP256k1KeyPair = void 0;\n/**\n * @packageDocumentation\n * @module Common-SECP256k1KeyChain\n */\nconst buffer_1 = require(\"buffer/\");\nconst elliptic = __importStar(require(\"elliptic\"));\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst EC = elliptic.ec;\n/**\n * @ignore\n */\nconst ec = new EC(\"secp256k1\");\n/**\n * @ignore\n */\nconst ecparams = ec.curve;\n/**\n * @ignore\n */\nconst BN = ecparams.n.constructor;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass SECP256k1KeyPair extends keychain_1.StandardKeyPair {\n    /**\n     * Class for representing a private and public keypair in Avalanche PlatformVM.\n     */\n    constructor() {\n        super();\n        /**\n         * @ignore\n         */\n        this._sigFromSigBuffer = (sig) => {\n            const r = new BN(bintools.copyFrom(sig, 0, 32));\n            const s = new BN(bintools.copyFrom(sig, 32, 64));\n            const recoveryParam = bintools\n                .copyFrom(sig, 64, 65)\n                .readUIntBE(0, 1);\n            const sigOpt = {\n                r: r,\n                s: s,\n                recoveryParam: recoveryParam\n            };\n            return sigOpt;\n        };\n        /**\n         * Generates a new keypair.\n         */\n        this.generateKey = () => {\n            this.keypair = ec.genKeyPair();\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate(\"hex\").padStart(64, \"0\"), \"hex\");\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, \"hex\").padStart(66, \"0\"), \"hex\");\n        };\n        /**\n         * Imports a private key and generates the appropriate public key.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key\n         *\n         * @returns true on success, false on failure\n         */\n        this.importKey = (privk) => {\n            this.keypair = ec.keyFromPrivate(privk.toString(\"hex\"), \"hex\");\n            // doing hex translation to get Buffer class\n            try {\n                this.privk = buffer_1.Buffer.from(this.keypair.getPrivate(\"hex\").padStart(64, \"0\"), \"hex\");\n                this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, \"hex\").padStart(66, \"0\"), \"hex\");\n                return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...\n            }\n            catch (error) {\n                return false;\n            }\n        };\n        /**\n         * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address\n         */\n        this.getAddress = () => {\n            return this.addressFromPublicKey(this.pubk);\n        };\n        /**\n         * Returns an address given a public key.\n         *\n         * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.\n         */\n        this.addressFromPublicKey = (pubk) => {\n            if (pubk.length === 65) {\n                /* istanbul ignore next */\n                pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, \"hex\").padStart(66, \"0\"), \"hex\"); // make compact, stick back into buffer\n            }\n            if (pubk.length === 33) {\n                const sha256 = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(pubk).digest());\n                const ripesha = buffer_1.Buffer.from((0, create_hash_1.default)(\"ripemd160\").update(sha256).digest());\n                return ripesha;\n            }\n            /* istanbul ignore next */\n            throw new errors_1.PublicKeyError(\"Unable to make address.\");\n        };\n        /**\n         * Returns a string representation of the private key.\n         *\n         * @returns A cb58 serialized string representation of the private key\n         */\n        this.getPrivateKeyString = () => {\n            return `PrivateKey-${bintools.cb58Encode(this.privk)}`;\n        };\n        /**\n         * Returns the public key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPublicKeyString = () => {\n            return bintools.cb58Encode(this.pubk);\n        };\n        /**\n         * Takes a message, signs it, and returns the signature.\n         *\n         * @param msg The message to sign, be sure to hash first if expected\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature\n         */\n        this.sign = (msg) => {\n            const sigObj = this.keypair.sign(msg, undefined, {\n                canonical: true\n            });\n            const recovery = buffer_1.Buffer.alloc(1);\n            recovery.writeUInt8(sigObj.recoveryParam, 0);\n            const r = buffer_1.Buffer.from(sigObj.r.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const s = buffer_1.Buffer.from(sigObj.s.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const result = buffer_1.Buffer.concat([r, s, recovery], 65);\n            return result;\n        };\n        /**\n         * Verifies that the private key associated with the provided public key produces the signature associated with the given message.\n         *\n         * @param msg The message associated with the signature\n         * @param sig The signature of the signed message\n         *\n         * @returns True on success, false on failure\n         */\n        this.verify = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            return ec.verify(msg, sigObj, this.keypair);\n        };\n        /**\n         * Recovers the public key of a message signer from a message and its associated signature.\n         *\n         * @param msg The message that's signed\n         * @param sig The signature that's signed on the message\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer\n         */\n        this.recover = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);\n            return buffer_1.Buffer.from(pubk.encodeCompressed());\n        };\n    }\n}\nexports.SECP256k1KeyPair = SECP256k1KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam SECP256k1KeyPair Class extending [[StandardKeyPair]] which is used as the key in [[SECP256k1KeyChain]]\n */\nclass SECP256k1KeyChain extends keychain_1.StandardKeyChain {\n    addKey(newKey) {\n        super.addKey(newKey);\n    }\n}\nexports.SECP256k1KeyChain = SECP256k1KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @packageDocumentation\n * @module AvalancheCore\n */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst apibase_1 = require(\"./common/apibase\");\nconst errors_1 = require(\"./utils/errors\");\nconst helperfunctions_1 = require(\"./utils/helperfunctions\");\n/**\n * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.\n *\n * Example usage:\n * ```js\n * let avalanche = new AvalancheCore(\"127.0.0.1\", 9650, \"https\")\n * ```\n *\n */\nclass AvalancheCore {\n    /**\n     * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.\n     *\n     * @param host The hostname to resolve to reach the Avalanche Client APIs\n     * @param port The port to resolve to reach the Avalanche Client APIs\n     * @param protocol The protocol string to use before a \"://\" in a request, ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n     */\n    constructor(host, port, protocol = \"http\") {\n        this.networkID = 0;\n        this.hrp = \"\";\n        this.auth = undefined;\n        this.headers = {};\n        this.requestConfig = {};\n        this.apis = {};\n        /**\n         * Sets the address and port of the main Avalanche Client.\n         *\n         * @param host The hostname to resolve to reach the Avalanche Client RPC APIs.\n         * @param port The port to resolve to reach the Avalanche Client RPC APIs.\n         * @param protocol The protocol string to use before a \"://\" in a request,\n         * ex: \"http\", \"https\", etc. Defaults to http\n         * The following special characters are removed from host and protocol\n         * &#,@+()$~%'\":*?<>{}\n         */\n        this.setAddress = (host, port, protocol = \"http\") => {\n            host = host.replace(/[&#,@+()$~%'\":*?<>{}]/g, \"\");\n            protocol = protocol.replace(/[&#,@+()$~%'\":*?<>{}]/g, \"\");\n            const protocols = [\"http\", \"https\"];\n            if (!protocols.includes(protocol)) {\n                /* istanbul ignore next */\n                throw new errors_1.ProtocolError(\"Error - AvalancheCore.setAddress: Invalid protocol\");\n            }\n            this.host = host;\n            this.port = port;\n            this.protocol = protocol;\n            let url = `${protocol}://${host}`;\n            if (port != undefined && typeof port === \"number\" && port >= 0) {\n                url = `${url}:${port}`;\n            }\n            this.url = url;\n        };\n        /**\n         * Returns the protocol such as \"http\", \"https\", \"git\", \"ws\", etc.\n         */\n        this.getProtocol = () => this.protocol;\n        /**\n         * Returns the host for the Avalanche node.\n         */\n        this.getHost = () => this.host;\n        /**\n         * Returns the IP for the Avalanche node.\n         */\n        this.getIP = () => this.host;\n        /**\n         * Returns the port for the Avalanche node.\n         */\n        this.getPort = () => this.port;\n        /**\n         * Returns the URL of the Avalanche node (ip + port)\n         */\n        this.getURL = () => this.url;\n        /**\n         * Returns the custom headers\n         */\n        this.getHeaders = () => this.headers;\n        /**\n         * Returns the custom request config\n         */\n        this.getRequestConfig = () => this.requestConfig;\n        /**\n         * Returns the networkID\n         */\n        this.getNetworkID = () => this.networkID;\n        /**\n         * Sets the networkID\n         */\n        this.setNetworkID = (netID) => {\n            this.networkID = netID;\n            this.hrp = (0, helperfunctions_1.getPreferredHRP)(this.networkID);\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        /**\n         * Adds a new custom header to be included with all requests.\n         *\n         * @param key Header name\n         * @param value Header value\n         */\n        this.setHeader = (key, value) => {\n            this.headers[`${key}`] = value;\n        };\n        /**\n         * Removes a previously added custom header.\n         *\n         * @param key Header name\n         */\n        this.removeHeader = (key) => {\n            delete this.headers[`${key}`];\n        };\n        /**\n         * Removes all headers.\n         */\n        this.removeAllHeaders = () => {\n            for (const prop in this.headers) {\n                if (Object.prototype.hasOwnProperty.call(this.headers, prop)) {\n                    delete this.headers[`${prop}`];\n                }\n            }\n        };\n        /**\n         * Adds a new custom config value to be included with all requests.\n         *\n         * @param key Config name\n         * @param value Config value\n         */\n        this.setRequestConfig = (key, value) => {\n            this.requestConfig[`${key}`] = value;\n        };\n        /**\n         * Removes a previously added request config.\n         *\n         * @param key Header name\n         */\n        this.removeRequestConfig = (key) => {\n            delete this.requestConfig[`${key}`];\n        };\n        /**\n         * Removes all request configs.\n         */\n        this.removeAllRequestConfigs = () => {\n            for (const prop in this.requestConfig) {\n                if (Object.prototype.hasOwnProperty.call(this.requestConfig, prop)) {\n                    delete this.requestConfig[`${prop}`];\n                }\n            }\n        };\n        /**\n         * Sets the temporary auth token used for communicating with the node.\n         *\n         * @param auth A temporary token provided by the node enabling access to the endpoints on the node.\n         */\n        this.setAuthToken = (auth) => {\n            this.auth = auth;\n        };\n        this._setHeaders = (headers) => {\n            if (typeof this.headers === \"object\") {\n                for (const [key, value] of Object.entries(this.headers)) {\n                    headers[`${key}`] = value;\n                }\n            }\n            if (typeof this.auth === \"string\") {\n                headers.Authorization = `Bearer ${this.auth}`;\n            }\n            return headers;\n        };\n        /**\n         * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.\n         *\n         * In TypeScript:\n         * ```js\n         * avalanche.addAPI<MyVMClass>(\"mychain\", MyVMClass, \"/ext/bc/mychain\")\n         * ```\n         *\n         * In Javascript:\n         * ```js\n         * avalanche.addAPI(\"mychain\", MyVMClass, \"/ext/bc/mychain\")\n         * ```\n         *\n         * @typeparam GA Class of the API being added\n         * @param apiName A label for referencing the API in the future\n         * @param ConstructorFN A reference to the class which instantiates the API\n         * @param baseurl Path to resolve to reach the API\n         *\n         */\n        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {\n            if (typeof baseurl === \"undefined\") {\n                this.apis[`${apiName}`] = new ConstructorFN(this, undefined, ...args);\n            }\n            else {\n                this.apis[`${apiName}`] = new ConstructorFN(this, baseurl, ...args);\n            }\n        };\n        /**\n         * Retrieves a reference to an API by its apiName label.\n         *\n         * @param apiName Name of the API to return\n         */\n        this.api = (apiName) => this.apis[`${apiName}`];\n        /**\n         * @ignore\n         */\n        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let config;\n            if (axiosConfig) {\n                config = Object.assign(Object.assign({}, axiosConfig), this.requestConfig);\n            }\n            else {\n                config = Object.assign({ baseURL: `${this.protocol}://${this.host}:${this.port}`, responseType: \"text\" }, this.requestConfig);\n            }\n            config.url = baseurl;\n            config.method = xhrmethod;\n            config.headers = headers;\n            config.data = postdata;\n            config.params = getdata;\n            const resp = yield axios_1.default.request(config);\n            // purging all that is axios\n            const xhrdata = new apibase_1.RequestResponseData(resp.data, resp.headers, resp.status, resp.statusText, resp.request);\n            return xhrdata;\n        });\n        /**\n         * Makes a GET call to an API.\n         *\n         * @param baseurl Path to the api\n         * @param getdata Object containing the key value pairs sent in GET\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request(\"GET\", baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a DELETE call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in DELETE\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request(\"DELETE\", baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a POST call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in POST\n         * @param postdata Object containing the key value pairs sent in POST\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"POST\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PUT call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PUT\n         * @param postdata Object containing the key value pairs sent in PUT\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"PUT\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PATCH call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PATCH\n         * @param postdata Object containing the key value pairs sent in PATCH\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"PATCH\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        this.setAddress(host, port, protocol);\n    }\n}\nexports.default = AvalancheCore;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HealthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's HealthApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass HealthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/health\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/health\") {\n        super(core, baseURL);\n        /**\n         *\n         * @returns Promise for a [[HealthResponse]]\n         */\n        this.health = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"health.health\");\n            return response.data.result;\n        });\n    }\n}\nexports.HealthAPI = HealthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaGVhbHRoL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFLQSxrREFBOEM7QUFJOUM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFVLFNBQVEsaUJBQU87SUFVcEM7Ozs7O09BS0c7SUFDSCxZQUFZLElBQW1CLEVBQUUsVUFBa0IsYUFBYTtRQUM5RCxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBaEJ0Qjs7O1dBR0c7UUFDSCxXQUFNLEdBQUcsR0FBa0MsRUFBRTtZQUMzQyxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzVFLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDN0IsQ0FBQyxDQUFBLENBQUE7SUFVRCxDQUFDO0NBQ0Y7QUFuQkQsOEJBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUhlYWx0aFxuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2pycGNhcGlcIlxuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBpYmFzZVwiXG5pbXBvcnQgeyBIZWFsdGhSZXNwb25zZSB9IGZyb20gXCIuL2ludGVyZmFjZXNcIlxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEhlYWx0aEFwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBIZWFsdGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgW1tIZWFsdGhSZXNwb25zZV1dXG4gICAqL1xuICBoZWFsdGggPSBhc3luYyAoKTogUHJvbWlzZTxIZWFsdGhSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiaGVhbHRoLmhlYWx0aFwiKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICogQHBhcmFtIGJhc2VVUkwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvaGVhbHRoXCIgYXMgdGhlIHBhdGggdG8gcnBjJ3MgYmFzZVVSTFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQXZhbGFuY2hlQ29yZSwgYmFzZVVSTDogc3RyaW5nID0gXCIvZXh0L2hlYWx0aFwiKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZVVSTClcbiAgfVxufVxuIl19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSubnetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-CreateSubnetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst outputs_1 = require(\"./outputs\");\nconst errors_1 = require(\"../../utils/errors\");\nclass CreateSubnetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Subnet transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param subnetOwners Optional [[SECPOwnerOutput]] class for specifying who owns the subnet.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, subnetOwners = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        this.subnetOwners = undefined;\n        /**\n         * Returns the id of the [[CreateSubnetTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        this.subnetOwners = subnetOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { subnetOwners: this.subnetOwners.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        this.subnetOwners.deserialize(fields[\"subnetOwners\"], encoding);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getSubnetOwners() {\n        return this.subnetOwners;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateSubnetTx]], parses it, populates the class, and returns the length of the [[CreateSubnetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateSubnetTx]]\n     * @param offset A number for the starting position in the bytes.\n     *\n     * @returns The length of the raw [[CreateSubnetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        offset = this.subnetOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateSubnetTx]].\n     */\n    toBuffer() {\n        if (typeof this.subnetOwners === \"undefined\" ||\n            !(this.subnetOwners instanceof outputs_1.SECPOwnerOutput)) {\n            throw new errors_1.SubnetOwnerError(\"CreateSubnetTx.toBuffer -- this.subnetOwners is not a SECPOwnerOutput\");\n        }\n        let typeID = buffer_1.Buffer.alloc(4);\n        typeID.writeUInt32BE(this.subnetOwners.getOutputID(), 0);\n        let barr = [\n            super.toBuffer(),\n            typeID,\n            this.subnetOwners.toBuffer()\n        ];\n        return buffer_1.Buffer.concat(barr);\n    }\n}\nexports.CreateSubnetTx = CreateSubnetTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlc3VibmV0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWF0ZXN1Ym5ldHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILG9DQUFnQztBQUNoQyxxQ0FBaUM7QUFDakMsMkNBQWlEO0FBQ2pELHFEQUF3RDtBQUN4RCx1Q0FBK0Q7QUFHL0QsK0NBQXFEO0FBRXJELE1BQWEsY0FBZSxTQUFRLGVBQU07SUF3RXhDOzs7Ozs7Ozs7T0FTRztJQUNILFlBQ0UsWUFBb0IsNEJBQWdCLEVBQ3BDLGVBQXVCLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUMzQyxPQUE2QixTQUFTLEVBQ3RDLE1BQTJCLFNBQVMsRUFDcEMsT0FBZSxTQUFTLEVBQ3hCLGVBQWdDLFNBQVM7UUFFekMsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQXpGdkMsY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLFlBQU8sR0FBRywrQkFBbUIsQ0FBQyxjQUFjLENBQUE7UUFlNUMsaUJBQVksR0FBb0IsU0FBUyxDQUFBO1FBRW5EOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQVcsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDckIsQ0FBQyxDQUFBO1FBbUVDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFBO0lBQ2xDLENBQUM7SUF4RkQsU0FBUyxDQUFDLFdBQStCLEtBQUs7UUFDNUMsSUFBSSxNQUFNLEdBQVcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5Qyx1Q0FDSyxNQUFNLEtBQ1QsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUNwRDtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHlCQUFlLEVBQUUsQ0FBQTtRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDakUsQ0FBQztJQVdEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFpQixDQUFDO1FBQzFDLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkseUJBQWUsRUFBRSxDQUFBO1FBQ3pDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDcEQsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssV0FBVztZQUN4QyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksWUFBWSx5QkFBZSxDQUFDLEVBQy9DO1lBQ0EsTUFBTSxJQUFJLHlCQUFnQixDQUN4Qix1RUFBdUUsQ0FDeEUsQ0FBQTtTQUNGO1FBQ0QsSUFBSSxNQUFNLEdBQVcsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNwQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDeEQsSUFBSSxJQUFJLEdBQWE7WUFDbkIsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNoQixNQUFNO1lBQ04sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7U0FDN0IsQ0FBQTtRQUNELE9BQU8sZUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1QixDQUFDO0NBdUJGO0FBN0ZELHdDQTZGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLUNyZWF0ZVN1Ym5ldFR4XG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCB7IEJhc2VUeCB9IGZyb20gXCIuL2Jhc2V0eFwiXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCJcbmltcG9ydCB7IERlZmF1bHROZXR3b3JrSUQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29uc3RhbnRzXCJcbmltcG9ydCB7IFRyYW5zZmVyYWJsZU91dHB1dCwgU0VDUE93bmVyT3V0cHV0IH0gZnJvbSBcIi4vb3V0cHV0c1wiXG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVJbnB1dCB9IGZyb20gXCIuL2lucHV0c1wiXG5pbXBvcnQgeyBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG5pbXBvcnQgeyBTdWJuZXRPd25lckVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Vycm9yc1wiXG5cbmV4cG9ydCBjbGFzcyBDcmVhdGVTdWJuZXRUeCBleHRlbmRzIEJhc2VUeCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlNFQ1BDcmVkZW50aWFsXCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSBQbGF0Zm9ybVZNQ29uc3RhbnRzLkNSRUFURVNVQk5FVFRYXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIHN1Ym5ldE93bmVyczogdGhpcy5zdWJuZXRPd25lcnMuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuc3VibmV0T3duZXJzID0gbmV3IFNFQ1BPd25lck91dHB1dCgpXG4gICAgdGhpcy5zdWJuZXRPd25lcnMuZGVzZXJpYWxpemUoZmllbGRzW1wic3VibmV0T3duZXJzXCJdLCBlbmNvZGluZylcbiAgfVxuXG4gIHByb3RlY3RlZCBzdWJuZXRPd25lcnM6IFNFQ1BPd25lck91dHB1dCA9IHVuZGVmaW5lZFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpZCBvZiB0aGUgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAqL1xuICBnZXRUeFR5cGUgPSAoKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgcmV3YXJkIGFkZHJlc3MuXG4gICAqL1xuICBnZXRTdWJuZXRPd25lcnMoKTogU0VDUE93bmVyT3V0cHV0IHtcbiAgICByZXR1cm4gdGhpcy5zdWJuZXRPd25lcnNcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYW4gW1tDcmVhdGVTdWJuZXRUeF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFtbQ3JlYXRlU3VibmV0VHhdXSBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIHJhdyBbW0NyZWF0ZVN1Ym5ldFR4XV1cbiAgICogQHBhcmFtIG9mZnNldCBBIG51bWJlciBmb3IgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGluIHRoZSBieXRlcy5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbQ3JlYXRlU3VibmV0VHhdXVxuICAgKlxuICAgKiBAcmVtYXJrcyBhc3N1bWUgbm90LWNoZWNrc3VtbWVkXG4gICAqL1xuICBmcm9tQnVmZmVyKGJ5dGVzOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgb2Zmc2V0ID0gc3VwZXIuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICAgIHRoaXMuc3VibmV0T3duZXJzID0gbmV3IFNFQ1BPd25lck91dHB1dCgpXG4gICAgb2Zmc2V0ID0gdGhpcy5zdWJuZXRPd25lcnMuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbQ3JlYXRlU3VibmV0VHhdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHRoaXMuc3VibmV0T3duZXJzID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICAhKHRoaXMuc3VibmV0T3duZXJzIGluc3RhbmNlb2YgU0VDUE93bmVyT3V0cHV0KVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IFN1Ym5ldE93bmVyRXJyb3IoXG4gICAgICAgIFwiQ3JlYXRlU3VibmV0VHgudG9CdWZmZXIgLS0gdGhpcy5zdWJuZXRPd25lcnMgaXMgbm90IGEgU0VDUE93bmVyT3V0cHV0XCJcbiAgICAgIClcbiAgICB9XG4gICAgbGV0IHR5cGVJRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgdHlwZUlELndyaXRlVUludDMyQkUodGhpcy5zdWJuZXRPd25lcnMuZ2V0T3V0cHV0SUQoKSwgMClcbiAgICBsZXQgYmFycjogQnVmZmVyW10gPSBbXG4gICAgICBzdXBlci50b0J1ZmZlcigpLFxuICAgICAgdHlwZUlELFxuICAgICAgdGhpcy5zdWJuZXRPd25lcnMudG9CdWZmZXIoKVxuICAgIF1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyKVxuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBDcmVhdGUgU3VibmV0IHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0lEIE9wdGlvbmFsIG5ldHdvcmtJRCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgICogQHBhcmFtIGJsb2NrY2hhaW5JRCBPcHRpb25hbCBibG9ja2NoYWluSUQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICogQHBhcmFtIG91dHMgT3B0aW9uYWwgYXJyYXkgb2YgdGhlIFtbVHJhbnNmZXJhYmxlT3V0cHV0XV1zXG4gICAqIEBwYXJhbSBpbnMgT3B0aW9uYWwgYXJyYXkgb2YgdGhlIFtbVHJhbnNmZXJhYmxlSW5wdXRdXXNcbiAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gZm9yIHRoZSBtZW1vIGZpZWxkXG4gICAqIEBwYXJhbSBzdWJuZXRPd25lcnMgT3B0aW9uYWwgW1tTRUNQT3duZXJPdXRwdXRdXSBjbGFzcyBmb3Igc3BlY2lmeWluZyB3aG8gb3ducyB0aGUgc3VibmV0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmV0d29ya0lEOiBudW1iZXIgPSBEZWZhdWx0TmV0d29ya0lELFxuICAgIGJsb2NrY2hhaW5JRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyLCAxNiksXG4gICAgb3V0czogVHJhbnNmZXJhYmxlT3V0cHV0W10gPSB1bmRlZmluZWQsXG4gICAgaW5zOiBUcmFuc2ZlcmFibGVJbnB1dFtdID0gdW5kZWZpbmVkLFxuICAgIG1lbW86IEJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBzdWJuZXRPd25lcnM6IFNFQ1BPd25lck91dHB1dCA9IHVuZGVmaW5lZFxuICApIHtcbiAgICBzdXBlcihuZXR3b3JrSUQsIGJsb2NrY2hhaW5JRCwgb3V0cywgaW5zLCBtZW1vKVxuICAgIHRoaXMuc3VibmV0T3duZXJzID0gc3VibmV0T3duZXJzXG4gIH1cbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-APIBase\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIBase = exports.RequestResponseData = void 0;\nconst db_1 = __importDefault(require(\"../utils/db\"));\n/**\n * Response data for HTTP requests.\n */\nclass RequestResponseData {\n    constructor(data, headers, status, statusText, request) {\n        this.data = data;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n        this.request = request;\n    }\n}\nexports.RequestResponseData = RequestResponseData;\n/**\n * Abstract class defining a generic endpoint that all endpoints must implement (extend).\n */\nclass APIBase {\n    /**\n     *\n     * @param core Reference to the Avalanche instance using this baseURL\n     * @param baseURL Path to the baseURL\n     */\n    constructor(core, baseURL) {\n        /**\n         * Sets the path of the APIs baseURL.\n         *\n         * @param baseURL Path of the APIs baseURL - ex: \"/ext/bc/X\"\n         */\n        this.setBaseURL = (baseURL) => {\n            if (this.db && this.baseURL !== baseURL) {\n                const backup = this.db.getAll();\n                this.db.clearAll();\n                this.baseURL = baseURL;\n                this.db = db_1.default.getNamespace(baseURL);\n                this.db.setAll(backup, true);\n            }\n            else {\n                this.baseURL = baseURL;\n                this.db = db_1.default.getNamespace(baseURL);\n            }\n        };\n        /**\n         * Returns the baseURL's path.\n         */\n        this.getBaseURL = () => this.baseURL;\n        /**\n         * Returns the baseURL's database.\n         */\n        this.getDB = () => this.db;\n        this.core = core;\n        this.setBaseURL(baseURL);\n    }\n}\nexports.APIBase = APIBase;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYXBpYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFJSCxxREFBNEI7QUFHNUI7O0dBRUc7QUFDSCxNQUFhLG1CQUFtQjtJQUM5QixZQUNTLElBQVMsRUFDVCxPQUFZLEVBQ1osTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLE9BQXVDO1FBSnZDLFNBQUksR0FBSixJQUFJLENBQUs7UUFDVCxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBQ1osV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0M7SUFDN0MsQ0FBQztDQUNMO0FBUkQsa0RBUUM7QUFFRDs7R0FFRztBQUNILE1BQXNCLE9BQU87SUFpQzNCOzs7O09BSUc7SUFDSCxZQUFZLElBQW1CLEVBQUUsT0FBZTtRQWpDaEQ7Ozs7V0FJRztRQUNILGVBQVUsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO1lBQy9CLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtnQkFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtnQkFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtnQkFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7Z0JBQ3RCLElBQUksQ0FBQyxFQUFFLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO2FBQzdCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO2dCQUN0QixJQUFJLENBQUMsRUFBRSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUE7YUFDbkM7UUFDSCxDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBRXZDOztXQUVHO1FBQ0gsVUFBSyxHQUFHLEdBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7UUFRN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMxQixDQUFDO0NBQ0Y7QUExQ0QsMEJBMENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUFQSUJhc2VcbiAqL1xuXG5pbXBvcnQgeyBTdG9yZUFQSSB9IGZyb20gXCJzdG9yZTJcIlxuaW1wb3J0IHsgQ2xpZW50UmVxdWVzdCB9IGZyb20gXCJodHRwXCJcbmltcG9ydCBEQiBmcm9tIFwiLi4vdXRpbHMvZGJcIlxuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSBcIi4uL2F2YWxhbmNoZVwiXG5cbi8qKlxuICogUmVzcG9uc2UgZGF0YSBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZXNwb25zZURhdGEge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZGF0YTogYW55LFxuICAgIHB1YmxpYyBoZWFkZXJzOiBhbnksXG4gICAgcHVibGljIHN0YXR1czogbnVtYmVyLFxuICAgIHB1YmxpYyBzdGF0dXNUZXh0OiBzdHJpbmcsXG4gICAgcHVibGljIHJlcXVlc3Q6IENsaWVudFJlcXVlc3QgfCBYTUxIdHRwUmVxdWVzdFxuICApIHt9XG59XG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgZGVmaW5pbmcgYSBnZW5lcmljIGVuZHBvaW50IHRoYXQgYWxsIGVuZHBvaW50cyBtdXN0IGltcGxlbWVudCAoZXh0ZW5kKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFQSUJhc2Uge1xuICBwcm90ZWN0ZWQgY29yZTogQXZhbGFuY2hlQ29yZVxuICBwcm90ZWN0ZWQgYmFzZVVSTDogc3RyaW5nXG4gIHByb3RlY3RlZCBkYjogU3RvcmVBUElcblxuICAvKipcbiAgICogU2V0cyB0aGUgcGF0aCBvZiB0aGUgQVBJcyBiYXNlVVJMLlxuICAgKlxuICAgKiBAcGFyYW0gYmFzZVVSTCBQYXRoIG9mIHRoZSBBUElzIGJhc2VVUkwgLSBleDogXCIvZXh0L2JjL1hcIlxuICAgKi9cbiAgc2V0QmFzZVVSTCA9IChiYXNlVVJMOiBzdHJpbmcpID0+IHtcbiAgICBpZiAodGhpcy5kYiAmJiB0aGlzLmJhc2VVUkwgIT09IGJhc2VVUkwpIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IHRoaXMuZGIuZ2V0QWxsKClcbiAgICAgIHRoaXMuZGIuY2xlYXJBbGwoKVxuICAgICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTFxuICAgICAgdGhpcy5kYiA9IERCLmdldE5hbWVzcGFjZShiYXNlVVJMKVxuICAgICAgdGhpcy5kYi5zZXRBbGwoYmFja3VwLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMXG4gICAgICB0aGlzLmRiID0gREIuZ2V0TmFtZXNwYWNlKGJhc2VVUkwpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2VVUkwncyBwYXRoLlxuICAgKi9cbiAgZ2V0QmFzZVVSTCA9ICgpOiBzdHJpbmcgPT4gdGhpcy5iYXNlVVJMXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2VVUkwncyBkYXRhYmFzZS5cbiAgICovXG4gIGdldERCID0gKCk6IFN0b3JlQVBJID0+IHRoaXMuZGJcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGNvcmUgUmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgaW5zdGFuY2UgdXNpbmcgdGhpcyBiYXNlVVJMXG4gICAqIEBwYXJhbSBiYXNlVVJMIFBhdGggdG8gdGhlIGJhc2VVUkxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2VVUkw6IHN0cmluZykge1xuICAgIHRoaXMuY29yZSA9IGNvcmVcbiAgICB0aGlzLnNldEJhc2VVUkwoYmFzZVVSTClcbiAgfVxufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-KeyChain\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardKeyChain = exports.StandardKeyPair = void 0;\nconst buffer_1 = require(\"buffer/\");\n/**\n * Class for representing a private and public keypair in Avalanche.\n * All APIs that need key pairs should extend on this class.\n */\nclass StandardKeyPair {\n    constructor() {\n        /**\n         * Returns a reference to the private key.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key\n         */\n        this.getPrivateKey = () => this.privk;\n        /**\n         * Returns a reference to the public key.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key\n         */\n        this.getPublicKey = () => this.pubk;\n    }\n}\nexports.StandardKeyPair = StandardKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n * All endpoints that need key chains should extend on this class.\n *\n * @typeparam KPClass extending [[StandardKeyPair]] which is used as the key in [[StandardKeyChain]]\n */\nclass StandardKeyChain {\n    constructor() {\n        this.keys = {};\n        /**\n         * Gets an array of addresses stored in the [[StandardKeyChain]].\n         *\n         * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations\n         * of the addresses\n         */\n        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());\n        /**\n         * Gets an array of addresses stored in the [[StandardKeyChain]].\n         *\n         * @returns An array of string representations of the addresses\n         */\n        this.getAddressStrings = () => Object.values(this.keys).map((kp) => kp.getAddressString());\n        /**\n         * Removes the key pair from the list of they keys managed in the [[StandardKeyChain]].\n         *\n         * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or\n         * KPClass to remove\n         *\n         * @returns The boolean true if a key was removed.\n         */\n        this.removeKey = (key) => {\n            let kaddr;\n            if (key instanceof buffer_1.Buffer) {\n                kaddr = key.toString(\"hex\");\n            }\n            else {\n                kaddr = key.getAddress().toString(\"hex\");\n            }\n            if (kaddr in this.keys) {\n                delete this.keys[`${kaddr}`];\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Checks if there is a key associated with the provided address.\n         *\n         * @param address The address to check for existence in the keys database\n         *\n         * @returns True on success, false if not found\n         */\n        this.hasKey = (address) => address.toString(\"hex\") in this.keys;\n        /**\n         * Returns the [[StandardKeyPair]] listed under the provided address\n         *\n         * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to\n         * retrieve from the keys database\n         *\n         * @returns A reference to the [[StandardKeyPair]] in the keys database\n         */\n        this.getKey = (address) => this.keys[address.toString(\"hex\")];\n    }\n    /**\n     * Adds the key pair to the list of the keys managed in the [[StandardKeyChain]].\n     *\n     * @param newKey A key pair of the appropriate class to be added to the [[StandardKeyChain]]\n     */\n    addKey(newKey) {\n        this.keys[newKey.getAddress().toString(\"hex\")] = newKey;\n    }\n}\nexports.StandardKeyChain = StandardKeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2tleWNoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILG9DQUFnQztBQUVoQzs7O0dBR0c7QUFDSCxNQUFzQixlQUFlO0lBQXJDO1FBb0RFOzs7O1dBSUc7UUFDSCxrQkFBYSxHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7UUFFeEM7Ozs7V0FJRztRQUNILGlCQUFZLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQTtJQWlDeEMsQ0FBQztDQUFBO0FBakdELDBDQWlHQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBc0IsZ0JBQWdCO0lBQXRDO1FBQ1ksU0FBSSxHQUFtQyxFQUFFLENBQUE7UUFrQm5EOzs7OztXQUtHO1FBQ0gsaUJBQVksR0FBRyxHQUFhLEVBQUUsQ0FDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtRQUV2RDs7OztXQUlHO1FBQ0gsc0JBQWlCLEdBQUcsR0FBYSxFQUFFLENBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQTtRQVc3RDs7Ozs7OztXQU9HO1FBQ0gsY0FBUyxHQUFHLENBQUMsR0FBcUIsRUFBRSxFQUFFO1lBQ3BDLElBQUksS0FBYSxDQUFBO1lBQ2pCLElBQUksR0FBRyxZQUFZLGVBQU0sRUFBRTtnQkFDekIsS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDNUI7aUJBQU07Z0JBQ0wsS0FBSyxHQUFHLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDekM7WUFDRCxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUN0QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFBO2dCQUM1QixPQUFPLElBQUksQ0FBQTthQUNaO1lBQ0QsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDLENBQUE7UUFFRDs7Ozs7O1dBTUc7UUFDSCxXQUFNLEdBQUcsQ0FBQyxPQUFlLEVBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQTtRQUUzRTs7Ozs7OztXQU9HO1FBQ0gsV0FBTSxHQUFHLENBQUMsT0FBZSxFQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQU8zRSxDQUFDO0lBdkRDOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsTUFBZTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUE7SUFDekQsQ0FBQztDQWdERjtBQTNGRCw0Q0EyRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tS2V5Q2hhaW5cbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIHByaXZhdGUgYW5kIHB1YmxpYyBrZXlwYWlyIGluIEF2YWxhbmNoZS5cbiAqIEFsbCBBUElzIHRoYXQgbmVlZCBrZXkgcGFpcnMgc2hvdWxkIGV4dGVuZCBvbiB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RhbmRhcmRLZXlQYWlyIHtcbiAgcHJvdGVjdGVkIHB1Yms6IEJ1ZmZlclxuICBwcm90ZWN0ZWQgcHJpdms6IEJ1ZmZlclxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBuZXcga2V5cGFpci5cbiAgICpcbiAgICogQHBhcmFtIGVudHJvcHkgT3B0aW9uYWwgcGFyYW1ldGVyIHRoYXQgbWF5IGJlIG5lY2Vzc2FyeSB0byBwcm9kdWNlIHNlY3VyZSBrZXlzXG4gICAqL1xuICBnZW5lcmF0ZUtleTogKGVudHJvcHk/OiBCdWZmZXIpID0+IHZvaWRcblxuICAvKipcbiAgICogSW1wb3J0cyBhIHByaXZhdGUga2V5IGFuZCBnZW5lcmF0ZXMgdGhlIGFwcHJvcHJpYXRlIHB1YmxpYyBrZXkuXG4gICAqXG4gICAqIEBwYXJhbSBwcml2ayBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgcHJpdmF0ZSBrZXlcbiAgICpcbiAgICogQHJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlXG4gICAqL1xuICBpbXBvcnRLZXk6IChwcml2azogQnVmZmVyKSA9PiBib29sZWFuXG5cbiAgLyoqXG4gICAqIFRha2VzIGEgbWVzc2FnZSwgc2lnbnMgaXQsIGFuZCByZXR1cm5zIHRoZSBzaWduYXR1cmUuXG4gICAqXG4gICAqIEBwYXJhbSBtc2cgVGhlIG1lc3NhZ2UgdG8gc2lnblxuICAgKlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZVxuICAgKi9cbiAgc2lnbjogKG1zZzogQnVmZmVyKSA9PiBCdWZmZXJcblxuICAvKipcbiAgICogUmVjb3ZlcnMgdGhlIHB1YmxpYyBrZXkgb2YgYSBtZXNzYWdlIHNpZ25lciBmcm9tIGEgbWVzc2FnZSBhbmQgaXRzIGFzc29jaWF0ZWQgc2lnbmF0dXJlLlxuICAgKlxuICAgKiBAcGFyYW0gbXNnIFRoZSBtZXNzYWdlIHRoYXQncyBzaWduZWRcbiAgICogQHBhcmFtIHNpZyBUaGUgc2lnbmF0dXJlIHRoYXQncyBzaWduZWQgb24gdGhlIG1lc3NhZ2VcbiAgICpcbiAgICogQHJldHVybnMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIHRoZSBwdWJsaWNcbiAgICoga2V5IG9mIHRoZSBzaWduZXJcbiAgICovXG4gIHJlY292ZXI6IChtc2c6IEJ1ZmZlciwgc2lnOiBCdWZmZXIpID0+IEJ1ZmZlclxuXG4gIC8qKlxuICAgKiBWZXJpZmllcyB0aGF0IHRoZSBwcml2YXRlIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIHB1YmxpYyBrZXkgcHJvZHVjZXMgdGhlXG4gICAqIHNpZ25hdHVyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSBtc2cgVGhlIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBzaWduYXR1cmVcbiAgICogQHBhcmFtIHNpZyBUaGUgc2lnbmF0dXJlIG9mIHRoZSBzaWduZWQgbWVzc2FnZVxuICAgKiBAcGFyYW0gcHViayBUaGUgcHVibGljIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2Ugc2lnbmF0dXJlXG4gICAqXG4gICAqIEByZXR1cm5zIFRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZVxuICAgKi9cbiAgdmVyaWZ5OiAobXNnOiBCdWZmZXIsIHNpZzogQnVmZmVyLCBwdWJrOiBCdWZmZXIpID0+IGJvb2xlYW5cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgcHJpdmF0ZSBrZXkuXG4gICAqXG4gICAqIEByZXR1cm5zIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyB0aGUgcHJpdmF0ZSBrZXlcbiAgICovXG4gIGdldFByaXZhdGVLZXkgPSAoKTogQnVmZmVyID0+IHRoaXMucHJpdmtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgcHVibGljIGtleS5cbiAgICpcbiAgICogQHJldHVybnMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIHRoZSBwdWJsaWMga2V5XG4gICAqL1xuICBnZXRQdWJsaWNLZXkgPSAoKTogQnVmZmVyID0+IHRoaXMucHVia1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwcml2YXRlIGtleS5cbiAgICpcbiAgICogQHJldHVybnMgQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHB1YmxpYyBrZXlcbiAgICovXG4gIGdldFByaXZhdGVLZXlTdHJpbmc6ICgpID0+IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwdWJsaWMga2V5LlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleVxuICAgKi9cbiAgZ2V0UHVibGljS2V5U3RyaW5nOiAoKSA9PiBzdHJpbmdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWRkcmVzcy5cbiAgICpcbiAgICogQHJldHVybnMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSAgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFkZHJlc3NcbiAgICovXG4gIGdldEFkZHJlc3M6ICgpID0+IEJ1ZmZlclxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzJ3Mgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYWRkcmVzc1xuICAgKi9cbiAgZ2V0QWRkcmVzc1N0cmluZzogKCkgPT4gc3RyaW5nXG5cbiAgYWJzdHJhY3QgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpc1xuXG4gIGFic3RyYWN0IGNsb25lKCk6IHRoaXNcbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEga2V5IGNoYWluIGluIEF2YWxhbmNoZS5cbiAqIEFsbCBlbmRwb2ludHMgdGhhdCBuZWVkIGtleSBjaGFpbnMgc2hvdWxkIGV4dGVuZCBvbiB0aGlzIGNsYXNzLlxuICpcbiAqIEB0eXBlcGFyYW0gS1BDbGFzcyBleHRlbmRpbmcgW1tTdGFuZGFyZEtleVBhaXJdXSB3aGljaCBpcyB1c2VkIGFzIHRoZSBrZXkgaW4gW1tTdGFuZGFyZEtleUNoYWluXV1cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkS2V5Q2hhaW48S1BDbGFzcyBleHRlbmRzIFN0YW5kYXJkS2V5UGFpcj4ge1xuICBwcm90ZWN0ZWQga2V5czogeyBbYWRkcmVzczogc3RyaW5nXTogS1BDbGFzcyB9ID0ge31cblxuICAvKipcbiAgICogTWFrZXMgYSBuZXcgW1tTdGFuZGFyZEtleVBhaXJdXSwgcmV0dXJucyB0aGUgYWRkcmVzcy5cbiAgICpcbiAgICogQHJldHVybnMgQWRkcmVzcyBvZiB0aGUgbmV3IFtbU3RhbmRhcmRLZXlQYWlyXV1cbiAgICovXG4gIG1ha2VLZXk6ICgpID0+IEtQQ2xhc3NcblxuICAvKipcbiAgICogR2l2ZW4gYSBwcml2YXRlIGtleSwgbWFrZXMgYSBuZXcgW1tTdGFuZGFyZEtleVBhaXJdXSwgcmV0dXJucyB0aGUgYWRkcmVzcy5cbiAgICpcbiAgICogQHBhcmFtIHByaXZrIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBwcml2YXRlIGtleVxuICAgKlxuICAgKiBAcmV0dXJucyBBIG5ldyBbW1N0YW5kYXJkS2V5UGFpcl1dXG4gICAqL1xuICBpbXBvcnRLZXk6IChwcml2azogQnVmZmVyKSA9PiBLUENsYXNzXG5cbiAgLyoqXG4gICAqIEdldHMgYW4gYXJyYXkgb2YgYWRkcmVzc2VzIHN0b3JlZCBpbiB0aGUgW1tTdGFuZGFyZEtleUNoYWluXV0uXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9ICByZXByZXNlbnRhdGlvbnNcbiAgICogb2YgdGhlIGFkZHJlc3Nlc1xuICAgKi9cbiAgZ2V0QWRkcmVzc2VzID0gKCk6IEJ1ZmZlcltdID0+XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLmtleXMpLm1hcCgoa3ApID0+IGtwLmdldEFkZHJlc3MoKSlcblxuICAvKipcbiAgICogR2V0cyBhbiBhcnJheSBvZiBhZGRyZXNzZXMgc3RvcmVkIGluIHRoZSBbW1N0YW5kYXJkS2V5Q2hhaW5dXS5cbiAgICpcbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5nIHJlcHJlc2VudGF0aW9ucyBvZiB0aGUgYWRkcmVzc2VzXG4gICAqL1xuICBnZXRBZGRyZXNzU3RyaW5ncyA9ICgpOiBzdHJpbmdbXSA9PlxuICAgIE9iamVjdC52YWx1ZXModGhpcy5rZXlzKS5tYXAoKGtwKSA9PiBrcC5nZXRBZGRyZXNzU3RyaW5nKCkpXG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGtleSBwYWlyIHRvIHRoZSBsaXN0IG9mIHRoZSBrZXlzIG1hbmFnZWQgaW4gdGhlIFtbU3RhbmRhcmRLZXlDaGFpbl1dLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3S2V5IEEga2V5IHBhaXIgb2YgdGhlIGFwcHJvcHJpYXRlIGNsYXNzIHRvIGJlIGFkZGVkIHRvIHRoZSBbW1N0YW5kYXJkS2V5Q2hhaW5dXVxuICAgKi9cbiAgYWRkS2V5KG5ld0tleTogS1BDbGFzcykge1xuICAgIHRoaXMua2V5c1tuZXdLZXkuZ2V0QWRkcmVzcygpLnRvU3RyaW5nKFwiaGV4XCIpXSA9IG5ld0tleVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGtleSBwYWlyIGZyb20gdGhlIGxpc3Qgb2YgdGhleSBrZXlzIG1hbmFnZWQgaW4gdGhlIFtbU3RhbmRhcmRLZXlDaGFpbl1dLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gZm9yIHRoZSBhZGRyZXNzIG9yXG4gICAqIEtQQ2xhc3MgdG8gcmVtb3ZlXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBib29sZWFuIHRydWUgaWYgYSBrZXkgd2FzIHJlbW92ZWQuXG4gICAqL1xuICByZW1vdmVLZXkgPSAoa2V5OiBLUENsYXNzIHwgQnVmZmVyKSA9PiB7XG4gICAgbGV0IGthZGRyOiBzdHJpbmdcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICBrYWRkciA9IGtleS50b1N0cmluZyhcImhleFwiKVxuICAgIH0gZWxzZSB7XG4gICAgICBrYWRkciA9IGtleS5nZXRBZGRyZXNzKCkudG9TdHJpbmcoXCJoZXhcIilcbiAgICB9XG4gICAgaWYgKGthZGRyIGluIHRoaXMua2V5cykge1xuICAgICAgZGVsZXRlIHRoaXMua2V5c1tgJHtrYWRkcn1gXVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZXJlIGlzIGEga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgYWRkcmVzcy5cbiAgICpcbiAgICogQHBhcmFtIGFkZHJlc3MgVGhlIGFkZHJlc3MgdG8gY2hlY2sgZm9yIGV4aXN0ZW5jZSBpbiB0aGUga2V5cyBkYXRhYmFzZVxuICAgKlxuICAgKiBAcmV0dXJucyBUcnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgaGFzS2V5ID0gKGFkZHJlc3M6IEJ1ZmZlcik6IGJvb2xlYW4gPT4gYWRkcmVzcy50b1N0cmluZyhcImhleFwiKSBpbiB0aGlzLmtleXNcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgW1tTdGFuZGFyZEtleVBhaXJdXSBsaXN0ZWQgdW5kZXIgdGhlIHByb3ZpZGVkIGFkZHJlc3NcbiAgICpcbiAgICogQHBhcmFtIGFkZHJlc3MgVGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9mIHRoZSBhZGRyZXNzIHRvXG4gICAqIHJldHJpZXZlIGZyb20gdGhlIGtleXMgZGF0YWJhc2VcbiAgICpcbiAgICogQHJldHVybnMgQSByZWZlcmVuY2UgdG8gdGhlIFtbU3RhbmRhcmRLZXlQYWlyXV0gaW4gdGhlIGtleXMgZGF0YWJhc2VcbiAgICovXG4gIGdldEtleSA9IChhZGRyZXNzOiBCdWZmZXIpOiBLUENsYXNzID0+IHRoaXMua2V5c1thZGRyZXNzLnRvU3RyaW5nKFwiaGV4XCIpXVxuXG4gIGFic3RyYWN0IGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXNcblxuICBhYnN0cmFjdCBjbG9uZSgpOiB0aGlzXG5cbiAgYWJzdHJhY3QgdW5pb24oa2M6IHRoaXMpOiB0aGlzXG59XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmZvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiXG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAmountInput = exports.StandardTransferableInput = exports.StandardParseableInput = exports.Input = void 0;\n/**\n * @packageDocumentation\n * @module Common-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"./credentials\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nclass Input extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Input\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigIdxs: this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 representation of the [[Input]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Input = Input;\nInput.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getInputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getInputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass StandardParseableInput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[StandardParseableInput]] for a transaction.\n     *\n     * @param input A number representing the InputID of the [[StandardParseableInput]]\n     */\n    constructor(input = undefined) {\n        super();\n        this._typeName = \"StandardParseableInput\";\n        this._typeID = undefined;\n        this.getInput = () => this.input;\n        if (input instanceof Input) {\n            this.input = input;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { input: this.input.serialize(encoding) });\n    }\n    toBuffer() {\n        const inbuff = this.input.toBuffer();\n        const inid = buffer_1.Buffer.alloc(4);\n        inid.writeUInt32BE(this.input.getInputID(), 0);\n        const barr = [inid, inbuff];\n        return buffer_1.Buffer.concat(barr, inid.length + inbuff.length);\n    }\n}\nexports.StandardParseableInput = StandardParseableInput;\n/**\n * Returns a function used to sort an array of [[StandardParseableInput]]s\n */\nStandardParseableInput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableInput extends StandardParseableInput {\n    /**\n     * Class representing an [[StandardTransferableInput]] for a transaction.\n     *\n     * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO\n     * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[StandardTransferableInput]]\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]\n     * @param input An [[Input]] to be made transferable\n     */\n    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {\n        super();\n        this._typeName = \"StandardTransferableInput\";\n        this._typeID = undefined;\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n         */\n        this.getTxID = () => this.txid;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n         */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n         * Returns a base-58 string representation of the UTXOID this [[StandardTransferableInput]] references.\n         */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));\n        /**\n         * Returns the input.\n         */\n        this.getInput = () => this.input;\n        /**\n         * Returns the assetID of the input.\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof txid !== \"undefined\" &&\n            typeof outputidx !== \"undefined\" &&\n            typeof assetID !== \"undefined\" &&\n            input instanceof Input) {\n            this.input = input;\n            this.txid = txid;\n            this.outputidx = outputidx;\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { txid: serialization.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), outputidx: serialization.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.txid = serialization.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serialization.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n        //input deserialization must be implmented in child classes\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTransferableInput]].\n     */\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const bsize = this.txid.length +\n            this.outputidx.length +\n            this.assetID.length +\n            parseableBuff.length;\n        const barr = [\n            this.txid,\n            this.outputidx,\n            this.assetID,\n            parseableBuff\n        ];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardTransferableInput]].\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardTransferableInput = StandardTransferableInput;\n/**\n * An [[Input]] class which specifies a token amount .\n */\nclass StandardAmountInput extends Input {\n    /**\n     * An [[AmountInput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     */\n    constructor(amount = undefined) {\n        super();\n        this._typeName = \"StandardAmountInput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { amount: serialization.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serialization.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the input.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(bytes, offset);\n    }\n    /**\n     * Returns the buffer representing the [[AmountInput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountInput = StandardAmountInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-AssetAmount\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAssetAmountDestination = exports.AssetAmount = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst errors_1 = require(\"../utils/errors\");\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        // assetID that is amount is managing.\n        this.assetID = buffer_1.Buffer.alloc(32);\n        // amount of this asset that should be sent.\n        this.amount = new bn_js_1.default(0);\n        // burn is the amount of this asset that should be burned.\n        this.burn = new bn_js_1.default(0);\n        // spent is the total amount of this asset that has been consumed.\n        this.spent = new bn_js_1.default(0);\n        // stakeableLockSpent is the amount of this asset that has been consumed that\n        // was locked.\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        // change is the excess amount of this asset that was consumed over the amount\n        // requested to be consumed(amount + burn).\n        this.change = new bn_js_1.default(0);\n        // stakeableLockChange is a flag to mark if the input that generated the\n        // change was locked.\n        this.stakeableLockChange = false;\n        // finished is a convenience flag to track \"spent >= amount + burn\"\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.getStakeableLockSpent = () => {\n            return this.stakeableLockSpent;\n        };\n        this.getStakeableLockChange = () => {\n            return this.stakeableLockChange;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        // spendAmount should only be called if this asset is still awaiting more\n        // funds to consume.\n        this.spendAmount = (amt, stakeableLocked = false) => {\n            if (this.finished) {\n                /* istanbul ignore next */\n                throw new errors_1.InsufficientFundsError(\"Error - AssetAmount.spendAmount: attempted to spend \" + \"excess funds\");\n            }\n            this.spent = this.spent.add(amt);\n            if (stakeableLocked) {\n                this.stakeableLockSpent = this.stakeableLockSpent.add(amt);\n            }\n            const total = this.amount.add(this.burn);\n            if (this.spent.gte(total)) {\n                this.change = this.spent.sub(total);\n                if (stakeableLocked) {\n                    this.stakeableLockChange = true;\n                }\n                this.finished = true;\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        this.stakeableLockChange = false;\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass StandardAssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        // TODO: should this function allow for repeated calls with the same\n        //       assetID?\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[`${assetHexStr}`];\n        };\n        this.assetExists = (assetHexStr) => {\n            return assetHexStr in this.amountkey;\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[`${i}`].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.StandardAssetAmountDestination = StandardAssetAmountDestination;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = \"\";\n        this.hrp = \"\";\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            const type = \"bech32\";\n            return serialization.bufferToType(addr, type, this.hrp, this.chainid);\n        };\n        /**\n         * Returns the chainID associated with this key.\n         *\n         * @returns The [[KeyPair]]'s chainID\n         */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[KeyPair]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = \"\";\n        this.chainid = \"\";\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StakeableLockIn = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.ParseableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nconst SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.PlatformVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    else if (inputid === constants_1.PlatformVMConstants.STAKEABLELOCKINID) {\n        return new StakeableLockIn(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputid\");\n};\nexports.SelectInputClass = SelectInputClass;\nclass ParseableInput extends input_1.StandardParseableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableInput = ParseableInput;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n/**\n * An [[Input]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockIn extends AmountInput {\n    /**\n     * A [[Output]] class which specifies an [[Input]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableInput A [[ParseableInput]] which is embedded into this input.\n     */\n    constructor(amount = undefined, stakeableLocktime = undefined, transferableInput = undefined) {\n        super(amount);\n        this._typeName = \"StakeableLockIn\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKINID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableInput !== \"undefined\") {\n            this.transferableInput = transferableInput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { stakeableLocktime: serialization.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), transferableInput: this.transferableInput.serialize(encoding) });\n        delete outobj[\"sigIdxs\"];\n        delete outobj[\"sigCount\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"sigIdxs\"] = [];\n        fields[\"sigCount\"] = \"0\";\n        fields[\"amount\"] = \"98\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serialization.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableInput = new ParseableInput();\n        this.transferableInput.deserialize(fields[\"transferableInput\"], encoding);\n        this.synchronize();\n    }\n    synchronize() {\n        let input = this.transferableInput.getInput();\n        this.sigIdxs = input.getSigIdxs();\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        this.amount = bintools.fromBNToBuffer(input.getAmount(), 8);\n        this.amountValue = input.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferablInput() {\n        return this.transferableInput;\n    }\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockIn]] and returns the size of the output.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.transferableInput = new ParseableInput();\n        offset = this.transferableInput.fromBuffer(bytes, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockIn]] instance.\n     */\n    toBuffer() {\n        const xferinBuff = this.transferableInput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferinBuff.length;\n        const barr = [this.stakeableLocktime, xferinBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new StakeableLockIn(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.StakeableLockIn = StakeableLockIn;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.PlatformVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n         * Returns the id of the [[ImportTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== \"undefined\" && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[`${i}`] instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serialization.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serialization.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n     *\n     * @returns The length of the raw [[ImportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableInput]]s in this transaction.\n     */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.importIns[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.importIns[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./apibase\"), exports);\n__exportStar(require(\"./assetamount\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./evmtx\"), exports);\n__exportStar(require(\"./input\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./jrpcapi\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./nbytes\"), exports);\n__exportStar(require(\"./output\"), exports);\n__exportStar(require(\"./restapi\"), exports);\n__exportStar(require(\"./secp256k1\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDRDQUF5QjtBQUN6QixnREFBNkI7QUFDN0IsZ0RBQTZCO0FBQzdCLDBDQUF1QjtBQUN2QiwwQ0FBdUI7QUFDdkIsK0NBQTRCO0FBQzVCLDRDQUF5QjtBQUN6Qiw2Q0FBMEI7QUFDMUIsMkNBQXdCO0FBQ3hCLDJDQUF3QjtBQUN4Qiw0Q0FBeUI7QUFDekIsOENBQTJCO0FBQzNCLHVDQUFvQjtBQUNwQiwwQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGliYXNlXCJcbmV4cG9ydCAqIGZyb20gXCIuL2Fzc2V0YW1vdW50XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWRlbnRpYWxzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2V2bXR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0XCJcbmV4cG9ydCAqIGZyb20gXCIuL2ludGVyZmFjZXNcIlxuZXhwb3J0ICogZnJvbSBcIi4vanJwY2FwaVwiXG5leHBvcnQgKiBmcm9tIFwiLi9rZXljaGFpblwiXG5leHBvcnQgKiBmcm9tIFwiLi9uYnl0ZXNcIlxuZXhwb3J0ICogZnJvbSBcIi4vb3V0cHV0XCJcbmV4cG9ydCAqIGZyb20gXCIuL3Jlc3RhcGlcIlxuZXhwb3J0ICogZnJvbSBcIi4vc2VjcDI1NmsxXCJcbmV4cG9ydCAqIGZyb20gXCIuL3R4XCJcbmV4cG9ydCAqIGZyb20gXCIuL3V0eG9zXCJcbiJdfQ==","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9oZWFsdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpXCJcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardUTXOSet = exports.StandardUTXO = void 0;\n/**\n * @packageDocumentation\n * @module Common-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst output_1 = require(\"./output\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single StandardUTXO.\n */\nclass StandardUTXO extends serialization_1.Serializable {\n    /**\n     * Class for representing a single StandardUTXO.\n     *\n     * @param codecID Optional number which specifies the codeID of the UTXO. Default 0\n     * @param txID Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the StandardUTXO\n     * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]\n     * @param assetID Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the StandardUTXO\n     * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the StandardUTXO\n     */\n    constructor(codecID = 0, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        super();\n        this._typeName = \"StandardUTXO\";\n        this._typeID = undefined;\n        this.codecID = buffer_1.Buffer.alloc(2);\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.output = undefined;\n        /**\n         * Returns the numeric representation of the CodecID.\n         */\n        this.getCodecID = () => this.codecID.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n         */\n        this.getCodecIDBuffer = () => this.codecID;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n         */\n        this.getTxID = () => this.txid;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n         */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetID;\n        /**\n         * Returns the UTXOID as a base-58 string (UTXOID is a string )\n         */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));\n        /**\n         * Returns a reference to the output\n         */\n        this.getOutput = () => this.output;\n        if (typeof codecID !== \"undefined\") {\n            this.codecID.writeUInt8(codecID, 0);\n        }\n        if (typeof txID !== \"undefined\") {\n            this.txid = txID;\n        }\n        if (typeof outputidx === \"number\") {\n            this.outputidx.writeUInt32BE(outputidx, 0);\n        }\n        else if (outputidx instanceof buffer_1.Buffer) {\n            this.outputidx = outputidx;\n        }\n        if (typeof assetID !== \"undefined\") {\n            this.assetID = assetID;\n        }\n        if (typeof output !== \"undefined\") {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serialization.encoder(this.codecID, encoding, \"Buffer\", \"decimalString\"), txid: serialization.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), outputidx: serialization.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\"), output: this.output.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serialization.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"Buffer\", 2);\n        this.txid = serialization.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serialization.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardUTXO]].\n     */\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outputidbuffer = buffer_1.Buffer.alloc(4);\n        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [\n            this.codecID,\n            this.txid,\n            this.outputidx,\n            this.assetID,\n            outputidbuffer,\n            outbuff\n        ];\n        return buffer_1.Buffer.concat(barr, this.codecID.length +\n            this.txid.length +\n            this.outputidx.length +\n            this.assetID.length +\n            outputidbuffer.length +\n            outbuff.length);\n    }\n}\nexports.StandardUTXO = StandardUTXO;\n/**\n * Class representing a set of [[StandardUTXO]]s.\n */\nclass StandardUTXOSet extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"StandardUTXOSet\";\n        this._typeID = undefined;\n        this.utxos = {};\n        this.addressUTXOs = {}; // maps address to utxoids:locktime\n        /**\n         * Returns true if the [[StandardUTXO]] is in the StandardUTXOSet.\n         *\n         * @param utxo Either a [[StandardUTXO]] a cb58 serialized string representing a StandardUTXO\n         */\n        this.includes = (utxo) => {\n            let utxoX = undefined;\n            let utxoid = undefined;\n            try {\n                utxoX = this.parseUTXO(utxo);\n                utxoid = utxoX.getUTXOID();\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return false;\n            }\n            return utxoid in this.utxos;\n        };\n        /**\n         * Removes a [[StandardUTXO]] from the [[StandardUTXOSet]] if it exists.\n         *\n         * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n         *\n         * @returns A [[StandardUTXO]] if it was removed and undefined if nothing was removed.\n         */\n        this.remove = (utxo) => {\n            let utxovar = undefined;\n            try {\n                utxovar = this.parseUTXO(utxo);\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return undefined;\n            }\n            const utxoid = utxovar.getUTXOID();\n            if (!(utxoid in this.utxos)) {\n                return undefined;\n            }\n            delete this.utxos[`${utxoid}`];\n            const addresses = Object.keys(this.addressUTXOs);\n            for (let i = 0; i < addresses.length; i++) {\n                if (utxoid in this.addressUTXOs[addresses[`${i}`]]) {\n                    delete this.addressUTXOs[addresses[`${i}`]][`${utxoid}`];\n                }\n            }\n            return utxovar;\n        };\n        /**\n         * Removes an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n         *\n         * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n         * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n         *\n         * @returns An array of UTXOs which were removed.\n         */\n        this.removeArray = (utxos) => {\n            const removed = [];\n            for (let i = 0; i < utxos.length; i++) {\n                const result = this.remove(utxos[`${i}`]);\n                if (typeof result !== \"undefined\") {\n                    removed.push(result);\n                }\n            }\n            return removed;\n        };\n        /**\n         * Gets a [[StandardUTXO]] from the [[StandardUTXOSet]] by its UTXOID.\n         *\n         * @param utxoid String representing the UTXOID\n         *\n         * @returns A [[StandardUTXO]] if it exists in the set.\n         */\n        this.getUTXO = (utxoid) => this.utxos[`${utxoid}`];\n        /**\n         * Gets all the [[StandardUTXO]]s, optionally that match with UTXOIDs in an array\n         *\n         * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n         *\n         * @returns An array of [[StandardUTXO]]s.\n         */\n        this.getAllUTXOs = (utxoids = undefined) => {\n            let results = [];\n            if (typeof utxoids !== \"undefined\" && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[`${i}`] in this.utxos && !(utxoids[`${i}`] in results)) {\n                        results.push(this.utxos[utxoids[`${i}`]]);\n                    }\n                }\n            }\n            else {\n                results = Object.values(this.utxos);\n            }\n            return results;\n        };\n        /**\n         * Gets all the [[StandardUTXO]]s as strings, optionally that match with UTXOIDs in an array.\n         *\n         * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n         *\n         * @returns An array of [[StandardUTXO]]s as cb58 serialized strings.\n         */\n        this.getAllUTXOStrings = (utxoids = undefined) => {\n            const results = [];\n            const utxos = Object.keys(this.utxos);\n            if (typeof utxoids !== \"undefined\" && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[`${i}`] in this.utxos) {\n                        results.push(this.utxos[utxoids[`${i}`]].toString());\n                    }\n                }\n            }\n            else {\n                for (const u of utxos) {\n                    results.push(this.utxos[`${u}`].toString());\n                }\n            }\n            return results;\n        };\n        /**\n         * Given an address or array of addresses, returns all the UTXOIDs for those addresses\n         *\n         * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s\n         * @param spendable If true, only retrieves UTXOIDs whose locktime has passed\n         *\n         * @returns An array of addresses.\n         */\n        this.getUTXOIDs = (addresses = undefined, spendable = true) => {\n            if (typeof addresses !== \"undefined\") {\n                const results = [];\n                const now = (0, helperfunctions_1.UnixNow)();\n                for (let i = 0; i < addresses.length; i++) {\n                    if (addresses[`${i}`].toString(\"hex\") in this.addressUTXOs) {\n                        const entries = Object.entries(this.addressUTXOs[addresses[`${i}`].toString(\"hex\")]);\n                        for (const [utxoid, locktime] of entries) {\n                            if ((results.indexOf(utxoid) === -1 &&\n                                spendable &&\n                                locktime.lte(now)) ||\n                                !spendable) {\n                                results.push(utxoid);\n                            }\n                        }\n                    }\n                }\n                return results;\n            }\n            return Object.keys(this.utxos);\n        };\n        /**\n         * Gets the addresses in the [[StandardUTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAddresses = () => Object.keys(this.addressUTXOs).map((k) => buffer_1.Buffer.from(k, \"hex\"));\n        /**\n         * Returns the balance of a set of addresses in the StandardUTXOSet.\n         *\n         * @param addresses An array of addresses\n         * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID\n         * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getBalance = (addresses, assetID, asOf = undefined) => {\n            const utxoids = this.getUTXOIDs(addresses);\n            const utxos = this.getAllUTXOs(utxoids);\n            let spend = new bn_js_1.default(0);\n            let asset;\n            if (typeof assetID === \"string\") {\n                asset = bintools.cb58Decode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            for (let i = 0; i < utxos.length; i++) {\n                if (utxos[`${i}`].getOutput() instanceof output_1.StandardAmountOutput &&\n                    utxos[`${i}`].getAssetID().toString(\"hex\") === asset.toString(\"hex\") &&\n                    utxos[`${i}`].getOutput().meetsThreshold(addresses, asOf)) {\n                    spend = spend.add(utxos[`${i}`].getOutput().getAmount());\n                }\n            }\n            return spend;\n        };\n        /**\n         * Gets all the Asset IDs, optionally that match with Asset IDs in an array\n         *\n         * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided\n         *\n         * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.\n         */\n        this.getAssetIDs = (addresses = undefined) => {\n            const results = new Set();\n            let utxoids = [];\n            if (typeof addresses !== \"undefined\") {\n                utxoids = this.getUTXOIDs(addresses);\n            }\n            else {\n                utxoids = this.getUTXOIDs();\n            }\n            for (let i = 0; i < utxoids.length; i++) {\n                if (utxoids[`${i}`] in this.utxos && !(utxoids[`${i}`] in results)) {\n                    results.add(this.utxos[utxoids[`${i}`]].getAssetID());\n                }\n            }\n            return [...results];\n        };\n        /**\n         * Returns a new set with copy of UTXOs in this and set parameter.\n         *\n         * @param utxoset The [[StandardUTXOSet]] to merge with this one\n         * @param hasUTXOIDs Will subselect a set of [[StandardUTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs\n         *\n         * @returns A new StandardUTXOSet that contains all the filtered elements.\n         */\n        this.merge = (utxoset, hasUTXOIDs = undefined) => {\n            const results = this.create();\n            const utxos1 = this.getAllUTXOs(hasUTXOIDs);\n            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);\n            const process = (utxo) => {\n                results.add(utxo);\n            };\n            utxos1.forEach(process);\n            utxos2.forEach(process);\n            return results;\n        };\n        /**\n         * Set intersetion between this set and a parameter.\n         *\n         * @param utxoset The set to intersect\n         *\n         * @returns A new StandardUTXOSet containing the intersection\n         */\n        this.intersection = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n         * Set difference between this set and a parameter.\n         *\n         * @param utxoset The set to difference\n         *\n         * @returns A new StandardUTXOSet containing the difference\n         */\n        this.difference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n         * Set symmetrical difference between this set and a parameter.\n         *\n         * @param utxoset The set to symmetrical difference\n         *\n         * @returns A new StandardUTXOSet containing the symmetrical difference\n         */\n        this.symDifference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1\n                .filter((utxoid) => !us2.includes(utxoid))\n                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));\n            return this.merge(utxoset, results);\n        };\n        /**\n         * Set union between this set and a parameter.\n         *\n         * @param utxoset The set to union\n         *\n         * @returns A new StandardUTXOSet containing the union\n         */\n        this.union = (utxoset) => this.merge(utxoset);\n        /**\n         * Merges a set by the rule provided.\n         *\n         * @param utxoset The set to merge by the MergeRule\n         * @param mergeRule The [[MergeRule]] to apply\n         *\n         * @returns A new StandardUTXOSet containing the merged data\n         *\n         * @remarks\n         * The merge rules are as follows:\n         *   * \"intersection\" - the intersection of the set\n         *   * \"differenceSelf\" - the difference between the existing data and new set\n         *   * \"differenceNew\" - the difference between the new data and the existing set\n         *   * \"symDifference\" - the union of the differences between both sets of data\n         *   * \"union\" - the unique set of all elements contained in both sets\n         *   * \"unionMinusNew\" - the unique set of all elements contained in both sets, excluding values only found in the new set\n         *   * \"unionMinusSelf\" - the unique set of all elements contained in both sets, excluding values only found in the existing set\n         */\n        this.mergeByRule = (utxoset, mergeRule) => {\n            let uSet;\n            switch (mergeRule) {\n                case \"intersection\":\n                    return this.intersection(utxoset);\n                case \"differenceSelf\":\n                    return this.difference(utxoset);\n                case \"differenceNew\":\n                    return utxoset.difference(this);\n                case \"symDifference\":\n                    return this.symDifference(utxoset);\n                case \"union\":\n                    return this.union(utxoset);\n                case \"unionMinusNew\":\n                    uSet = this.union(utxoset);\n                    return uSet.difference(utxoset);\n                case \"unionMinusSelf\":\n                    uSet = this.union(utxoset);\n                    return uSet.difference(this);\n                default:\n                    throw new errors_1.MergeRuleError(\"Error - StandardUTXOSet.mergeByRule: bad MergeRule\");\n            }\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let utxos = {};\n        for (let utxoid in this.utxos) {\n            let utxoidCleaned = serialization.encoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = this.utxos[`${utxoid}`].serialize(encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in this.addressUTXOs) {\n            let addressCleaned = serialization.encoder(address, encoding, \"hex\", \"cb58\");\n            let utxobalance = {};\n            for (let utxoid in this.addressUTXOs[`${address}`]) {\n                let utxoidCleaned = serialization.encoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serialization.encoder(this.addressUTXOs[`${address}`][`${utxoid}`], encoding, \"BN\", \"decimalString\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        return Object.assign(Object.assign({}, fields), { utxos,\n            addressUTXOs });\n    }\n    /**\n     * Adds a [[StandardUTXO]] to the StandardUTXOSet.\n     *\n     * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n     * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n     *\n     * @returns A [[StandardUTXO]] if one was added and undefined if nothing was added.\n     */\n    add(utxo, overwrite = false) {\n        let utxovar = undefined;\n        try {\n            utxovar = this.parseUTXO(utxo);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n            }\n            else {\n                console.log(e);\n            }\n            return undefined;\n        }\n        const utxoid = utxovar.getUTXOID();\n        if (!(utxoid in this.utxos) || overwrite === true) {\n            this.utxos[`${utxoid}`] = utxovar;\n            const addresses = utxovar.getOutput().getAddresses();\n            const locktime = utxovar.getOutput().getLocktime();\n            for (let i = 0; i < addresses.length; i++) {\n                const address = addresses[`${i}`].toString(\"hex\");\n                if (!(address in this.addressUTXOs)) {\n                    this.addressUTXOs[`${address}`] = {};\n                }\n                this.addressUTXOs[`${address}`][`${utxoid}`] = locktime;\n            }\n            return utxovar;\n        }\n        return undefined;\n    }\n    /**\n     * Adds an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n     *\n     * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n     * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n     *\n     * @returns An array of StandardUTXOs which were added.\n     */\n    addArray(utxos, overwrite = false) {\n        const added = [];\n        for (let i = 0; i < utxos.length; i++) {\n            let result = this.add(utxos[`${i}`], overwrite);\n            if (typeof result !== \"undefined\") {\n                added.push(result);\n            }\n        }\n        return added;\n    }\n    filter(args, lambda) {\n        let newset = this.clone();\n        let utxos = this.getAllUTXOs();\n        for (let i = 0; i < utxos.length; i++) {\n            if (lambda(utxos[`${i}`], ...args) === false) {\n                newset.remove(utxos[`${i}`]);\n            }\n        }\n        return newset;\n    }\n}\nexports.StandardUTXOSet = StandardUTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9rZXlzdG9yZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createsubnettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./validationtx\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQjtBQUNyQiwyQ0FBd0I7QUFDeEIsOENBQTJCO0FBQzNCLG1EQUFnQztBQUNoQyxnREFBNkI7QUFDN0IsNkNBQTBCO0FBQzFCLDZDQUEwQjtBQUMxQiwyQ0FBd0I7QUFDeEIsNkNBQTBCO0FBQzFCLDRDQUF5QjtBQUN6Qix1Q0FBb0I7QUFDcEIsMENBQXVCO0FBQ3ZCLGlEQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiXG5leHBvcnQgKiBmcm9tIFwiLi9iYXNldHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vY29uc3RhbnRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWF0ZXN1Ym5ldHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWRlbnRpYWxzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2V4cG9ydHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2ltcG9ydHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9rZXljaGFpblwiXG5leHBvcnQgKiBmcm9tIFwiLi9vdXRwdXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3R4XCJcbmV4cG9ydCAqIGZyb20gXCIuL3V0eG9zXCJcbmV4cG9ydCAqIGZyb20gXCIuL3ZhbGlkYXRpb250eFwiXG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUludGVyZmFjZXNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgeyBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tIFwiLi4vdXRpbHNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWRzSW50ZXJmYWNlIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBwYXNzd29yZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXNzdWVUeFBhcmFtcyB7XG4gIHR4OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmRleCB7XG4gIGFkZHJlc3M6IHN0cmluZ1xuICB1dHhvOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVVFhPUmVzcG9uc2Uge1xuICBudW1GZXRjaGVkOiBudW1iZXJcbiAgdXR4b3M6IGFueVxuICBlbmRJbmRleDogSW5kZXhcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3NldCB7XG4gIG5hbWU6IHN0cmluZ1xuICBzeW1ib2w6IHN0cmluZ1xuICBhc3NldElEOiBCdWZmZXJcbiAgZGVub21pbmF0aW9uOiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFrZWRPdXRzIHtcbiAgbm9kZUlEOiBzdHJpbmdcbiAgc3Rha2VkVW50aWw6IHN0cmluZ1xuICBzdGFrZU9ubHlVbnRpbDogc3RyaW5nXG4gIG93bmVyczogc3RyaW5nW11cbiAgdGhyZXNob2xkOiBzdHJpbmdcbiAgYW1vdW50OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXb3JkTGlzdHMge1xuICBjemVjaDogc3RyaW5nW11cbiAgY2hpbmVzZV9zaW1wbGlmaWVkOiBzdHJpbmdbXVxuICBjaGluZXNlX3RyYWRpdGlvbmFsOiBzdHJpbmdbXVxuICBrb3JlYW46IHN0cmluZ1tdXG4gIGZyZW5jaDogc3RyaW5nW11cbiAgaXRhbGlhbjogc3RyaW5nW11cbiAgc3BhbmlzaDogc3RyaW5nW11cbiAgamFwYW5lc2U6IHN0cmluZ1tdXG4gIEpBOiBzdHJpbmdbXVxuICBwb3J0dWd1ZXNlOiBzdHJpbmdbXVxuICBlbmdsaXNoOiBzdHJpbmdbXVxuICBFTjogc3RyaW5nW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkIHtcbiAgdm06IHN0cmluZ1xuICBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nXG4gIHZlcnNpb246IG51bWJlclxuICBub3Rlczogc3RyaW5nXG4gIGZpZWxkczogb2JqZWN0XG59XG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst restapi_1 = require(\"../../common/restapi\");\n/**\n * Class for interacting with a node API that is using the node's MetricsApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[RESTAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass MetricsAPI extends restapi_1.RESTAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/metrics\" as the path to rpc's baseurl\n     */\n    constructor(core, baseURL = \"/ext/metrics\") {\n        super(core, baseURL);\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getHost()}:${this.core.getPort()}`,\n                responseType: \"text\"\n            };\n        };\n        /**\n         *\n         * @returns Promise for an object containing the metrics response\n         */\n        this.getMetrics = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.post(\"\");\n            return response.data;\n        });\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvbWV0cmljcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQThDO0FBSTlDOzs7Ozs7R0FNRztBQUNILE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBaUJyQzs7Ozs7T0FLRztJQUNILFlBQVksSUFBbUIsRUFBRSxVQUFrQixjQUFjO1FBQy9ELEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUF2QlosV0FBTSxHQUFHLEdBQXVCLEVBQUU7WUFDMUMsT0FBTztnQkFDTCxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDckYsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQTtRQUNILENBQUMsQ0FBQTtRQUVEOzs7V0FHRztRQUNILGVBQVUsR0FBRyxHQUEwQixFQUFFO1lBQ3ZDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDekQsT0FBTyxRQUFRLENBQUMsSUFBYyxDQUFBO1FBQ2hDLENBQUMsQ0FBQSxDQUFBO0lBVUQsQ0FBQztDQUNGO0FBMUJELGdDQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1NZXRyaWNzXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gXCIuLi8uLi9hdmFsYW5jaGVcIlxuaW1wb3J0IHsgUkVTVEFQSSB9IGZyb20gXCIuLi8uLi9jb21tb24vcmVzdGFwaVwiXG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hcGliYXNlXCJcbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gXCJheGlvc1wiXG5cbi8qKlxuICogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlIEFQSSB0aGF0IGlzIHVzaW5nIHRoZSBub2RlJ3MgTWV0cmljc0FwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tSRVNUQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRyaWNzQVBJIGV4dGVuZHMgUkVTVEFQSSB7XG4gIHByb3RlY3RlZCBheENvbmYgPSAoKTogQXhpb3NSZXF1ZXN0Q29uZmlnID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFzZVVSTDogYCR7dGhpcy5jb3JlLmdldFByb3RvY29sKCl9Oi8vJHt0aGlzLmNvcmUuZ2V0SG9zdCgpfToke3RoaXMuY29yZS5nZXRQb3J0KCl9YCxcbiAgICAgIHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCJcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldHJpY3MgcmVzcG9uc2VcbiAgICovXG4gIGdldE1ldHJpY3MgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMucG9zdChcIlwiKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhIGFzIHN0cmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICogQHBhcmFtIGJhc2VVUkwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvbWV0cmljc1wiIGFzIHRoZSBwYXRoIHRvIHJwYydzIGJhc2V1cmxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2VVUkw6IHN0cmluZyA9IFwiL2V4dC9tZXRyaWNzXCIpIHtcbiAgICBzdXBlcihjb3JlLCBiYXNlVVJMKVxuICB9XG59XG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constants_2 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../platformvm/utxos\");\nconst errors_1 = require(\"../../utils/errors\");\nconst outputs_1 = require(\"./outputs\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node's PlatformVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass PlatformVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/P\" as the path to blockchain's baseURL\n     */\n    constructor(core, baseURL = \"/ext/bc/P\") {\n        super(core, baseURL);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = constants_1.PlatformChainID;\n        this.blockchainAlias = undefined;\n        this.AVAXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        this.minValidatorStake = undefined;\n        this.minDelegatorStake = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_1.Defaults.network &&\n                    this.blockchainID in constants_1.Defaults.network[`${netid}`]) {\n                    this.blockchainAlias =\n                        constants_1.Defaults.network[`${netid}`][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" &&\n                typeof constants_1.Defaults.network[`${netid}`] !== \"undefined\") {\n                this.blockchainID = constants_1.PlatformChainID; //default to P-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.PlatformVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias()\n                ? this.getBlockchainAlias()\n                : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainid);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === \"undefined\" || refresh) {\n                const assetID = yield this.getStakingAssetID();\n                this.AVAXAssetID = bintools.cb58Decode(assetID);\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific AVAX AssetID\n         *\n         * @param avaxAssetID A cb58 string or Buffer representing the AVAX AssetID\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.setAVAXAssetID = (avaxAssetID) => {\n            if (typeof avaxAssetID === \"string\") {\n                avaxAssetID = bintools.cb58Decode(avaxAssetID);\n            }\n            this.AVAXAssetID = avaxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"txFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"creationTxFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let outputTotal = outTotal.gt(new bn_js_1.default(0))\n                ? outTotal\n                : utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_1.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Retrieves an assetID for a subnet\"s staking assset.\n         *\n         * @returns Returns a Promise<string> with cb58 encoded value of the assetID.\n         */\n        this.getStakingAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getStakingAssetID\");\n            return response.data.result.assetID;\n        });\n        /**\n         * Creates a new blockchain.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.\n         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n         * @param FXIDs The ids of the FXs the VM is running.\n         * @param name A human-readable name for the new blockchain\n         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.\n         *\n         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnet’s control keys and by the account paying the transaction fee.\n         */\n        this.createBlockchain = (username, password, subnetID = undefined, vmID, fxIDs, name, genesis) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                fxIDs,\n                vmID,\n                name,\n                genesisData: genesis\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.createBlockchain\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Gets the status of a blockchain.\n         *\n         * @param blockchainID The blockchainID requesting a status update\n         *\n         * @returns Promise for a string of one of: \"Validating\", \"Created\", \"Preferred\", \"Unknown\".\n         */\n        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID\n            };\n            const response = yield this.callMethod(\"platform.getBlockchainStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Get the validators and their weights of a subnet or the Primary Network at a given P-Chain height.\n         *\n         * @param height The P-Chain height to get the validator set at.\n         * @param subnetID Optional. A cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise<GetValidatorsAtResponse>\n         */\n        this.getValidatorsAt = (height, subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                height\n            };\n            if (typeof subnetID !== \"undefined\") {\n                params.subnetID = subnetID;\n            }\n            const response = yield this.callMethod(\"platform.getValidatorsAt\", params);\n            return response.data.result;\n        });\n        /**\n         * Create an address in the node's keystore.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         *\n         * @returns Promise for a string of the newly created account address.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.createAddress\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Gets the balance of a particular asset.\n         *\n         * @param address The address to pull the asset balance from\n         *\n         * @returns Promise with the balance as a {@link https://github.com/indutny/bn.js/|BN} on the provided address.\n         */\n        this.getBalance = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - PlatformVMAPI.getBalance: Invalid address format\");\n            }\n            const params = {\n                address\n            };\n            const response = yield this.callMethod(\"platform.getBalance\", params);\n            return response.data.result;\n        });\n        /**\n         * List the addresses controlled by the user.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         *\n         * @returns Promise for an array of addresses.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.listAddresses\", params);\n            return response.data.result.addresses;\n        });\n        /**\n         * Lists the set of current validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.\n         *\n         */\n        this.getCurrentValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.getCurrentValidators\", params);\n            return response.data.result;\n        });\n        /**\n         * Lists the set of pending validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}\n         * or a cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.\n         *\n         */\n        this.getPendingValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.getPendingValidators\", params);\n            return response.data.result;\n        });\n        /**\n         * Samples `Size` validators from the current validator set.\n         *\n         * @param sampleSize Of the total universe of validators, select this many at random\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validator\"s stakingIDs.\n         */\n        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                size: sampleSize.toString()\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.sampleValidators\", params);\n            return response.data.result.validators;\n        });\n        /**\n         * Add a validator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param stakeAmount The amount of nAVAX the validator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address the validator reward will go to, if there is one.\n         * @param delegationFeeRate Optional. A {@link https://github.com/indutny/bn.js/|BN} for the percent fee this validator\n         * charges when others delegate stake to them. Up to 4 decimal places allowed additional decimal places are ignored.\n         * Must be between 0 and 100, inclusive. For example, if delegationFeeRate is 1.2345 and someone delegates to this\n         * validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes\n         * to the delegator.\n         *\n         * @returns Promise for a base58 string of the unsigned transaction.\n         */\n        this.addValidator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress\n            };\n            if (typeof delegationFeeRate !== \"undefined\") {\n                params.delegationFeeRate = delegationFeeRate.toString(10);\n            }\n            const response = yield this.callMethod(\"platform.addValidator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Add a validator to a Subnet other than the Primary Network. The validator must validate the Primary Network for the entire duration they validate this Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param weight The validator’s weight used for sampling\n         *\n         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnet’s control keys and by the key of the account paying the transaction fee before it can be issued.\n         */\n        this.addSubnetValidator = (username, password, nodeID, subnetID, startTime, endTime, weight) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                weight\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.addSubnetValidator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Add a delegator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the delegatee\n         * @param startTime Javascript Date object for when the delegator starts delegating\n         * @param endTime Javascript Date object for when the delegator starts delegating\n         * @param stakeAmount The amount of nAVAX the delegator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address of the account the staked AVAX and validation reward\n         * (if applicable) are sent to at endTime\n         *\n         * @returns Promise for an array of validator\"s stakingIDs.\n         */\n        this.addDelegator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress\n            };\n            const response = yield this.callMethod(\"platform.addDelegator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be\n         * signed with the key of the account paying the transaction fee. The Subnet’s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param controlKeys Array of platform addresses as strings\n         * @param threshold To add a validator to this Subnet, a transaction must have threshold\n         * signatures, where each signature is from a key whose address is an element of `controlKeys`\n         *\n         * @returns Promise for a string with the unsigned transaction encoded as base58.\n         */\n        this.createSubnet = (username, password, controlKeys, threshold) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                controlKeys,\n                threshold\n            };\n            const response = yield this.callMethod(\"platform.createSubnet\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Get the Subnet that validates a given blockchain.\n         *\n         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58\n         * encoded string for the blockchainID or its alias.\n         *\n         * @returns Promise for a string of the subnetID that validates the blockchain.\n         */\n        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID\n            };\n            const response = yield this.callMethod(\"platform.validatedBy\", params);\n            return response.data.result.subnetID;\n        });\n        /**\n         * Get the IDs of the blockchains a Subnet validates.\n         *\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an AVAX\n         * serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of blockchainIDs the subnet validates.\n         */\n        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                subnetID\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.validates\", params);\n            return response.data.result.blockchainIDs;\n        });\n        /**\n         * Get all the blockchains that exist (excluding the P-Chain).\n         *\n         * @returns Promise for an array of objects containing fields \"id\", \"subnetID\", and \"vmID\".\n         */\n        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getBlockchains\");\n            return response.data.result.blockchains;\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays the\n         * transaction fee. After issuing this transaction, you must call the X-Chain’s importAVAX\n         * method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address on the X-Chain to send the AVAX to. Do not include X- in the address\n         * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Promise for an unsigned transaction to be signed by the account the the AVAX is\n         * sent from and pays the transaction fee.\n         */\n        this.exportAVAX = (username, password, amount, to) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount.toString(10)\n            };\n            const response = yield this.callMethod(\"platform.exportAVAX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays\n         * the transaction fee. After issuing this transaction, you must call the X-Chain’s\n         * importAVAX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The ID of the account the AVAX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportAVAX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.importAVAX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - platform.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString()\n            };\n            const response = yield this.callMethod(\"platform.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Returns an upper bound on the amount of tokens that exist. Not monotonically increasing because this number can go down if a staker\"s reward is denied.\n         */\n        this.getCurrentSupply = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getCurrentSupply\");\n            return new bn_js_1.default(response.data.result.supply, 10);\n        });\n        /**\n         * Returns the height of the platform chain.\n         */\n        this.getHeight = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getHeight\");\n            return new bn_js_1.default(response.data.result.height, 10);\n        });\n        /**\n         * Gets the minimum staking amount.\n         *\n         * @param refresh A boolean to bypass the local cached value of Minimum Stake Amount, polling the node instead.\n         */\n        this.getMinStake = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (refresh !== true &&\n                typeof this.minValidatorStake !== \"undefined\" &&\n                typeof this.minDelegatorStake !== \"undefined\") {\n                return {\n                    minValidatorStake: this.minValidatorStake,\n                    minDelegatorStake: this.minDelegatorStake\n                };\n            }\n            const response = yield this.callMethod(\"platform.getMinStake\");\n            this.minValidatorStake = new bn_js_1.default(response.data.result.minValidatorStake, 10);\n            this.minDelegatorStake = new bn_js_1.default(response.data.result.minDelegatorStake, 10);\n            return {\n                minValidatorStake: this.minValidatorStake,\n                minDelegatorStake: this.minDelegatorStake\n            };\n        });\n        /**\n         * Sets the minimum stake cached in this class.\n         * @param minValidatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum stake amount cached in this class.\n         * @param minDelegatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum delegation amount cached in this class.\n         */\n        this.setMinStake = (minValidatorStake = undefined, minDelegatorStake = undefined) => {\n            if (typeof minValidatorStake !== \"undefined\") {\n                this.minValidatorStake = minValidatorStake;\n            }\n            if (typeof minDelegatorStake !== \"undefined\") {\n                this.minDelegatorStake = minDelegatorStake;\n            }\n        };\n        /**\n         * Gets the total amount staked for an array of addresses.\n         */\n        this.getStake = (addresses, encoding = \"cb58\") => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                addresses,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getStake\", params);\n            return {\n                staked: new bn_js_1.default(response.data.result.staked, 10),\n                stakedOutputs: response.data.result.stakedOutputs.map((stakedOutput) => {\n                    const transferableOutput = new outputs_1.TransferableOutput();\n                    let buf;\n                    if (encoding === \"cb58\") {\n                        buf = bintools.cb58Decode(stakedOutput);\n                    }\n                    else {\n                        buf = buffer_1.Buffer.from(stakedOutput.replace(/0x/g, \"\"), \"hex\");\n                    }\n                    transferableOutput.fromBuffer(buf, 2);\n                    return transferableOutput;\n                })\n            };\n        });\n        /**\n         * Get all the subnets that exist.\n         *\n         * @param ids IDs of the subnets to retrieve information about. If omitted, gets all subnets\n         *\n         * @returns Promise for an array of objects containing fields \"id\",\n         * \"controlKeys\", and \"threshold\".\n         */\n        this.getSubnets = (ids = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof ids !== undefined) {\n                params.ids = ids;\n            }\n            const response = yield this.callMethod(\"platform.getSubnets\", params);\n            return response.data.result.subnets;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"platform.exportKey\", params);\n            return response.data.result.privateKey\n                ? response.data.result.privateKey\n                : response.data.result;\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm\"s format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"platform.importKey\", params);\n            return response.data.result.address\n                ? response.data.result.address\n                : response.data.result;\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string | ErrorResponseObject> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid\n            };\n            const response = yield this.callMethod(\"platform.getTx\", params);\n            return response.data.result.tx\n                ? response.data.result.tx\n                : response.data.result;\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         * @param includeReason Return the reason tx was dropped, if applicable. Defaults to true\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node and the reason a tx was dropped, if applicable.\n         */\n        this.getTxStatus = (txid, includeReason = true) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n                includeReason: includeReason\n            };\n            const response = yield this.callMethod(\"platform.getTxStatus\", params);\n            return response.data.result;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO\"s. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"platform.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            let data = response.data.result.utxos;\n            if (persistOpts && typeof persistOpts === \"object\") {\n                if (this.db.has(persistOpts.getName())) {\n                    const selfArray = this.db.get(persistOpts.getName());\n                    if (Array.isArray(selfArray)) {\n                        utxos.addArray(data);\n                        const self = new utxos_1.UTXOSet();\n                        self.addArray(selfArray);\n                        self.mergeByRule(utxos, persistOpts.getMergeRule());\n                        data = self.getAllUTXOStrings();\n                    }\n                }\n                this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n            }\n            utxos.addArray(data, false);\n            response.data.result.utxos = utxos;\n            response.data.result.numFetched = parseInt(response.data.result.numFetched);\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildImportTx: Invalid destinationChain type: \" +\n                    typeof sourceChain);\n            }\n            const atomicUTXOs = yield (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - PlatformVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Invalid destinationChain type: \" +\n                    typeof destinationChain);\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            /*\n            if(bintools.cb58Encode(destinationChain) !== Defaults.network[this.core.getNetworkID()].X[\"blockchainID\"]) {\n              throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must The X-Chain ID in the current version of AvalancheJS.\")\n            }*/\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned [[AddSubnetValidatorTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] manually and import the [[AddSubnetValidatorTx]] class directly.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on.\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n         * @param weight The amount of weight for this subnet validator.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        /* Re-implement when subnetValidator signing process is clearer\n        buildAddSubnetValidatorTx = async (\n          utxoset:UTXOSet,\n          fromAddresses:string[],\n          changeAddresses:string[],\n          nodeID:string,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          memo:PayloadBase|Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):Promise<UnsignedTx> => {\n          const from:Buffer[] = this._cleanAddressArray(fromAddresses, \"buildAddSubnetValidatorTx\").map((a): Buffer => bintools.stringToAddress(a))\n          const change:Buffer[] = this._cleanAddressArray(changeAddresses, \"buildAddSubnetValidatorTx\").map((a): Buffer => bintools.stringToAddress(a))\n      \n          if( memo instanceof PayloadBase) {\n            memo = memo.getPayload()\n          }\n      \n          const avaxAssetID:Buffer = await this.getAVAXAssetID()\n      \n          const now:BN = UnixNow()\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"PlatformVMAPI.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\")\n          }\n      \n          const builtUnsignedTx:UnsignedTx = utxoset.buildAddSubnetValidatorTx(\n            this.core.getNetworkID(),\n            bintools.cb58Decode(this.blockchainID),\n            from,\n            change,\n            NodeIDStringToBuffer(nodeID),\n            startTime, endTime,\n            weight,\n            this.getFee(),\n            avaxAssetID,\n            memo, asOf\n          )\n      \n          if(! await this.checkGooseEgg(builtUnsignedTx)) {\n            /* istanbul ignore next */ /*\n  throw new Error(\"Failed Goose Egg Check\")\n  }\n  \n  return builtUnsignedTx\n  }\n  \n  */\n        /**\n         * Helper function which creates an unsigned [[AddDelegatorTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] manually and import the [[AddDelegatorTx]] class directly.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who received the staked tokens at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in AVAX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n         * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n         * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n         * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddDelegatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minDelegatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new errors_1.StakeError(\"PlatformVMAPI.buildAddDelegatorTx -- stake amount must be at least \" +\n                    minStake.toString(10));\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddDelegatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, to, from, change, (0, helperfunctions_1.NodeIDStringToBuffer)(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, new bn_js_1.default(0), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned [[AddValidatorTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] manually and import the [[AddValidatorTx]] class directly.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who received the staked tokens at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in AVAX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n         * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n         * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n         * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n         * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddValidatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, delegationFee, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minValidatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new errors_1.StakeError(\"PlatformVMAPI.buildAddValidatorTx -- stake amount must be at least \" +\n                    minStake.toString(10));\n            }\n            if (typeof delegationFee !== \"number\" ||\n                delegationFee > 100 ||\n                delegationFee < 0) {\n                throw new errors_1.DelegationFeeError(\"PlatformVMAPI.buildAddValidatorTx -- delegationFee must be a number between 0 and 100\");\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddValidatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, to, from, change, (0, helperfunctions_1.NodeIDStringToBuffer)(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, delegationFee, new bn_js_1.default(0), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Class representing an unsigned [[CreateSubnetTx]] transaction.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param subnetOwnerAddresses An array of addresses for owners of the new subnet\n         * @param subnetOwnerThreshold A number indicating the amount of signatures required to add validators to a subnet\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildCreateSubnetTx = (utxoset, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            const owners = this._cleanAddressArray(subnetOwnerAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateSubnetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, owners, subnetOwnerThreshold, this.getCreationTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * @returns the UTXOs that were rewarded after the provided transaction\"s staking or delegation period ended.\n         */\n        this.getRewardUTXOs = (txID, encoding) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getRewardUTXOs\", params);\n            return response.data.result;\n        });\n        this.blockchainID = constants_1.PlatformChainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_1.Defaults.network &&\n            this.blockchainID in constants_1.Defaults.network[`${netID}`]) {\n            const { alias } = constants_1.Defaults.network[`${netID}`][this.blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias()\n            ? this.getBlockchainAlias()\n            : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[`${i}`] === \"string\") {\n                    if (typeof this.parseAddress(addresses[`${i}`]) ===\n                        \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - Invalid address format\");\n                    }\n                    addrs.push(addresses[`${i}`]);\n                }\n                else {\n                    const bech32 = \"bech32\";\n                    addrs.push(serialization.bufferToType(addresses[`${i}`], bech32, this.core.getHRP(), chainid));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.PlatformVMAPI = PlatformVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMStandardTx = exports.EVMStandardUnsignedTx = exports.EVMStandardBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMStandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super();\n        this._typeName = \"EVMStandardBaseTx\";\n        this._typeID = undefined;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        this.blockchainID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        this.networkID.writeUInt32BE(networkID, 0);\n        this.blockchainID = blockchainID;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { networkID: serializer.encoder(this.networkID, encoding, \"Buffer\", \"decimalString\"), blockchainID: serializer.encoder(this.blockchainID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkID = serializer.decoder(fields[\"networkID\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.blockchainID = serializer.decoder(fields[\"blockchainID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        let bsize = this.networkID.length + this.blockchainID.length;\n        const barr = [this.networkID, this.blockchainID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.EVMStandardBaseTx = EVMStandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass EVMStandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecID = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecID = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecID;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n         */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecID, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = [];\n            const aIDHex = assetID.toString(\"hex\");\n            let total = new bn_js_1.default(0);\n            ins.forEach((input) => {\n                // only check StandardAmountInputs\n                if (input.getInput() instanceof input_1.StandardAmountInput &&\n                    aIDHex === input.getAssetID().toString(\"hex\")) {\n                    const i = input.getInput();\n                    total = total.add(i.getAmount());\n                }\n            });\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = [];\n            const aIDHex = assetID.toString(\"hex\");\n            let total = new bn_js_1.default(0);\n            outs.forEach((out) => {\n                // only check StandardAmountOutput\n                if (out.getOutput() instanceof output_1.StandardAmountOutput &&\n                    aIDHex === out.getAssetID().toString(\"hex\")) {\n                    const output = out.getOutput();\n                    total = total.add(output.getAmount());\n                }\n            });\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        this.codecID = codecID;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serializer.encoder(this.codecID, encoding, \"number\", \"decimalString\", 2), transaction: this.transaction.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serializer.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"number\");\n    }\n    toBuffer() {\n        const codecID = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecID, txtype, basebuff], codecID.length + txtype.length + basebuff.length);\n    }\n}\nexports.EVMStandardUnsignedTx = EVMStandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass EVMStandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== \"undefined\") {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== \"undefined\") {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { unsignedTx: this.unsignedTx.serialize(encoding), credentials: this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        this.credentials.forEach((credential) => {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(credential.getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = credential.toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        });\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.EVMStandardTx = EVMStandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will send to.\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.PlatformVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n         * Returns the id of the [[ExportTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.EXPORTTX;\n        };\n        /**\n         * Returns the destinationChain as a {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getDestinationChain = () => this.destinationChain;\n        this.destinationChain = destinationChain; //do not correct, it should bomb on toBuffer if not provided\n        if (typeof exportOuts !== \"undefined\" && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[`${i}`] instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serialization.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), exportOuts: this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serialization.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the total exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[`${i}`].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [\n            ...this.getOuts(),\n            ...this.getExportOutputs()\n        ];\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9tZXRyaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiXG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nconst SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.PlatformVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDDELEGATORTX) {\n        return new validationtx_1.AddDelegatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDVALIDATORTX) {\n        return new validationtx_1.AddValidatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.CREATESUBNETTX) {\n        return new createsubnettx_1.CreateSubnetTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.TransactionError(\"Error - SelectTxClass: unknown txtype\");\n};\nexports.SelectTxClass = SelectTxClass;\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = (0, exports.SelectTxClass)(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.transaction = (0, exports.SelectTxClass)(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(fields[\"credentials\"][`${i}`][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][`${i}`], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools\n                .copyFrom(bytes, offset, offset + 4)\n                .readUInt32BE(0);\n            offset += 4;\n            const cred = (0, credentials_1.SelectCredentialClass)(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMConstants = void 0;\nclass PlatformVMConstants {\n}\nexports.PlatformVMConstants = PlatformVMConstants;\nPlatformVMConstants.LATESTCODEC = 0;\nPlatformVMConstants.SECPFXID = 0;\nPlatformVMConstants.SECPXFEROUTPUTID = 7;\nPlatformVMConstants.SUBNETAUTHID = 10;\nPlatformVMConstants.SECPOWNEROUTPUTID = 11;\nPlatformVMConstants.STAKEABLELOCKOUTID = 22;\nPlatformVMConstants.SECPINPUTID = 5;\nPlatformVMConstants.STAKEABLELOCKINID = 21;\nPlatformVMConstants.LOCKEDSTAKEABLES = [\n    PlatformVMConstants.STAKEABLELOCKINID,\n    PlatformVMConstants.STAKEABLELOCKOUTID\n];\nPlatformVMConstants.BASETX = 0;\nPlatformVMConstants.ADDVALIDATORTX = 12;\nPlatformVMConstants.ADDSUBNETVALIDATORTX = 13;\nPlatformVMConstants.ADDDELEGATORTX = 14;\nPlatformVMConstants.CREATECHAINTX = 15;\nPlatformVMConstants.CREATESUBNETTX = 16;\nPlatformVMConstants.IMPORTTX = 17;\nPlatformVMConstants.EXPORTTX = 18;\nPlatformVMConstants.ADVANCETIMETX = 19;\nPlatformVMConstants.REWARDVALIDATORTX = 20;\nPlatformVMConstants.SECPCREDENTIAL = 9;\nPlatformVMConstants.ASSETIDLEN = 32;\nPlatformVMConstants.BLOCKCHAINIDLEN = 32;\nPlatformVMConstants.SYMBOLMAXLEN = 4;\nPlatformVMConstants.ASSETNAMELEN = 128;\nPlatformVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsTUFBYSxtQkFBbUI7O0FBQWhDLGtEQXFEQztBQXBEUSwrQkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2Qiw0QkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQixvQ0FBZ0IsR0FBVyxDQUFDLENBQUE7QUFFNUIsZ0NBQVksR0FBVyxFQUFFLENBQUE7QUFFekIscUNBQWlCLEdBQVcsRUFBRSxDQUFBO0FBRTlCLHNDQUFrQixHQUFXLEVBQUUsQ0FBQTtBQUUvQiwrQkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixxQ0FBaUIsR0FBVyxFQUFFLENBQUE7QUFFOUIsb0NBQWdCLEdBQWE7SUFDbEMsbUJBQW1CLENBQUMsaUJBQWlCO0lBQ3JDLG1CQUFtQixDQUFDLGtCQUFrQjtDQUN2QyxDQUFBO0FBRU0sMEJBQU0sR0FBVyxDQUFDLENBQUE7QUFFbEIsa0NBQWMsR0FBVyxFQUFFLENBQUE7QUFFM0Isd0NBQW9CLEdBQVcsRUFBRSxDQUFBO0FBRWpDLGtDQUFjLEdBQVcsRUFBRSxDQUFBO0FBRTNCLGlDQUFhLEdBQVcsRUFBRSxDQUFBO0FBRTFCLGtDQUFjLEdBQVcsRUFBRSxDQUFBO0FBRTNCLDRCQUFRLEdBQVcsRUFBRSxDQUFBO0FBRXJCLDRCQUFRLEdBQVcsRUFBRSxDQUFBO0FBRXJCLGlDQUFhLEdBQVcsRUFBRSxDQUFBO0FBRTFCLHFDQUFpQixHQUFXLEVBQUUsQ0FBQTtBQUU5QixrQ0FBYyxHQUFXLENBQUMsQ0FBQTtBQUUxQiw4QkFBVSxHQUFXLEVBQUUsQ0FBQTtBQUV2QixtQ0FBZSxHQUFXLEVBQUUsQ0FBQTtBQUU1QixnQ0FBWSxHQUFXLENBQUMsQ0FBQTtBQUV4QixnQ0FBWSxHQUFXLEdBQUcsQ0FBQTtBQUUxQixpQ0FBYSxHQUFXLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLUNvbnN0YW50c1xuICovXG5cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybVZNQ29uc3RhbnRzIHtcbiAgc3RhdGljIExBVEVTVENPREVDOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIFNFQ1BGWElEOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDdcblxuICBzdGF0aWMgU1VCTkVUQVVUSElEOiBudW1iZXIgPSAxMFxuXG4gIHN0YXRpYyBTRUNQT1dORVJPVVRQVVRJRDogbnVtYmVyID0gMTFcblxuICBzdGF0aWMgU1RBS0VBQkxFTE9DS09VVElEOiBudW1iZXIgPSAyMlxuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDogbnVtYmVyID0gNVxuXG4gIHN0YXRpYyBTVEFLRUFCTEVMT0NLSU5JRDogbnVtYmVyID0gMjFcblxuICBzdGF0aWMgTE9DS0VEU1RBS0VBQkxFUzogbnVtYmVyW10gPSBbXG4gICAgUGxhdGZvcm1WTUNvbnN0YW50cy5TVEFLRUFCTEVMT0NLSU5JRCxcbiAgICBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNUQUtFQUJMRUxPQ0tPVVRJRFxuICBdXG5cbiAgc3RhdGljIEJBU0VUWDogbnVtYmVyID0gMFxuXG4gIHN0YXRpYyBBRERWQUxJREFUT1JUWDogbnVtYmVyID0gMTJcblxuICBzdGF0aWMgQUREU1VCTkVUVkFMSURBVE9SVFg6IG51bWJlciA9IDEzXG5cbiAgc3RhdGljIEFERERFTEVHQVRPUlRYOiBudW1iZXIgPSAxNFxuXG4gIHN0YXRpYyBDUkVBVEVDSEFJTlRYOiBudW1iZXIgPSAxNVxuXG4gIHN0YXRpYyBDUkVBVEVTVUJORVRUWDogbnVtYmVyID0gMTZcblxuICBzdGF0aWMgSU1QT1JUVFg6IG51bWJlciA9IDE3XG5cbiAgc3RhdGljIEVYUE9SVFRYOiBudW1iZXIgPSAxOFxuXG4gIHN0YXRpYyBBRFZBTkNFVElNRVRYOiBudW1iZXIgPSAxOVxuXG4gIHN0YXRpYyBSRVdBUkRWQUxJREFUT1JUWDogbnVtYmVyID0gMjBcblxuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6IG51bWJlciA9IDlcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOiBudW1iZXIgPSAzMlxuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46IG51bWJlciA9IDRcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOiBudW1iZXIgPSAxMjhcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDogbnVtYmVyID0gMjBcbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardTx = exports.StandardUnsignedTx = exports.StandardBaseTx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst hex = \"hex\";\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\n/**\n * Class representing a base for all transactions.\n */\nclass StandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super();\n        this._typeName = \"StandardBaseTx\";\n        this._typeID = undefined;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        this.blockchainID = buffer_1.Buffer.alloc(32);\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.memo = buffer_1.Buffer.alloc(0);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo\n         */\n        this.getMemo = () => this.memo;\n        this.networkID.writeUInt32BE(networkID, 0);\n        this.blockchainID = blockchainID;\n        if (typeof memo != \"undefined\") {\n            this.memo = memo;\n        }\n        if (typeof ins !== \"undefined\" && typeof outs !== \"undefined\") {\n            this.numouts.writeUInt32BE(outs.length, 0);\n            this.outs = outs.sort(output_1.StandardTransferableOutput.comparator());\n            this.numins.writeUInt32BE(ins.length, 0);\n            this.ins = ins.sort(input_1.StandardTransferableInput.comparator());\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { networkID: serialization.encoder(this.networkID, encoding, buffer, decimalString), blockchainID: serialization.encoder(this.blockchainID, encoding, buffer, cb58), outs: this.outs.map((o) => o.serialize(encoding)), ins: this.ins.map((i) => i.serialize(encoding)), memo: serialization.encoder(this.memo, encoding, buffer, hex) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkID = serialization.decoder(fields[\"networkID\"], encoding, decimalString, buffer, 4);\n        this.blockchainID = serialization.decoder(fields[\"blockchainID\"], encoding, cb58, buffer, 32);\n        this.memo = serialization.decoder(fields[\"memo\"], encoding, hex, buffer);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        this.outs.sort(output_1.StandardTransferableOutput.comparator());\n        this.ins.sort(input_1.StandardTransferableInput.comparator());\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n        let bsize = this.networkID.length + this.blockchainID.length + this.numouts.length;\n        const barr = [this.networkID, this.blockchainID, this.numouts];\n        for (let i = 0; i < this.outs.length; i++) {\n            const b = this.outs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        barr.push(this.numins);\n        bsize += this.numins.length;\n        for (let i = 0; i < this.ins.length; i++) {\n            const b = this.ins[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        let memolen = buffer_1.Buffer.alloc(4);\n        memolen.writeUInt32BE(this.memo.length, 0);\n        barr.push(memolen);\n        bsize += 4;\n        barr.push(this.memo);\n        bsize += this.memo.length;\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardBaseTx = StandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass StandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecID = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecID = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecID;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n         */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecID, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = this.getTransaction().getIns();\n            const aIDHex = assetID.toString(\"hex\");\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < ins.length; i++) {\n                // only check StandardAmountInputs\n                if (ins[`${i}`].getInput() instanceof input_1.StandardAmountInput &&\n                    aIDHex === ins[`${i}`].getAssetID().toString(\"hex\")) {\n                    const input = ins[`${i}`].getInput();\n                    total = total.add(input.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = this.getTransaction().getTotalOuts();\n            const aIDHex = assetID.toString(\"hex\");\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < outs.length; i++) {\n                // only check StandardAmountOutput\n                if (outs[`${i}`].getOutput() instanceof output_1.StandardAmountOutput &&\n                    aIDHex === outs[`${i}`].getAssetID().toString(\"hex\")) {\n                    const output = outs[`${i}`].getOutput();\n                    total = total.add(output.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        this.codecID = codecID;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serialization.encoder(this.codecID, encoding, \"number\", \"decimalString\", 2), transaction: this.transaction.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serialization.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"number\");\n    }\n    toBuffer() {\n        const codecBuf = buffer_1.Buffer.alloc(2);\n        codecBuf.writeUInt16BE(this.transaction.getCodecID(), 0);\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecBuf, txtype, basebuff], codecBuf.length + txtype.length + basebuff.length);\n    }\n}\nexports.StandardUnsignedTx = StandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass StandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[Credential[]]]\n         */\n        this.getCredentials = () => {\n            return this.credentials;\n        };\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== \"undefined\") {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== \"undefined\") {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { unsignedTx: this.unsignedTx.serialize(encoding), credentials: this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const tx = this.unsignedTx.getTransaction();\n        const codecID = tx.getCodecID();\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        for (let i = 0; i < this.credentials.length; i++) {\n            this.credentials[`${i}`].setCodecID(codecID);\n            const credID = buffer_1.Buffer.alloc(4);\n            credID.writeUInt32BE(this.credentials[`${i}`].getCredentialID(), 0);\n            barr.push(credID);\n            bsize += credID.length;\n            const credbuff = this.credentials[`${i}`].toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        }\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.StandardTx = StandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Credential = exports.Signature = exports.SigIdx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Signature\n */\nconst nbytes_1 = require(\"./nbytes\");\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Type representing a [[Signature]] index used in [[Input]]\n */\nclass SigIdx extends nbytes_1.NBytes {\n    /**\n     * Type representing a [[Signature]] index used in [[Input]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"SigIdx\";\n        this._typeID = undefined;\n        this.source = buffer_1.Buffer.alloc(20);\n        this.bytes = buffer_1.Buffer.alloc(4);\n        this.bsize = 4;\n        /**\n         * Sets the source address for the signature\n         */\n        this.setSource = (address) => {\n            this.source = address;\n        };\n        /**\n         * Retrieves the source address for the signature\n         */\n        this.getSource = () => this.source;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { source: serialization.encoder(this.source, encoding, \"Buffer\", \"hex\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.source = serialization.decoder(fields[\"source\"], encoding, \"hex\", \"Buffer\");\n    }\n    clone() {\n        let newbase = new SigIdx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SigIdx();\n    }\n}\nexports.SigIdx = SigIdx;\n/**\n * Signature for a [[Tx]]\n */\nclass Signature extends nbytes_1.NBytes {\n    /**\n     * Signature for a [[Tx]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"Signature\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(65);\n        this.bsize = 65;\n    }\n    clone() {\n        let newbase = new Signature();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Signature();\n    }\n}\nexports.Signature = Signature;\nclass Credential extends serialization_1.Serializable {\n    constructor(sigarray = undefined) {\n        super();\n        this._typeName = \"Credential\";\n        this._typeID = undefined;\n        this.sigArray = [];\n        /**\n         * Adds a signature to the credentials and returns the index off the added signature.\n         */\n        this.addSignature = (sig) => {\n            this.sigArray.push(sig);\n            return this.sigArray.length - 1;\n        };\n        if (typeof sigarray !== \"undefined\") {\n            /* istanbul ignore next */\n            this.sigArray = sigarray;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigArray: this.sigArray.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigArray = fields[\"sigArray\"].map((s) => {\n            let sig = new Signature();\n            sig.deserialize(s, encoding);\n            return sig;\n        });\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) { }\n    fromBuffer(bytes, offset = 0) {\n        const siglen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.sigArray = [];\n        for (let i = 0; i < siglen; i++) {\n            const sig = new Signature();\n            offset = sig.fromBuffer(bytes, offset);\n            this.sigArray.push(sig);\n        }\n        return offset;\n    }\n    toBuffer() {\n        const siglen = buffer_1.Buffer.alloc(4);\n        siglen.writeInt32BE(this.sigArray.length, 0);\n        const barr = [siglen];\n        let bsize = siglen.length;\n        for (let i = 0; i < this.sigArray.length; i++) {\n            const sigbuff = this.sigArray[`${i}`].toBuffer();\n            bsize += sigbuff.length;\n            barr.push(sigbuff);\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Credential = Credential;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nconst SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.PlatformVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nexports.SelectCredentialClass = SelectCredentialClass;\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILDJDQUFpRDtBQUNqRCwwREFBcUQ7QUFDckQsK0NBQWdEO0FBRWhEOzs7Ozs7R0FNRztBQUNJLE1BQU0scUJBQXFCLEdBQUcsQ0FDbkMsTUFBYyxFQUNkLEdBQUcsSUFBVyxFQUNGLEVBQUU7SUFDZCxJQUFJLE1BQU0sS0FBSywrQkFBbUIsQ0FBQyxjQUFjLEVBQUU7UUFDakQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0tBQ25DO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxvQkFBVyxDQUFDLCtDQUErQyxDQUFDLENBQUE7QUFDeEUsQ0FBQyxDQUFBO0FBVFksUUFBQSxxQkFBcUIseUJBU2pDO0FBRUQsTUFBYSxjQUFlLFNBQVEsd0JBQVU7SUFBOUM7O1FBQ1ksY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLFlBQU8sR0FBRywrQkFBbUIsQ0FBQyxjQUFjLENBQUE7SUFzQnhELENBQUM7SUFwQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQTtRQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sT0FBZSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFXO1FBQ25CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxTQUFTLEdBQWUsSUFBQSw2QkFBcUIsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUM5RCxPQUFPLFNBQVMsQ0FBQTtJQUNsQixDQUFDO0NBQ0Y7QUF4QkQsd0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ3JlZGVudGlhbHNcbiAqL1xuXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCJcbmltcG9ydCB7IENyZWRlbnRpYWwgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzXCJcbmltcG9ydCB7IENyZWRJZEVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Vycm9yc1wiXG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tDcmVkZW50aWFsXV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGNyZWRpZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgSUQgcGFyc2VkIHByaW9yIHRvIHRoZSBieXRlcyBwYXNzZWQgaW5cbiAqXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBhbiBbW0NyZWRlbnRpYWxdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdENyZWRlbnRpYWxDbGFzcyA9IChcbiAgY3JlZGlkOiBudW1iZXIsXG4gIC4uLmFyZ3M6IGFueVtdXG4pOiBDcmVkZW50aWFsID0+IHtcbiAgaWYgKGNyZWRpZCA9PT0gUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncylcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgQ3JlZElkRXJyb3IoXCJFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWRcIilcbn1cblxuZXhwb3J0IGNsYXNzIFNFQ1BDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlNFQ1BDcmVkZW50aWFsXCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90eXBlSURcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGxldCBuZXdiYXNlOiBTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpXG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXNcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBuZXdiYXNldHg6IENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoaWQsIC4uLmFyZ3MpXG4gICAgcmV0dXJuIG5ld2Jhc2V0eFxuICB9XG59XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"../platformvm/tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.BASETX;\n        };\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.ins[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.ins[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, tx_2.SelectTxClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-RESTAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTAPI = void 0;\nconst apibase_1 = require(\"./apibase\");\nclass RESTAPI extends apibase_1.APIBase {\n    /**\n     *\n     * @param core Reference to the Avalanche instance using this endpoint\n     * @param baseURL Path of the APIs baseURL - ex: \"/ext/bc/avm\"\n     * @param contentType Optional Determines the type of the entity attached to the\n     * incoming request\n     * @param acceptType Optional Determines the type of representation which is\n     * desired on the client side\n     */\n    constructor(core, baseURL, contentType = \"application/json;charset=UTF-8\", acceptType = undefined) {\n        super(core, baseURL);\n        this.prepHeaders = (contentType, acceptType) => {\n            const headers = {};\n            if (contentType !== undefined) {\n                headers[\"Content-Type\"] = contentType;\n            }\n            else {\n                headers[\"Content-Type\"] = this.contentType;\n            }\n            if (acceptType !== undefined) {\n                headers[\"Accept\"] = acceptType;\n            }\n            else if (this.acceptType !== undefined) {\n                headers[\"Accept\"] = this.acceptType;\n            }\n            return headers;\n        };\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getHost()}:${this.core.getPort()}`,\n                responseType: \"json\"\n            };\n        };\n        this.get = (baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.get(ep, {}, headers, this.axConf());\n            return resp;\n        });\n        this.post = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.post(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        this.put = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.put(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        this.delete = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.delete(ep, {}, headers, this.axConf());\n            return resp;\n        });\n        this.patch = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.patch(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        /**\n         * Returns the type of the entity attached to the incoming request\n         */\n        this.getContentType = () => this.contentType;\n        /**\n         * Returns what type of representation is desired at the client side\n         */\n        this.getAcceptType = () => this.acceptType;\n        this.contentType = contentType;\n        this.acceptType = acceptType;\n    }\n}\nexports.RESTAPI = RESTAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IndexAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's IndexAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass IndexAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/index/X/tx\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/index/X/tx\") {\n        super(core, baseURL);\n        /**\n         * Get last accepted tx, vtx or block\n         *\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise<GetLastAcceptedResponse>.\n         */\n        this.getLastAccepted = (encoding = \"cb58\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getLastAccepted\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get container by index\n         *\n         * @param index\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise<GetContainerByIndexResponse>.\n         */\n        this.getContainerByIndex = (index = \"0\", encoding = \"cb58\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                index,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerByIndex\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get contrainer by ID\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise<GetContainerByIDResponse>.\n         */\n        this.getContainerByID = (containerID = \"0\", encoding = \"cb58\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerByID\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get container range\n         *\n         * @param startIndex\n         * @param numToFetch\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise<GetContainerRangeResponse>.\n         */\n        this.getContainerRange = (startIndex = 0, numToFetch = 100, encoding = \"cb58\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                startIndex,\n                numToFetch,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerRange\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get index by containerID\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise<GetIndexResponse>.\n         */\n        this.getIndex = (containerID = \"\", encoding = \"cb58\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getIndex\", params);\n                return response.data.result.index;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Check if container is accepted\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise<GetIsAcceptedResponse>.\n         */\n        this.isAccepted = (containerID = \"\", encoding = \"cb58\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.isAccepted\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n    }\n}\nexports.IndexAPI = IndexAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeystoreAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's KeystoreAPI.\n *\n * **WARNING**: The KeystoreAPI is to be used by the node-owner as the data is stored locally on the node. Do not trust the root user. If you are not the node-owner, do not use this as your wallet.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass KeystoreAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/keystore\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/keystore\") {\n        super(core, baseURL);\n        /**\n         * Creates a user in the node's database.\n         *\n         * @param username Name of the user to create\n         * @param password Password for the user\n         *\n         * @returns Promise for a boolean with true on success\n         */\n        this.createUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.createUser\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Exports a user. The user can be imported to another node with keystore.importUser .\n         *\n         * @param username The name of the user to export\n         * @param password The password of the user to export\n         *\n         * @returns Promise with a string importable using importUser\n         */\n        this.exportUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.exportUser\", params);\n            return response.data.result.user\n                ? response.data.result.user\n                : response.data.result;\n        });\n        /**\n         * Imports a user file into the node's user database and assigns it to a username.\n         *\n         * @param username The name the user file should be imported into\n         * @param user cb58 serialized string represetning a user\"s data\n         * @param password The user\"s password\n         *\n         * @returns A promise with a true-value on success.\n         */\n        this.importUser = (username, user, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                user,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.importUser\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Lists the names of all users on the node.\n         *\n         * @returns Promise of an array with all user names.\n         */\n        this.listUsers = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"keystore.listUsers\");\n            return response.data.result.users;\n        });\n        /**\n         * Deletes a user in the node's database.\n         *\n         * @param username Name of the user to delete\n         * @param password Password for the user\n         *\n         * @returns Promise for a boolean with true on success\n         */\n        this.deleteUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.deleteUser\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n    }\n}\nexports.KeystoreAPI = KeystoreAPI;\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":""}