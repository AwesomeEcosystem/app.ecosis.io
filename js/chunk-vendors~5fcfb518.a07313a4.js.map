{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/avm/utxos.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/operationtx.js","webpack:///./node_modules/avalanche/dist/apis/evm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/tx.js","webpack:///./node_modules/avalanche/dist/apis/evm/tx.js","webpack:///./node_modules/avalanche/dist/apis/avm/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/ops.js","webpack:///./node_modules/avalanche/dist/apis/evm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/avm/createassettx.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/avalanche/dist/apis/avm/genesisasset.js","webpack:///./node_modules/avalanche/dist/apis/avm/initialstates.js","webpack:///./node_modules/array-uniq/index.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/avalanche/dist/apis/avm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/avm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/auth/api.js","webpack:///./node_modules/avalanche/dist/apis/auth/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/outputs.js","webpack:///./node_modules/avalanche/dist/apis/evm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/avm/minterset.js","webpack:///./node_modules/asn1.js/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/avalanche/dist/apis/evm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/avm/genesisdata.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/avalanche/dist/apis/avm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/evm/outputs.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/evm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/api.js","webpack:///./node_modules/avalanche/dist/apis/evm/utxos.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","UTXOSet","AssetAmountDestination","UTXO","buffer_1","bintools_1","bn_js_1","outputs_1","constants_1","tx_1","inputs_1","ops_1","helperfunctions_1","initialstates_1","utxos_1","createassettx_1","operationtx_1","basetx_1","exporttx_1","importtx_1","constants_2","assetamount_1","serialization_1","errors_1","bintools","default","getInstance","serialization","Serialization","StandardUTXO","super","arguments","_typeName","_typeID","undefined","fields","encoding","deserialize","output","SelectOutputClass","bytes","offset","codecID","copyFrom","txid","outputidx","assetID","outputid","readUInt32BE","fromBuffer","serialized","cb58Decode","cb58Encode","toBuffer","utxo","AVMConstants","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getMinimumSpendable","aad","asOf","UnixNow","locktime","threshold","utxoArray","getAllUTXOs","outids","i","length","canComplete","u","assetKey","getAssetID","toString","fromAddresses","getSenders","getOutput","AmountOutput","assetExists","meetsThreshold","am","getAssetAmount","isFinished","uout","getOutputID","amount","getAmount","spendAmount","getTxID","getOutputIdx","input","SECPTransferInput","xferin","TransferableInput","spenders","getSpenders","j","idx","getAddressIdx","AddressError","getInput","addSignatureIdx","addInput","InsufficientFundsError","amounts","getAmounts","zero","getAssetIDString","gt","spendout","getDestinations","xferout","TransferableOutput","addOutput","change","getChange","changeout","getChangeAddresses","chgxferout","addChange","buildBaseTx","networkID","blockchainID","toAddresses","changeAddresses","fee","feeAssetID","memo","ThresholdError","eq","addAssetAmount","_feeCheck","ins","outs","success","getInputs","getAllOutputs","baseTx","BaseTx","UnsignedTx","buildCreateAssetTx","initialState","name","symbol","denomination","mintOutputs","SECPMintOutput","SECPMintOutputError","CAtx","CreateAssetTx","buildSECPMintTx","mintOwner","transferOwner","mintUTXOID","ops","mintOp","SECPMintOperation","getUTXO","UTXOError","SECPMINTOUTPUTID","out","Error","transferableOperation","TransferableOperation","push","operationTx","OperationTx","buildCreateNFTAssetTx","minterSets","InitialStates","nftMintOutput","NFTMintOutput","getMinters","getThreshold","NFTFXID","buildCreateNFTMintTx","owners","utxoids","groupID","payload","nftMintOperation","NFTMintOperation","buildNFTTransferTx","outbound","NFTTransferOutput","getGroupID","getPayload","op","NFTTransferOperation","xferop","OpTx","buildImportTx","atomics","sourceChain","clone","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","lt","add","sub","from","getAddresses","feeRemaining","importTx","ImportTx","buildExportTx","destinationChain","exportouts","PlatformChainID","getChangeOutputs","getOutputs","exportTx","ExportTx","utxos","utxoid","utxoidCleaned","decoder","addressUTXOs","address","addressCleaned","utxobalance","utxovar","args","newset","create","allUTXOs","addArray","Buffer","constants","_reverse","map","res","keys","forEach","key","der","credentials_1","credentials_2","input_1","serializer","EVMBaseTx","DefaultNetworkID","alloc","sourceChainID","EVMConstants","IMPORTTX","numIns","numOuts","getTxType","getSourceChain","inputsPassed","outputsPassed","Array","isArray","importIn","TransferableInputError","EVMOutput","EVMOutputError","sort","comparator","validateOuts","serialize","assign","encoder","ii","writeUInt32BE","anIn","anOut","ChainIdError","barr","bsize","concat","newImportTx","msg","kc","sigs","sign","cred","SelectCredentialClass","getCredentialID","sigidxs","getSigIdxs","sigidx","keypair","getKey","getSource","signval","sig","Signature","addSignature","seenAssetSends","Map","evmOutput","getAddressString","assetId","has","assetsSentToAddress","get","includes","errorMessage","set","selectedNetwork","getNetworkID","feeDiff","avaxAssetID","Defaults","network","X","StandardAmountInput","ui","iadd","isub","EVMFeeError","_codecID","OPERATIONTX","OPERATIONTX_CODECONE","numOps","OperationError","o","CodecIdError","getOperation","newbase","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","EVMAPI","jrpcapi_1","keychain_1","utils_1","JRPCAPI","core","baseURL","keychain","KeyChain","blockchainAlias","AVAXAssetID","txFee","getBlockchainAlias","netID","alias","setBlockchainAlias","getBlockchainID","refreshBlockchainID","C","parseAddress","addr","ADDRESSLENGTH","addressFromBuffer","chainID","type","bufferToType","getHRP","getAssetDescription","asset","params","tmpBaseURL","getBaseURL","setBaseURL","response","callMethod","data","parseInt","getAVAXAssetID","refresh","PrimaryAssetAlias","setAVAXAssetID","getDefaultTxFee","getAssetBalance","hexAddress","blockHeight","method","path","getAtomicTxStatus","txID","status","getAtomicTx","tx","getTxFee","export","username","password","to","exportAVAX","getUTXOs","addresses","limit","startIndex","import","importAVAX","importKey","privateKey","issueTx","Transaction","txobj","Tx","TransactionError","exportKey","utxoset","toAddress","ownerAddresses","_cleanAddressArray","a","stringToAddress","srcChain","utxoResponse","atomicUTXOs","avaxAssetIDBuf","NoAtomicUTXOsError","builtUnsignedTx","fromAddressHex","fromAddressBech","nonce","prefixes","split","assetDescription","evmInputs","evmInput","EVMInput","evmAVAXInput","evmANTInput","exportedOuts","secpTransferOutput","SECPTransferOutput","transferableOutput","unsignedTx","keyChain","newKeyChain","getBaseFee","getMaxPriorityFeePerGas","caller","addrs","chainid","decoders","pem","SelectTxClass","create_hash_1","txtype","BASETX","CREATEASSETTX","EXPORTTX","StandardUnsignedTx","transaction","readUInt16BE","txbuff","update","digest","StandardTx","credentials","numcreds","credid","evmtx_1","txTypeID","EVMStandardUnsignedTx","EVMStandardTx","NFTCredential","SECPCredential","SECPCREDENTIAL","SECPCREDENTIAL_CODECONE","NFTCREDENTIAL","NFTCREDENTIAL_CODECONE","CredIdError","Credential","id","newbasetx","encoders","AVMAPI","payload_1","output_1","creationTxFee","netid","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","getBurn","lte","ONEAVAX","mul","getBalance","includePartial","createAddress","createFixedCapAsset","initialHolders","createVariableCapAsset","mint","minters","amnt","listAddresses","getAllBalances","balances","getTx","getTxStatus","persistOpts","db","getName","selfArray","utxoSet","mergeByRule","getMergeRule","getAllUTXOStrings","getOverwrite","PayloadBase","GooseEggCheckError","utxoidArray","join","initialStates","SYMBOLMAXLEN","SymbolError","ASSETNAMELEN","NameError","OutputOwners","signTx","send","changeAddr","sendMultiple","sendOutputs","sOutputs","outputs","buildGenesis","genesisData","inherits","Node","DEREncoder","entity","enc","tree","DERNode","_init","body","parent","call","two","num","encodeTag","tag","primitive","cls","reporter","tagByName","hasOwnProperty","error","tagClassByName","module","prototype","encode","_encode","_encodeComposite","content","encodedTag","header","_createEncoderBuffer","lenOctets","_encodeStr","str","unused","buf","writeUInt16BE","charCodeAt","_isNumstr","_isPrintstr","test","_encodeObjid","values","relative","slice","JSON","stringify","splice","size","ident","objid","_encodeTime","time","date","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_encodeNull","_encodeInt","isBuffer","numArray","toArray","unshift","copy","_encodeBool","_use","obj","_getEncoder","_skipDefault","dataBuffer","state","_baseState","defaultBuffer","_encodeValue","base","Reporter","DecoderBuffer","EncoderBuffer","AmountInput","SelectInputClass","inputID","SECPINPUTID","InputIdError","StandardTransferableInput","getCost","numSigs","costPerSignature","ASSETIDLEN","inputid","newout","nonceValue","sigCount","sigIdxs","addressIdx","SigIdx","b","setSource","getNonce","n","fromBNToBuffer","superbuff","bufferToB58","newEVMInput","SECPINPUTID_CODECONE","cb58","buffer","IMPORTTX_CODECONE","UTXOID","Operation","SelectOperationClass","nbytes_1","hex","decimalString","opid","SECPMINTOPID","SECPMINTOPID_CODECONE","NFTMINTOPID","NFTMINTOPID_CODECONE","NFTXFEROPID","NFTXFEROPID_CODECONE","InvalidOperationIdError","Serializable","s","sidx","sigbuff","aoutid","getOperationID","abuff","boutid","bbuff","asort","bsort","compare","operation","utxoIDs","getUTXOIDs","fromString","numutxoIDs","mintOutput","transferOutput","transferOutputs","mintoutBuff","transferOutBuff","outputOwners","getPayloadBuffer","payloadlen","getOutputOwners","oo","payloadLen","numoutputs","outputOwner","outputownerslen","outbuff","NBytes","utxoidbuff","b58ToBuffer","validateChecksum","newbuff","ChecksumError","getSize","credential","utf8","CREATEASSETTX_CODECONE","getInitialStates","getSymbol","getDenomination","readUInt8","getDenominationBuffer","writeUInt8","namesize","symsize","inits","initstatebuff","namebuff","write","symbuff","options","item","isEncoderBuffer","byteLength","isDecoderBuffer","isCompatible","constructor","save","restore","isEmpty","skip","raw","fail","_reporterState","GenesisAsset","assetAlias","getAssetAlias","assetAliasSize","assetAliasbuffSize","assetAliasbuff","networkIDBuff","toNumber","getMemo","memobuffSize","namebuffSize","symbolbuffSize","symbolbuff","denominationbuffSize","fxs","flatfxs","fxid","unflat","SECPFXID","klen","klennum","fxidbuff","statelenbuff","statelen","buff","k","Output","writeInt32BE","uniqNoSet","arr","ret","indexOf","uniqSet","seen","Set","filter","el","uniqSetWithForEach","doesForEachActuallyWork","global","asn1","bignum","define","assert","tags","methods","overrided","children","reverseArgs","choice","optional","any","use","useDecoder","explicit","implicit","contains","_wrap","stateProps","cstate","prop","child","equal","_useArgs","arg","def","val","newKey","_decode","wrapResult","prevObj","present","prevKey","enterKey","_peekTag","isError","_decodeGeneric","_decodeChoice","enterObject","_decodeTag","start","track","_getUse","leaveObject","exitKey","leaveKey","_decodeList","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeBool","_decodeInt","match","some","node","_encodeChoice","_encodePrimitive","PEMEncoder","p","label","reverse","tagClass","0","1","2","3","KeyPair","secp256k1_1","SECP256k1KeyPair","hrp","addressFromPublicKey","pubk","getChainID","setChainID","setHRP","generateKey","newkp","getPrivateKey","SECP256k1KeyChain","makeKey","addKey","privk","pk","getAddress","newkc","DERDecoder","PEMDecoder","decode","lines","toUpperCase","re","end","base64","replace","SECPMINTOUTPUTID_CODECONE","SECPXFEROUTPUTID","SECPXFEROUTPUTID_CODECONE","NFTXFEROUTPUTID","NFTXFEROUTPUTID_CODECONE","NFTMINTOUTPUTID","NFTMINTOUTPUTID_CODECONE","BASETX_CODECONE","EXPORTTX_CODECONE","BLOCKCHAINIDLEN","AuthAPI","newToken","endpoints","token","revokeToken","changePassword","oldPassword","newPassword","__createBinding","m","k2","enumerable","__exportStar","NFTOutput","OutputIdError","StandardTransferableOutput","StandardAmountOutput","BaseNFTOutput","utxobuff","sizePayload","psize","inputs","exportedOutputs","numInputs","numExportedOutputs","getDestinationChain","getExportedOutputs","EVMInputError","exportedOutput","TransferableOutputError","eo","MinterSet","_cleanAddresses","ctor","superCtor","super_","TempCtor","BN","number","endian","isBN","negative","words","red","wordSize","window","parseHex4Bits","string","index","c","parseHexByte","lowerBound","r","parseBase","len","Math","min","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","ceil","w","off","strip","parseLength","limbLen","limbPow","total","word","imuln","_iaddn","pow","dest","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","self","lo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toJSON","toArrayLike","ArrayType","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","gte","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","_strip","outLen","prev","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","EVMStandardBaseTx","newEVMBaseTx","GenesisData","_1","genesisAssets","getGenesisAssets","genesisAsset","numGenesisAssets","assetCount","codecbuffSize","numAssetsbuffSize","derDecodeTag","oct","tagStr","derDecodeLen","decodedTag","_skipUntilEnd","possibleEnd","String","fromCharCode","numstr","printstr","identifiers","subident","first","second","year","mon","day","hour","sec","UTC","_getDecoder","errors","ReporterError","rethrow","pathLen","now","err","inherited","elem","message","stack","partial","captureStackTrace","exportOuts","getOuts","getExportOutputs","outputID","amountValue","prefix","substring","newEVMOutput","sorta","sortb","equals","api","Entity","_createNamed","Base","Generated","_initNamed","tx_2","display","StandardBaseTx","newOut","newIn","numouts","numins","outcount","incount","memolen","AdminAPI","endpoint","aliasChain","chain","getChainAliases","aliases","lockProfile","memoryProfile","startCPUProfiler","stopCPUProfiler","spender","atomic","assetIDBuf","FeeAssetError"],"mappings":"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","file":"js/chunk-vendors~5fcfb518.a07313a4.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst inputs_1 = require(\"./inputs\");\nconst ops_1 = require(\"./ops\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst initialstates_1 = require(\"./initialstates\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst basetx_1 = require(\"./basetx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst importtx_1 = require(\"./importtx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, outputs_1.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, outputs_1.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[`${i}`];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput &&\n                    aad.assetExists(assetKey) &&\n                    u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[`${assetKey}`] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[`${j}`]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such \" +\n                                    `address in output: ${spenders[`${j}`]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[`${j}`]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) &&\n                        !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`)*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new errors_1.InsufficientFundsError(\"Error - UTXOSet.getMinimumSpendable: insufficient \" +\n                    \"funds to create the transaction\");\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[`${i}`].getAssetIDString();\n                const amount = amounts[`${i}`].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[`${i}`].getChange();\n                if (change.gt(zero)) {\n                    const changeout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new errors_1.ThresholdError(\"Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses\");\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkID, blockchainID, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateAssetTx = (networkID, blockchainID, fromAddresses, changeAddresses, initialState, name, symbol, denomination, mintOutputs = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof mintOutputs !== \"undefined\") {\n                for (let i = 0; i < mintOutputs.length; i++) {\n                    if (mintOutputs[`${i}`] instanceof outputs_1.SECPMintOutput) {\n                        initialState.addOutput(mintOutputs[`${i}`]);\n                    }\n                    else {\n                        throw new errors_1.SECPMintOutputError(\"Error - UTXOSet.buildCreateAssetTx: A submitted mintOutput was not of type SECPMintOutput\");\n                    }\n                }\n            }\n            let CAtx = new createassettx_1.CreateAssetTx(networkID, blockchainID, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned Secp mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param mintOwner A [[SECPMintOutput]] which specifies the new set of minters\n         * @param transferOwner A [[SECPTransferOutput]] which specifies where the minted tokens will go\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param mintUTXOID The UTXOID for the [[SCPMintOutput]] being spent to produce more tokens\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.buildSECPMintTx = (networkID, blockchainID, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let mintOp = new ops_1.SECPMintOperation(mintOwner, transferOwner);\n            let utxo = this.getUTXO(mintUTXOID);\n            if (typeof utxo === \"undefined\") {\n                throw new errors_1.UTXOError(\"Error - UTXOSet.buildSECPMintTx: UTXOID not found\");\n            }\n            if (utxo.getOutput().getOutputID() !== constants_1.AVMConstants.SECPMINTOUTPUTID) {\n                throw new errors_1.SECPMintOutputError(\"Error - UTXOSet.buildSECPMintTx: UTXO is not a SECPMINTOUTPUTID\");\n            }\n            let out = utxo.getOutput();\n            let spenders = out.getSpenders(fromAddresses, asOf);\n            for (let j = 0; j < spenders.length; j++) {\n                let idx = out.getAddressIdx(spenders[`${j}`]);\n                if (idx == -1) {\n                    /* istanbul ignore next */\n                    throw new Error(\"Error - UTXOSet.buildSECPMintTx: no such address in output\");\n                }\n                mintOp.addSignatureIdx(idx, spenders[`${j}`]);\n            }\n            let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), [`${mintUTXOID}`], mintOp);\n            ops.push(transferableOperation);\n            let operationTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param minterSets The minters and thresholds required to mint this nft asset\n         * @param name String for the descriptive name of the nft asset\n         * @param symbol String for the ticker symbol of the nft asset\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting mint output\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateNFTAssetTx = (networkID, blockchainID, fromAddresses, changeAddresses, minterSets, name, symbol, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let initialState = new initialstates_1.InitialStates();\n            for (let i = 0; i < minterSets.length; i++) {\n                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[`${i}`].getMinters(), locktime, minterSets[`${i}`].getThreshold());\n                initialState.addOutput(nftMintOutput, constants_1.AVMConstants.NFTFXID);\n            }\n            let denomination = 0; // NFTs are non-fungible\n            let CAtx = new createassettx_1.CreateAssetTx(networkID, blockchainID, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned NFT mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param owners An array of [[OutputOwners]] who will be given the NFTs.\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param utxoids An array of strings for the NFTs being transferred\n         * @param groupID Optional. The group this NFT is issued to.\n         * @param payload Optional. Data for NFT Payload.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateNFTMintTx = (networkID, blockchainID, owners, fromAddresses, changeAddresses, utxoids, groupID = 0, payload = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, owners);\n            for (let i = 0; i < utxoids.length; i++) {\n                let utxo = this.getUTXO(utxoids[`${i}`]);\n                let out = utxo.getOutput();\n                let spenders = out.getSpenders(fromAddresses, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    let idx;\n                    idx = out.getAddressIdx(spenders[`${j}`]);\n                    if (idx == -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildCreateNFTMintTx: no such address in output\");\n                    }\n                    nftMintOperation.addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);\n                ops.push(transferableOperation);\n            }\n            let operationTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n         * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT\n         * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param utxoids An array of strings for the NFTs being transferred\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildNFTTransferTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, utxoids, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const ops = [];\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxo = this.getUTXO(utxoids[`${i}`]);\n                const out = utxo.getOutput();\n                const spenders = out.getSpenders(fromAddresses, asOf);\n                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);\n                const op = new ops_1.NFTTransferOperation(outbound);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = out.getAddressIdx(spenders[`${j}`]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildNFTTransferTx: \" +\n                            `no such address in output: ${spenders[`${j}`]}`);\n                    }\n                    op.addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[`${i}`]], op);\n                ops.push(xferop);\n            }\n            const OpTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(OpTx);\n        };\n        /**\n         * Creates an unsigned ImportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param importIns An array of [[TransferableInput]]s being imported\n         * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[`${i}`];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[`${j}`]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such \" +\n                            `address in output: ${spenders[`${j}`]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n         * Creates an unsigned ExportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildExportTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = new UTXO();\n            utxos[`${utxoidCleaned}`].deserialize(fields[\"utxos\"][`${utxoid}`], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serialization.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][`${address}`]) {\n                let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serialization.decoder(fields[\"addressUTXOs\"][`${address}`][`${utxoid}`], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === \"string\") {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) &&\n            feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ImportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst input_1 = require(\"../../common/input\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param sourceChainID Optional chainID for the source inputs to import. Default Buffer.alloc(32, 16)\n     * @param importIns Optional array of [[TransferableInput]]s used in the transaction\n     * @param outs Optional array of the [[EVMOutput]]s\n     * @param fee Optional the fee as a BN\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), sourceChainID = buffer_1.Buffer.alloc(32, 16), importIns = undefined, outs = undefined, fee = new bn_js_1.default(0)) {\n        super(networkID, blockchainID);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.EVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.outs = [];\n        /**\n         * Returns the id of the [[ImportTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChainID;\n        let inputsPassed = false;\n        let outputsPassed = false;\n        if (typeof importIns !== \"undefined\" &&\n            Array.isArray(importIns) &&\n            importIns.length > 0) {\n            importIns.forEach((importIn) => {\n                if (!(importIn instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            });\n            inputsPassed = true;\n            this.importIns = importIns;\n        }\n        if (typeof outs !== \"undefined\" && Array.isArray(outs) && outs.length > 0) {\n            outs.forEach((out) => {\n                if (!(out instanceof outputs_1.EVMOutput)) {\n                    throw new errors_1.EVMOutputError(\"Error - ImportTx.constructor: invalid EVMOutput in array parameter 'outs'\");\n                }\n            });\n            if (outs.length > 1) {\n                outs = outs.sort(outputs_1.EVMOutput.comparator());\n            }\n            outputsPassed = true;\n            this.outs = outs;\n        }\n        if (inputsPassed && outputsPassed) {\n            this.validateOuts(fee);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serializer.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serializer.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it,\n     * populates the class, and returns the length of the [[ImportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n     * @param offset A number representing the byte offset. Defaults to 0.\n     *\n     * @returns The length of the raw [[ImportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.EVMOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.outs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        this.numOuts.writeUInt32BE(this.outs.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        let bsize = super.toBuffer().length + this.sourceChain.length + this.numIns.length;\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        this.importIns.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numOuts.length;\n        barr.push(this.numOuts);\n        this.outs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns an array of [[TransferableInput]]s in this transaction.\n     */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n     * Returns an array of [[EVMOutput]]s in this transaction.\n     */\n    getOuts() {\n        return this.outs;\n    }\n    clone() {\n        let newImportTx = new ImportTx();\n        newImportTx.fromBuffer(this.toBuffer());\n        return newImportTx;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        this.importIns.forEach((importIn) => {\n            const cred = (0, credentials_1.SelectCredentialClass)(importIn.getInput().getCredentialID());\n            const sigidxs = importIn.getInput().getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            sigs.push(cred);\n        });\n        return sigs;\n    }\n    validateOuts(fee) {\n        // This Map enforces uniqueness of pair(address, assetId) for each EVMOutput.\n        // For each imported assetID, each ETH-style C-Chain address can\n        // have exactly 1 EVMOutput.\n        // Map(2) {\n        //   '0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC' => [\n        //     'FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z',\n        //     'F4MyJcUvq3Rxbqgd4Zs8sUpvwLHApyrp4yxJXe2bAV86Vvp38'\n        //   ],\n        //   '0xecC3B2968B277b837a81A7181e0b94EB1Ca54EdE' => [\n        //     'FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z',\n        //     '2Df96yHyhNc3vooieNNhyKwrjEfTsV2ReMo5FKjMpr8vwN4Jqy',\n        //     'SfSXBzDb9GZ9R2uH61qZKe8nxQHW9KERW9Kq9WRe4vHJZRN3e'\n        //   ]\n        // }\n        const seenAssetSends = new Map();\n        this.outs.forEach((evmOutput) => {\n            const address = evmOutput.getAddressString();\n            const assetId = bintools.cb58Encode(evmOutput.getAssetID());\n            if (seenAssetSends.has(address)) {\n                const assetsSentToAddress = seenAssetSends.get(address);\n                if (assetsSentToAddress.includes(assetId)) {\n                    const errorMessage = `Error - ImportTx: duplicate (address, assetId) pair found in outputs: (0x${address}, ${assetId})`;\n                    throw new errors_1.EVMOutputError(errorMessage);\n                }\n                assetsSentToAddress.push(assetId);\n            }\n            else {\n                seenAssetSends.set(address, [assetId]);\n            }\n        });\n        // make sure this transaction pays the required avax fee\n        const selectedNetwork = this.getNetworkID();\n        const feeDiff = new bn_js_1.default(0);\n        const avaxAssetID = constants_2.Defaults.network[`${selectedNetwork}`].X.avaxAssetID;\n        // sum incoming AVAX\n        this.importIns.forEach((input) => {\n            // only check StandardAmountInputs\n            if (input.getInput() instanceof input_1.StandardAmountInput &&\n                avaxAssetID === bintools.cb58Encode(input.getAssetID())) {\n                const ui = input.getInput();\n                const i = ui;\n                feeDiff.iadd(i.getAmount());\n            }\n        });\n        // subtract all outgoing AVAX\n        this.outs.forEach((evmOutput) => {\n            if (avaxAssetID === bintools.cb58Encode(evmOutput.getAssetID())) {\n                feeDiff.isub(evmOutput.getAmount());\n            }\n        });\n        if (feeDiff.lt(fee)) {\n            const errorMessage = `Error - ${fee} nAVAX required for fee and only ${feeDiff} nAVAX provided`;\n            throw new errors_1.EVMFeeError(errorMessage);\n        }\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-OperationTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst ops_1 = require(\"./ops\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Operation transaction.\n */\nclass OperationTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Operation transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param ops Array of [[Operation]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"OperationTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.OPERATIONTX\n            : constants_1.AVMConstants.OPERATIONTX_CODECONE;\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.ops = [];\n        /**\n         * Returns the id of the [[OperationTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof ops !== \"undefined\" && Array.isArray(ops)) {\n            for (let i = 0; i < ops.length; i++) {\n                if (!(ops[`${i}`] instanceof ops_1.TransferableOperation)) {\n                    throw new errors_1.OperationError(`Error - OperationTx.constructor: invalid op in array parameter ${ops}`);\n                }\n            }\n            this.ops = ops;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { ops: this.ops.map((o) => o.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.ops = fields[\"ops\"].map((o) => {\n            let op = new ops_1.TransferableOperation();\n            op.deserialize(o, encoding);\n            return op;\n        });\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n    }\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - OperationTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.OPERATIONTX\n                : constants_1.AVMConstants.OPERATIONTX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]\n     *\n     * @returns The length of the raw [[OperationTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOps = this.numOps.readUInt32BE(0);\n        for (let i = 0; i < numOps; i++) {\n            const op = new ops_1.TransferableOperation();\n            offset = op.fromBuffer(bytes, offset);\n            this.ops.push(op);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].\n     */\n    toBuffer() {\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n        let barr = [super.toBuffer(), this.numOps];\n        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());\n        for (let i = 0; i < this.ops.length; i++) {\n            barr.push(this.ops[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableOperation]]s in this transaction.\n     */\n    getOperations() {\n        return this.ops;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.ops.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.ops[`${i}`].getOperation().getCredentialID());\n            const sigidxs = this.ops[`${i}`].getOperation().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        const newbase = new OperationTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new OperationTx(...args);\n    }\n}\nexports.OperationTx = OperationTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMAPI = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\nconst constants_2 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst outputs_1 = require(\"./outputs\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node's EVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass EVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/bc/C/avax\" as the path to blockchain's baseURL\n     * @param blockchainID The Blockchain's ID. Defaults to an empty string: \"\"\n     */\n    constructor(core, baseURL = \"/ext/bc/C/avax\", blockchainID = \"\") {\n        super(core, baseURL);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = \"\";\n        this.blockchainAlias = undefined;\n        this.AVAXAssetID = undefined;\n        this.txFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netID = this.core.getNetworkID();\n                if (netID in constants_1.Defaults.network &&\n                    this.blockchainID in constants_1.Defaults.network[`${netID}`]) {\n                    this.blockchainAlias =\n                        constants_1.Defaults.network[`${netID}`][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns A boolean if the blockchainID was successfully refreshed.\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netID = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" &&\n                typeof constants_1.Defaults.network[`${netID}`] !== \"undefined\") {\n                this.blockchainID = constants_1.Defaults.network[`${netID}`].C.blockchainID; //default to C-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.EVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainID = this.getBlockchainAlias()\n                ? this.getBlockchainAlias()\n                : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainID);\n        };\n        /**\n         * Retrieves an assets name and symbol.\n         *\n         * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n         *\n         * @returns Returns a Promise<Asset> with keys \"name\", \"symbol\", \"assetID\" and \"denomination\".\n         */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset\n            };\n            const tmpBaseURL = this.getBaseURL();\n            // set base url to get asset description\n            this.setBaseURL(\"/ext/bc/X\");\n            const response = yield this.callMethod(\"avm.getAssetDescription\", params);\n            // set base url back what it originally was\n            this.setBaseURL(tmpBaseURL);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10)\n            };\n        });\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === \"undefined\" || refresh) {\n                const asset = yield this.getAssetDescription(constants_1.PrimaryAssetAlias);\n                this.AVAXAssetID = asset.assetID;\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific AVAX AssetID\n         *\n         * @param avaxAssetID A cb58 string or Buffer representing the AVAX AssetID\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.setAVAXAssetID = (avaxAssetID) => {\n            if (typeof avaxAssetID === \"string\") {\n                avaxAssetID = bintools.cb58Decode(avaxAssetID);\n            }\n            this.AVAXAssetID = avaxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"C\"][\"txFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * returns the amount of [assetID] for the given address in the state of the given block number.\n         * \"latest\", \"pending\", and \"accepted\" meta block numbers are also allowed.\n         *\n         * @param hexAddress The hex representation of the address\n         * @param blockHeight The block height\n         * @param assetID The asset ID\n         *\n         * @returns Returns a Promise<object> containing the balance\n         */\n        this.getAssetBalance = (hexAddress, blockHeight, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = [hexAddress, blockHeight, assetID];\n            const method = \"eth_getAssetBalance\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data;\n        });\n        /**\n         * Returns the status of a provided atomic transaction ID by calling the node's `getAtomicTxStatus` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getAtomicTxStatus = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"avax.getAtomicTxStatus\", params);\n            return response.data.result.status\n                ? response.data.result.status\n                : response.data.result;\n        });\n        /**\n         * Returns the transaction data of a provided transaction ID by calling the node's `getAtomicTx` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getAtomicTx = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"avax.getAtomicTx\", params);\n            return response.data.result.tx;\n        });\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from the C-Chain to an account on the X-Chain.\n         *\n         * After calling this method, you must call the X-Chain’s import method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the X-Chain account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The account on the X-Chain to send the AVAX to.\n         * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         *\n         * @returns String representing the transaction id\n         */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n                assetID\n            };\n            const response = yield this.callMethod(\"avax.export\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Send AVAX from the C-Chain to an account on the X-Chain.\n         *\n         * After calling this method, you must call the X-Chain’s importAVAX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the X-Chain account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The account on the X-Chain to send the AVAX to.\n         * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns String representing the transaction id\n         */\n        this.exportAVAX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avax.exportAVAX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist\n         * from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"avax.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            const data = response.data.result.utxos;\n            utxos.addArray(data, false);\n            response.data.result.utxos = utxos;\n            return response.data.result;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"X\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avax.import\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Send AVAX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the AVAX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportAVAX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avax.importAVAX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm\"s format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"avax.importKey\", params);\n            return response.data.result.address\n                ? response.data.result.address\n                : response.data.result;\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - avax.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString()\n            };\n            const response = yield this.callMethod(\"avax.issueTx\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key and private key hex as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"avax.exportKey\", params);\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddress The address to send the funds\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, toAddress, ownerAddresses, sourceChain, fromAddresses, fee = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"string\") {\n                // if there is a sourceChain passed in and it's a string then save the string value and cast the original\n                // variable from a string to a Buffer\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (typeof sourceChain === \"undefined\" ||\n                !(sourceChain instanceof buffer_1.Buffer)) {\n                // if there is no sourceChain passed in or the sourceChain is any data type other than a Buffer then throw an error\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildImportTx: sourceChain is undefined or invalid sourceChain type.\");\n            }\n            const utxoResponse = yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined);\n            const atomicUTXOs = utxoResponse.utxos;\n            const networkID = this.core.getNetworkID();\n            const avaxAssetID = constants_1.Defaults.network[`${networkID}`].X.avaxAssetID;\n            const avaxAssetIDBuf = bintools.cb58Decode(avaxAssetID);\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new errors_1.NoAtomicUTXOsError(\"Error - EVMAPI.buildImportTx: no atomic utxos to import\");\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(networkID, bintools.cb58Decode(this.blockchainID), toAddress, atomics, sourceChain, fee, avaxAssetIDBuf);\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (amount, assetID, destinationChain, fromAddressHex, fromAddressBech, toAddresses, nonce = 0, locktime = new bn_js_1.default(0), threshold = 1, fee = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const prefixes = {};\n            toAddresses.map((address) => {\n                prefixes[address.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - EVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain);\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Invalid destinationChain type\");\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            const assetDescription = yield this.getAssetDescription(\"AVAX\");\n            let evmInputs = [];\n            if (bintools.cb58Encode(assetDescription.assetID) === assetID) {\n                const evmInput = new inputs_1.EVMInput(fromAddressHex, amount.add(fee), assetID, nonce);\n                evmInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmInput);\n            }\n            else {\n                // if asset id isn't AVAX asset id then create 2 inputs\n                // first input will be AVAX and will be for the amount of the fee\n                // second input will be the ANT\n                const evmAVAXInput = new inputs_1.EVMInput(fromAddressHex, fee, assetDescription.assetID, nonce);\n                evmAVAXInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmAVAXInput);\n                const evmANTInput = new inputs_1.EVMInput(fromAddressHex, amount, assetID, nonce);\n                evmANTInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmANTInput);\n            }\n            const to = [];\n            toAddresses.map((address) => {\n                to.push(bintools.stringToAddress(address));\n            });\n            let exportedOuts = [];\n            const secpTransferOutput = new outputs_1.SECPTransferOutput(amount, to, locktime, threshold);\n            const transferableOutput = new outputs_1.TransferableOutput(bintools.cb58Decode(assetID), secpTransferOutput);\n            exportedOuts.push(transferableOutput);\n            // lexicographically sort ins and outs\n            evmInputs = evmInputs.sort(inputs_1.EVMInput.comparator());\n            exportedOuts = exportedOuts.sort(outputs_1.TransferableOutput.comparator());\n            const exportTx = new exporttx_1.ExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), destinationChain, evmInputs, exportedOuts);\n            const unsignedTx = new tx_1.UnsignedTx(exportTx);\n            return unsignedTx;\n        });\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         *\n         * @returns new instance of [[KeyChain]]\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * @returns a Promise<string> containing the base fee for the next block.\n         */\n        this.getBaseFee = () => __awaiter(this, void 0, void 0, function* () {\n            const params = [];\n            const method = \"eth_baseFee\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data.result;\n        });\n        /**\n         * returns the priority fee needed to be included in a block.\n         *\n         * @returns Returns a Promise<string> containing the priority fee needed to be included in a block.\n         */\n        this.getMaxPriorityFeePerGas = () => __awaiter(this, void 0, void 0, function* () {\n            const params = [];\n            const method = \"eth_maxPriorityFeePerGas\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data.result;\n        });\n        this.blockchainID = blockchainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_1.Defaults.network &&\n            blockchainID in constants_1.Defaults.network[`${netID}`]) {\n            const { alias } = constants_1.Defaults.network[`${netID}`][`${blockchainID}`];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias()\n            ? this.getBlockchainAlias()\n            : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            addresses.forEach((address) => {\n                if (typeof address === \"string\") {\n                    if (typeof this.parseAddress(address) === \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - Invalid address format\");\n                    }\n                    addrs.push(address);\n                }\n                else {\n                    const type = \"bech32\";\n                    addrs.push(serialization.bufferToType(address, type, this.core.getHRP(), chainid));\n                }\n            });\n        }\n        return addrs;\n    }\n}\nexports.EVMAPI = EVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nconst SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.AVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.CREATEASSETTX) {\n        return new createassettx_1.CreateAssetTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.OPERATIONTX) {\n        return new operationtx_1.OperationTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.TransactionError(\"Error - SelectTxClass: unknown txtype\");\n};\nexports.SelectTxClass = SelectTxClass;\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = (0, exports.SelectTxClass)(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.transaction = (0, exports.SelectTxClass)(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(fields[\"credentials\"][`${i}`][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][`${i}`], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools\n                .copyFrom(bytes, offset, offset + 4)\n                .readUInt32BE(0);\n            offset += 4;\n            const cred = (0, credentials_1.SelectCredentialClass)(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[EVMBaseTx]] instance.\n *\n * @param txTypeID The id of the transaction type\n *\n * @returns An instance of an [[EVMBaseTx]]-extended class.\n */\nconst SelectTxClass = (txTypeID, ...args) => {\n    if (txTypeID === constants_1.EVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txTypeID === constants_1.EVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"TransactionError - SelectTxClass: unknown txType\");\n};\nexports.SelectTxClass = SelectTxClass;\nclass UnsignedTx extends evmtx_1.EVMStandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = (0, exports.SelectTxClass)(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.transaction = (0, exports.SelectTxClass)(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends evmtx_1.EVMStandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(fields[\"credentials\"][`${i}`][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][`${i}`], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it,\n     * populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools\n                .copyFrom(bytes, offset, offset + 4)\n                .readUInt32BE(0);\n            offset += 4;\n            const cred = (0, credentials_1.SelectCredentialClass)(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTCredential = exports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nconst SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.AVMConstants.SECPCREDENTIAL ||\n        credid === constants_1.AVMConstants.SECPCREDENTIAL_CODECONE) {\n        return new SECPCredential(...args);\n    }\n    if (credid === constants_1.AVMConstants.NFTCREDENTIAL ||\n        credid === constants_1.AVMConstants.NFTCREDENTIAL_CODECONE) {\n        return new NFTCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nexports.SelectCredentialClass = SelectCredentialClass;\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPCREDENTIAL\n            : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPCREDENTIAL\n                : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n    }\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\nclass NFTCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTCredential\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTCREDENTIAL\n            : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTCREDENTIAL\n                : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n    }\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new NFTCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new NFTCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.NFTCredential = NFTCredential;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM\n */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst constants_1 = require(\"./constants\");\nconst keychain_1 = require(\"./keychain\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst constants_2 = require(\"../../utils/constants\");\nconst output_1 = require(\"../../common/output\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node endpoint that is using the AVM.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAP`${I}`]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/bc/X\" as the path to blockchain's baseURL\n     * @param blockchainID The Blockchain\"s ID. Defaults to an empty string: \"\"\n     */\n    constructor(core, baseURL = \"/ext/bc/X\", blockchainID = \"\") {\n        super(core, baseURL);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = \"\";\n        this.blockchainAlias = undefined;\n        this.AVAXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_2.Defaults.network &&\n                    this.blockchainID in constants_2.Defaults.network[`${netid}`]) {\n                    this.blockchainAlias =\n                        constants_2.Defaults.network[`${netid}`][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" &&\n                typeof constants_2.Defaults.network[`${netid}`] !== \"undefined\") {\n                this.blockchainID = constants_2.Defaults.network[`${netid}`].X.blockchainID; //default to X-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_1.AVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias()\n                ? this.getBlockchainAlias()\n                : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainid);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === \"undefined\" || refresh) {\n                const asset = yield this.getAssetDescription(constants_2.PrimaryAssetAlias);\n                this.AVAXAssetID = asset.assetID;\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific AVAX AssetID\n         *\n         * @param avaxAssetID A cb58 string or Buffer representing the AVAX AssetID\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.setAVAXAssetID = (avaxAssetID) => {\n            if (typeof avaxAssetID === \"string\") {\n                avaxAssetID = bintools.cb58Decode(avaxAssetID);\n            }\n            this.AVAXAssetID = avaxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network\n                ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"txFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network\n                ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"creationTxFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const outputTotal = outTotal.gt(new bn_js_1.default(0))\n                ? outTotal\n                : utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_2.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Gets the balance of a particular asset on a blockchain.\n         *\n         * @param address The address to pull the asset balance from\n         * @param assetID The assetID to pull the balance from\n         * @param includePartial If includePartial=false, returns only the balance held solely\n         *\n         * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.\n         */\n        this.getBalance = (address, assetID, includePartial = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.getBalance: Invalid address format\");\n            }\n            const params = {\n                address,\n                assetID,\n                includePartial\n            };\n            const response = yield this.callMethod(\"avm.getBalance\", params);\n            return response.data.result;\n        });\n        /**\n         * Creates an address (and associated private keys) on a user on a blockchain.\n         *\n         * @param username Name of the user to create the address under\n         * @param password Password to unlock the user and encrypt the private key\n         *\n         * @returns Promise for a string representing the address created by the vm.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.createAddress\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.\n         *\n         * @param username The user paying the transaction fee (in $AVAX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param initialHolders An array of objects containing the field \"address\" and \"amount\" to establish the genesis values for the new asset\n         *\n         * ```js\n         * Example initialHolders:\n         * [\n         *   {\n         *     \"address\": \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *     \"amount\": 10000\n         *   },\n         *   {\n         *     \"address\": \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *     \"amount\": 50000\n         *   }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                initialHolders\n            };\n            const response = yield this.callMethod(\"avm.createFixedCapAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n         * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n         *\n         * @param username The user paying the transaction fee (in $AVAX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n         *\n         * ```js\n         * Example minterSets:\n         * [\n         *    {\n         *      \"minters\":[\n         *        \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\"\n         *      ],\n         *      \"threshold\": 1\n         *     },\n         *     {\n         *      \"minters\": [\n         *        \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *        \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *        \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\"\n         *      ],\n         *      \"threshold\": 2\n         *     }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                minterSets\n            };\n            const response = yield this.callMethod(\"avm.createVariableCapAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n         * Create an unsigned transaction to mint more of an asset.\n         *\n         * @param amount The units of the asset to mint\n         * @param assetID The ID of the asset to mint\n         * @param to The address to assign the units of the minted asset\n         * @param minters Addresses of the minters responsible for signing the transaction\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.\n         */\n        this.mint = (username, password, amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                amount: amnt,\n                assetID: asset,\n                to,\n                minters\n            };\n            const response = yield this.callMethod(\"avm.mint\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.exportKey: Invalid address format\");\n            }\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"avm.exportKey\", params);\n            return response.data.result.privateKey;\n        });\n        /**\n         * Imports a private key into the node's keystore under an user and for a blockchain.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm's format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"avm.importKey\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from the X-Chain to an account on the P-Chain or C-Chain.\n         *\n         * After calling this method, you must call the P-Chain's `import` or the C-Chain’s `import` method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the P-Chain or C-Chain account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The account on the P-Chain or C-Chain to send the asset to.\n         * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         *\n         * @returns String representing the transaction id\n         */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount,\n                assetID\n            };\n            const response = yield this.callMethod(\"avm.export\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from an account on the P-Chain or C-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"C\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                sourceChain\n            };\n            const response = yield this.callMethod(\"avm.import\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Lists all the addresses under a user.\n         *\n         * @param username The user to list addresses\n         * @param password The password of the user to list the addresses\n         *\n         * @returns Promise of an array of address strings in the format specified by the blockchain.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.listAddresses\", params);\n            return response.data.result.addresses;\n        });\n        /**\n         * Retrieves all assets for an address on a server and their associated balances.\n         *\n         * @param address The address to get a list of assets\n         *\n         * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.\n         */\n        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.getAllBalances: Invalid address format\");\n            }\n            const params = {\n                address\n            };\n            const response = yield this.callMethod(\"avm.getAllBalances\", params);\n            return response.data.result.balances;\n        });\n        /**\n         * Retrieves an assets name and symbol.\n         *\n         * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n         *\n         * @returns Returns a Promise<object> with keys \"name\" and \"symbol\".\n         */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset\n            };\n            const response = yield this.callMethod(\"avm.getAssetDescription\", params);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10)\n            };\n        });\n        /**\n         * Returns the transaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"avm.getTx\", params);\n            return response.data.result.tx;\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"avm.getTxStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"avm.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            let data = response.data.result.utxos;\n            if (persistOpts && typeof persistOpts === \"object\") {\n                if (this.db.has(persistOpts.getName())) {\n                    const selfArray = this.db.get(persistOpts.getName());\n                    if (Array.isArray(selfArray)) {\n                        utxos.addArray(data);\n                        const utxoSet = new utxos_1.UTXOSet();\n                        utxoSet.addArray(selfArray);\n                        utxoSet.mergeByRule(utxos, persistOpts.getMergeRule());\n                        data = utxoSet.getAllUTXOStrings();\n                    }\n                }\n                this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n            }\n            utxos.addArray(data, false);\n            response.data.result.utxos = utxos;\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount of AssetID to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID The assetID of the value being sent\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildBaseTx = (utxoset, amount, assetID = undefined, toAddresses, fromAddresses, changeAddresses, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            if (typeof assetID === \"string\") {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildBaseTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, assetID, to, from, change, this.getTxFee(), yield this.getAVAXAssetID(), memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildBaseTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param toAddresses The addresses to send the NFT\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildNFTTransferTx = (utxoset, toAddresses, fromAddresses, changeAddresses, utxoid, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildNFTTransferTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildNFTTransferTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let utxoidArray = [];\n            if (typeof utxoid === \"string\") {\n                utxoidArray = [utxoid];\n            }\n            else if (Array.isArray(utxoid)) {\n                utxoidArray = utxoid;\n            }\n            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, utxoidArray, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildNFTTransferTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildImportTx: Invalid destinationChain type: \" +\n                    typeof sourceChain);\n            }\n            const atomicUTXOs = (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new errors_1.NoAtomicUTXOsError(\"Error - AVMAPI.buildImportTx: No atomic UTXOs to import from \" +\n                    srcChain +\n                    \" using addresses: \" +\n                    ownerAddresses.join(\", \"));\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildImportTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @param assetID Optional. The assetID of the asset to send. Defaults to AVAX assetID.\n         * Regardless of the asset which you\"re exporting, all fees are paid in AVAX.\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1, assetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - AVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Invalid destinationChain type: \" +\n                    typeof destinationChain);\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            const to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (typeof assetID === \"undefined\") {\n                assetID = bintools.cb58Encode(avaxAssetID);\n            }\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, bintools.cb58Decode(assetID), to, from, change, destinationChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildExportTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateAssetTx = (utxoset, fromAddresses, changeAddresses, initialStates, name, symbol, denomination, mintOutputs = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateAssetTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            /* istanbul ignore next */\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new errors_1.SymbolError(\"Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of \" +\n                    constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            /* istanbul ignore next */\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new errors_1.NameError(\"Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of \" +\n                    constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, initialStates, name, symbol, denomination, mintOutputs, this.getCreationTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateAssetTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.buildSECPMintTx = (utxoset, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildSECPMintTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildSECPMintTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildSECPMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), mintOwner, transferOwner, from, change, mintUTXOID, this.getTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildSECPMintTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting mint output\n         *\n         * ```js\n         * Example minterSets:\n         * [\n         *      {\n         *          \"minters\":[\n         *              \"X-avax1ghstjukrtw8935lryqtnh643xe9a94u3tc75c7\"\n         *          ],\n         *          \"threshold\": 1\n         *      },\n         *      {\n         *          \"minters\": [\n         *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\",\n         *              \"X-avax1k4nr26c80jaquzm9369j5a4shmwcjn0vmemcjz\",\n         *              \"X-avax1ztkzsrjnkn0cek5ryvhqswdtcg23nhge3nnr5e\"\n         *          ],\n         *          \"threshold\": 2\n         *      }\n         * ]\n         * ```\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateNFTAssetTx = (utxoset, fromAddresses, changeAddresses, minterSets, name, symbol, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTAssetTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new errors_1.NameError(\"Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of \" +\n                    constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new errors_1.SymbolError(\"Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of \" +\n                    constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, minterSets, name, symbol, this.getCreationTxFee(), avaxAssetID, memo, asOf, locktime);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateNFTAssetTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param owners Either a single or an array of [[OutputOwners]] to send the nft output\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending\n         * @param groupID Optional. The group this NFT is issued to.\n         * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].\n         *\n         */\n        this.buildCreateNFTMintTx = (utxoset, owners, fromAddresses, changeAddresses, utxoid, groupID = 0, payload = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTMintTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTMintTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (payload instanceof payload_1.PayloadBase) {\n                payload = payload.getPayload();\n            }\n            if (typeof utxoid === \"string\") {\n                utxoid = [utxoid];\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (owners instanceof output_1.OutputOwners) {\n                owners = [owners];\n            }\n            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), owners, from, change, utxoid, groupID, payload, this.getTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateNFTMintTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].\n         *\n         * @param utx The unsigned transaction of type [[UnsignedTx]]\n         *\n         * @returns A signed transaction of type [[Tx]]\n         */\n        this.signTx = (utx) => utx.sign(this.keychain);\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - AVMAPI.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString()\n            };\n            const response = yield this.callMethod(\"avm.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Sends an amount of assetID to the specified address from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param assetID The assetID of the asset to send\n         * @param amount The amount of the asset to be sent\n         * @param to The address of the recipient\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.send = (username, password, assetID, amount, to, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof this.parseAddress(to) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n            }\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                assetID: asset,\n                amount: amnt.toString(10),\n                to: to\n            };\n            from = this._cleanAddressArray(from, \"send\");\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== \"string\") {\n                    params[\"memo\"] = bintools.cb58Encode(memo);\n                }\n                else {\n                    params[\"memo\"] = memo;\n                }\n            }\n            const response = yield this.callMethod(\"avm.send\", params);\n            return response.data.result;\n        });\n        /**\n         * Sends an amount of assetID to an array of specified addresses from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param sendOutputs The array of SendOutputs. A SendOutput is an object literal which contains an assetID, amount, and to.\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction\"s ID.\n         */\n        this.sendMultiple = (username, password, sendOutputs, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            const sOutputs = [];\n            sendOutputs.forEach((output) => {\n                if (typeof this.parseAddress(output.to) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.sendMultiple: Invalid address format\");\n                }\n                if (typeof output.assetID !== \"string\") {\n                    asset = bintools.cb58Encode(output.assetID);\n                }\n                else {\n                    asset = output.assetID;\n                }\n                if (typeof output.amount === \"number\") {\n                    amnt = new bn_js_1.default(output.amount);\n                }\n                else {\n                    amnt = output.amount;\n                }\n                sOutputs.push({\n                    to: output.to,\n                    assetID: asset,\n                    amount: amnt.toString(10)\n                });\n            });\n            const params = {\n                username: username,\n                password: password,\n                outputs: sOutputs\n            };\n            from = this._cleanAddressArray(from, \"send\");\n            if (typeof from !== \"undefined\") {\n                params.from = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n                }\n                params.changeAddr = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== \"string\") {\n                    params.memo = bintools.cb58Encode(memo);\n                }\n                else {\n                    params.memo = memo;\n                }\n            }\n            const response = yield this.callMethod(\"avm.sendMultiple\", params);\n            return response.data.result;\n        });\n        /**\n         * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.\n         *\n         * @param genesisData The blockchain's genesis data object\n         *\n         * @returns Promise of a string of bytes\n         */\n        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                genesisData\n            };\n            const response = yield this.callMethod(\"avm.buildGenesis\", params);\n            return response.data.result.bytes;\n        });\n        this.blockchainID = blockchainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_2.Defaults.network &&\n            blockchainID in constants_2.Defaults.network[`${netID}`]) {\n            const { alias } = constants_2.Defaults.network[`${netID}`][`${blockchainID}`];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainID = this.getBlockchainAlias()\n            ? this.getBlockchainAlias()\n            : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[`${i}`] === \"string\") {\n                    if (typeof this.parseAddress(addresses[`${i}`]) ===\n                        \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - AVMAPI.${caller}: Invalid address format\");\n                    }\n                    addrs.push(addresses[`${i}`]);\n                }\n                else {\n                    const type = \"bech32\";\n                    addrs.push(serialization.bufferToType(addresses[`${i}`], type, this.core.getHRP(), chainID));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.AVMAPI = AVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n  primitive,\n  cls,\n  content) {\n  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    const header = Buffer.alloc(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  let lenOctets = 1;\n  for (let i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  const header = Buffer.alloc(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    const buf = Buffer.alloc(str.length * 2);\n    for (let i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s.]+/g);\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  let size = 0;\n  for (let i = 0; i < id.length; i++) {\n    let ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  const objid = Buffer.alloc(size);\n  let offset = objid.length - 1;\n  for (let i = id.length - 1; i >= 0; i--) {\n    let ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  let str;\n  const date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getUTCFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getUTCFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    const numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = Buffer.from(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    let size = num.length;\n    if (num.length === 0)\n      size++;\n\n    const out = Buffer.alloc(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0;\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  let size = 1;\n  for (let i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  const out = new Array(size);\n  for (let i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(Buffer.from(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  const state = this._baseState;\n  let i;\n  if (state['default'] === null)\n    return false;\n\n  const data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  let res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","'use strict';\n\nconst base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMInput = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst outputs_1 = require(\"./outputs\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputID A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nconst SelectInputClass = (inputID, ...args) => {\n    if (inputID === constants_1.EVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputID\");\n};\nexports.SelectInputClass = SelectInputClass;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n        /**\n         *\n         * Assesses the amount to be paid based on the number of signatures required\n         * @returns the amount to be paid\n         */\n        this.getCost = () => {\n            const numSigs = this.getInput().getSigIdxs().length;\n            return numSigs * utils_1.Defaults.network[1].C.costPerSignature;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.EVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return constants_1.EVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\nclass EVMInput extends outputs_1.EVMOutput {\n    /**\n     * An [[EVMInput]] class which contains address, amount, assetID, nonce.\n     *\n     * @param address is the EVM address from which to transfer funds.\n     * @param amount is the amount of the asset to be transferred (specified in nAVAX for AVAX and the smallest denomination for all other assets).\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or as a string.\n     * @param nonce A {@link https://github.com/indutny/bn.js/|BN} or a number representing the nonce.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined, nonce = undefined) {\n        super(address, amount, assetID);\n        this.nonce = buffer_1.Buffer.alloc(8);\n        this.nonceValue = new bn_js_1.default(0);\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n        /**\n         * Returns the nonce as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getNonce = () => this.nonceValue.clone();\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n        if (typeof nonce !== \"undefined\") {\n            // convert number nonce to BN\n            let n;\n            if (typeof nonce === \"number\") {\n                n = new bn_js_1.default(nonce);\n            }\n            else {\n                n = nonce;\n            }\n            this.nonceValue = n.clone();\n            this.nonce = bintools.fromBNToBuffer(n, 8);\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = superbuff.length + this.nonce.length;\n        let barr = [superbuff, this.nonce];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[EVMInput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     *\n     * @param bytes The bytes as a {@link https://github.com/feross/buffer|Buffer}.\n     * @param offset An offset as a number.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nonce = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMInput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMInput(...args);\n    }\n    clone() {\n        const newEVMInput = this.create();\n        newEVMInput.fromBuffer(this.toBuffer());\n        return newEVMInput;\n    }\n}\nexports.EVMInput = EVMInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0dBR0c7QUFDSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBQzNDLDJDQUEwQztBQUMxQyw4Q0FJMkI7QUFFM0IsdUNBQXFDO0FBQ3JDLGtEQUFzQjtBQUN0QiwwREFBaUQ7QUFDakQsK0NBQWlEO0FBQ2pELHVDQUFzQztBQUV0Qzs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFFakQ7Ozs7OztHQU1HO0FBQ0ksTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVcsRUFBUyxFQUFFO0lBQ3pFLElBQUksT0FBTyxLQUFLLHdCQUFZLENBQUMsV0FBVyxFQUFFO1FBQ3hDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0tBQ3RDO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxxQkFBWSxDQUFDLDJDQUEyQyxDQUFDLENBQUE7QUFDckUsQ0FBQyxDQUFBO0FBTlksUUFBQSxnQkFBZ0Isb0JBTTVCO0FBRUQsTUFBYSxpQkFBa0IsU0FBUSxpQ0FBeUI7SUFBaEU7O1FBQ1ksY0FBUyxHQUFHLG1CQUFtQixDQUFBO1FBQy9CLFlBQU8sR0FBRyxTQUFTLENBQUE7UUFVN0I7Ozs7V0FJRztRQUNILFlBQU8sR0FBRyxHQUFXLEVBQUU7WUFDckIsTUFBTSxPQUFPLEdBQVcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQTtZQUMzRCxPQUFPLE9BQU8sR0FBRyxnQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUE7UUFDekQsQ0FBQyxDQUFBO0lBMkJILENBQUM7SUEzQ0Msd0JBQXdCO0lBRXhC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QUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUE7SUFDdEMsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLFdBQVcsR0FBYSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDM0MsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUN2QyxPQUFPLFdBQW1CLENBQUE7SUFDNUIsQ0FBQztDQStCRjtBQXZHRCw0QkF1R0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktRVZNLUlucHV0c1xuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uLy4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7IEVWTUNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiXG5pbXBvcnQge1xuICBJbnB1dCxcbiAgU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dCxcbiAgU3RhbmRhcmRBbW91bnRJbnB1dFxufSBmcm9tIFwiLi4vLi4vY29tbW9uL2lucHV0XCJcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gXCIuLi8uLi91dGlscy9zZXJpYWxpemF0aW9uXCJcbmltcG9ydCB7IEVWTU91dHB1dCB9IGZyb20gXCIuL291dHB1dHNcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgeyBTaWdJZHggfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzXCJcbmltcG9ydCB7IElucHV0SWRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuaW1wb3J0IHsgRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tJbnB1dF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBpbnB1dElEIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgaW5wdXRJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbSW5wdXRdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdElucHV0Q2xhc3MgPSAoaW5wdXRJRDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IElucHV0ID0+IHtcbiAgaWYgKGlucHV0SUQgPT09IEVWTUNvbnN0YW50cy5TRUNQSU5QVVRJRCkge1xuICAgIHJldHVybiBuZXcgU0VDUFRyYW5zZmVySW5wdXQoLi4uYXJncylcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgSW5wdXRJZEVycm9yKFwiRXJyb3IgLSBTZWxlY3RJbnB1dENsYXNzOiB1bmtub3duIGlucHV0SURcIilcbn1cblxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyYWJsZUlucHV0IGV4dGVuZHMgU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlRyYW5zZmVyYWJsZUlucHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICAvL3NlcmlhbGl6ZSBpcyBpbmhlcml0ZWRcblxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuaW5wdXQgPSBTZWxlY3RJbnB1dENsYXNzKGZpZWxkc1tcImlucHV0XCJdW1wiX3R5cGVJRFwiXSlcbiAgICB0aGlzLmlucHV0LmRlc2VyaWFsaXplKGZpZWxkc1tcImlucHV0XCJdLCBlbmNvZGluZylcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBBc3Nlc3NlcyB0aGUgYW1vdW50IHRvIGJlIHBhaWQgYmFzZWQgb24gdGhlIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkXG4gICAqIEByZXR1cm5zIHRoZSBhbW91bnQgdG8gYmUgcGFpZFxuICAgKi9cbiAgZ2V0Q29zdCA9ICgpOiBudW1iZXIgPT4ge1xuICAgIGNvbnN0IG51bVNpZ3M6IG51bWJlciA9IHRoaXMuZ2V0SW5wdXQoKS5nZXRTaWdJZHhzKCkubGVuZ3RoXG4gICAgcmV0dXJuIG51bVNpZ3MgKiBEZWZhdWx0cy5uZXR3b3JrWzFdLkMuY29zdFBlclNpZ25hdHVyZVxuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIFtbVHJhbnNmZXJhYmxlSW5wdXRdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV0gaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tUcmFuc2ZlcmFibGVJbnB1dF1dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW1RyYW5zZmVyYWJsZUlucHV0XV1cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLnR4aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMilcbiAgICBvZmZzZXQgKz0gMzJcbiAgICB0aGlzLm91dHB1dGlkeCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpXG4gICAgb2Zmc2V0ICs9IDRcbiAgICB0aGlzLmFzc2V0SUQgPSBiaW50b29scy5jb3B5RnJvbShcbiAgICAgIGJ5dGVzLFxuICAgICAgb2Zmc2V0LFxuICAgICAgb2Zmc2V0ICsgRVZNQ29uc3RhbnRzLkFTU0VUSURMRU5cbiAgICApXG4gICAgb2Zmc2V0ICs9IDMyXG4gICAgY29uc3QgaW5wdXRpZDogbnVtYmVyID0gYmludG9vbHNcbiAgICAgIC5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgICAgLnJlYWRVSW50MzJCRSgwKVxuICAgIG9mZnNldCArPSA0XG4gICAgdGhpcy5pbnB1dCA9IFNlbGVjdElucHV0Q2xhc3MoaW5wdXRpZClcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpXG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFtb3VudElucHV0IGV4dGVuZHMgU3RhbmRhcmRBbW91bnRJbnB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIkFtb3VudElucHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICAvL3NlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgYm90aCBhcmUgaW5oZXJpdGVkXG5cbiAgc2VsZWN0KGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogSW5wdXQge1xuICAgIHJldHVybiBTZWxlY3RJbnB1dENsYXNzKGlkLCAuLi5hcmdzKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTRUNQVHJhbnNmZXJJbnB1dCBleHRlbmRzIEFtb3VudElucHV0IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiU0VDUFRyYW5zZmVySW5wdXRcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IEVWTUNvbnN0YW50cy5TRUNQSU5QVVRJRFxuXG4gIC8vc2VyaWFsaXplIGFuZCBkZXNlcmlhbGl6ZSBib3RoIGFyZSBpbmhlcml0ZWRcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5wdXRJRCBmb3IgdGhpcyBpbnB1dFxuICAgKi9cbiAgZ2V0SW5wdXRJRCgpOiBudW1iZXIge1xuICAgIHJldHVybiBFVk1Db25zdGFudHMuU0VDUElOUFVUSURcbiAgfVxuXG4gIGdldENyZWRlbnRpYWxJRCA9ICgpOiBudW1iZXIgPT4gRVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMXG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBTRUNQVHJhbnNmZXJJbnB1dCguLi5hcmdzKSBhcyB0aGlzXG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdvdXQ6IFNFQ1BUcmFuc2ZlcklucHV0ID0gdGhpcy5jcmVhdGUoKVxuICAgIG5ld291dC5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3b3V0IGFzIHRoaXNcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRVZNSW5wdXQgZXh0ZW5kcyBFVk1PdXRwdXQge1xuICBwcm90ZWN0ZWQgbm9uY2U6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg4KVxuICBwcm90ZWN0ZWQgbm9uY2VWYWx1ZTogQk4gPSBuZXcgQk4oMClcbiAgcHJvdGVjdGVkIHNpZ0NvdW50OiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgcHJvdGVjdGVkIHNpZ0lkeHM6IFNpZ0lkeFtdID0gW10gLy8gaWR4cyBvZiBzaWduZXJzIGZyb20gdXR4b1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBbW1NpZ0lkeF1dIGZvciB0aGlzIFtbSW5wdXRdXVxuICAgKi9cbiAgZ2V0U2lnSWR4cyA9ICgpOiBTaWdJZHhbXSA9PiB0aGlzLnNpZ0lkeHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgYWRkcyBhIFtbU2lnSWR4XV0gdG8gdGhlIFtbSW5wdXRdXS5cbiAgICpcbiAgICogQHBhcmFtIGFkZHJlc3NJZHggVGhlIGluZGV4IG9mIHRoZSBhZGRyZXNzIHRvIHJlZmVyZW5jZSBpbiB0aGUgc2lnbmF0dXJlc1xuICAgKiBAcGFyYW0gYWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgc291cmNlIG9mIHRoZSBzaWduYXR1cmVcbiAgICovXG4gIGFkZFNpZ25hdHVyZUlkeCA9IChhZGRyZXNzSWR4OiBudW1iZXIsIGFkZHJlc3M6IEJ1ZmZlcikgPT4ge1xuICAgIGNvbnN0IHNpZ2lkeDogU2lnSWR4ID0gbmV3IFNpZ0lkeCgpXG4gICAgY29uc3QgYjogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgYi53cml0ZVVJbnQzMkJFKGFkZHJlc3NJZHgsIDApXG4gICAgc2lnaWR4LmZyb21CdWZmZXIoYilcbiAgICBzaWdpZHguc2V0U291cmNlKGFkZHJlc3MpXG4gICAgdGhpcy5zaWdJZHhzLnB1c2goc2lnaWR4KVxuICAgIHRoaXMuc2lnQ291bnQud3JpdGVVSW50MzJCRSh0aGlzLnNpZ0lkeHMubGVuZ3RoLCAwKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5vbmNlIGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn0uXG4gICAqL1xuICBnZXROb25jZSA9ICgpOiBCTiA9PiB0aGlzLm5vbmNlVmFsdWUuY2xvbmUoKVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRVZNT3V0cHV0XV0uXG4gICAqL1xuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIGxldCBzdXBlcmJ1ZmY6IEJ1ZmZlciA9IHN1cGVyLnRvQnVmZmVyKClcbiAgICBsZXQgYnNpemU6IG51bWJlciA9IHN1cGVyYnVmZi5sZW5ndGggKyB0aGlzLm5vbmNlLmxlbmd0aFxuICAgIGxldCBiYXJyOiBCdWZmZXJbXSA9IFtzdXBlcmJ1ZmYsIHRoaXMubm9uY2VdXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgYnNpemUpXG4gIH1cblxuICBnZXRDcmVkZW50aWFsSUQgPSAoKTogbnVtYmVyID0+IEVWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTFxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIHRoZSBbW0VWTUlucHV0XV0gYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBhbmQgcmV0dXJucyB0aGUgc2l6ZS5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIFRoZSBieXRlcyBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9LlxuICAgKiBAcGFyYW0gb2Zmc2V0IEFuIG9mZnNldCBhcyBhIG51bWJlci5cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICBvZmZzZXQgPSBzdXBlci5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpXG4gICAgdGhpcy5ub25jZSA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDgpXG4gICAgb2Zmc2V0ICs9IDhcbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRVZNSW5wdXRdXS5cbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSlcbiAgfVxuXG4gIGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXMge1xuICAgIHJldHVybiBuZXcgRVZNSW5wdXQoLi4uYXJncykgYXMgdGhpc1xuICB9XG5cbiAgY2xvbmUoKTogdGhpcyB7XG4gICAgY29uc3QgbmV3RVZNSW5wdXQ6IEVWTUlucHV0ID0gdGhpcy5jcmVhdGUoKVxuICAgIG5ld0VWTUlucHV0LmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKVxuICAgIHJldHVybiBuZXdFVk1JbnB1dCBhcyB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQW4gW1tFVk1JbnB1dF1dIGNsYXNzIHdoaWNoIGNvbnRhaW5zIGFkZHJlc3MsIGFtb3VudCwgYXNzZXRJRCwgbm9uY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhZGRyZXNzIGlzIHRoZSBFVk0gYWRkcmVzcyBmcm9tIHdoaWNoIHRvIHRyYW5zZmVyIGZ1bmRzLlxuICAgKiBAcGFyYW0gYW1vdW50IGlzIHRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHRyYW5zZmVycmVkIChzcGVjaWZpZWQgaW4gbkFWQVggZm9yIEFWQVggYW5kIHRoZSBzbWFsbGVzdCBkZW5vbWluYXRpb24gZm9yIGFsbCBvdGhlciBhc3NldHMpLlxuICAgKiBAcGFyYW0gYXNzZXRJRCBUaGUgYXNzZXRJRCB3aGljaCBpcyBiZWluZyBzZW50IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb3IgYXMgYSBzdHJpbmcuXG4gICAqIEBwYXJhbSBub25jZSBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59IG9yIGEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgbm9uY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBhZGRyZXNzOiBCdWZmZXIgfCBzdHJpbmcgPSB1bmRlZmluZWQsXG4gICAgYW1vdW50OiBCTiB8IG51bWJlciA9IHVuZGVmaW5lZCxcbiAgICBhc3NldElEOiBCdWZmZXIgfCBzdHJpbmcgPSB1bmRlZmluZWQsXG4gICAgbm9uY2U6IEJOIHwgbnVtYmVyID0gdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKGFkZHJlc3MsIGFtb3VudCwgYXNzZXRJRClcblxuICAgIGlmICh0eXBlb2Ygbm9uY2UgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8vIGNvbnZlcnQgbnVtYmVyIG5vbmNlIHRvIEJOXG4gICAgICBsZXQgbjogQk5cbiAgICAgIGlmICh0eXBlb2Ygbm9uY2UgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgbiA9IG5ldyBCTihub25jZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSBub25jZVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5vbmNlVmFsdWUgPSBuLmNsb25lKClcbiAgICAgIHRoaXMubm9uY2UgPSBiaW50b29scy5mcm9tQk5Ub0J1ZmZlcihuLCA4KVxuICAgIH1cbiAgfVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nconst SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.AVMConstants.SECPINPUTID ||\n        inputid === constants_1.AVMConstants.SECPINPUTID_CODECONE) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputid\");\n};\nexports.SelectInputClass = SelectInputClass;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPINPUTID\n            : constants_1.AVMConstants.SECPINPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPTransferInput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPINPUTID\n                : constants_1.AVMConstants.SECPINPUTID_CODECONE;\n    }\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.SECPCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n        }\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optional chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.IMPORTTX : constants_1.AVMConstants.IMPORTTX_CODECONE;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n         * Returns the id of the [[ImportTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChain; // do not correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== \"undefined\" && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[`${i}`] instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(`Error - ImportTx.constructor: invalid TransferableInput in array parameter ${importIns}`);\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serialization.encoder(this.sourceChain, encoding, buffer, cb58), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serialization.decoder(fields[\"sourceChain\"], encoding, cb58, buffer, 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - ImportTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.IMPORTTX\n                : constants_1.AVMConstants.IMPORTTX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n     *\n     * @returns The length of the raw [[ImportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableInput]]s in this transaction.\n     */\n    getImportInputs() {\n        return this.importIns;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.importIns[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.importIns[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOID = exports.NFTTransferOperation = exports.NFTMintOperation = exports.SECPMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Operations\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst nbytes_1 = require(\"../../common/nbytes\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\nconst hex = \"hex\";\nconst decimalString = \"decimalString\";\n/**\n * Takes a buffer representing the output and returns the proper [[Operation]] instance.\n *\n * @param opid A number representing the operation ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Operation]]-extended class.\n */\nconst SelectOperationClass = (opid, ...args) => {\n    if (opid === constants_1.AVMConstants.SECPMINTOPID ||\n        opid === constants_1.AVMConstants.SECPMINTOPID_CODECONE) {\n        return new SECPMintOperation(...args);\n    }\n    else if (opid === constants_1.AVMConstants.NFTMINTOPID ||\n        opid === constants_1.AVMConstants.NFTMINTOPID_CODECONE) {\n        return new NFTMintOperation(...args);\n    }\n    else if (opid === constants_1.AVMConstants.NFTXFEROPID ||\n        opid === constants_1.AVMConstants.NFTXFEROPID_CODECONE) {\n        return new NFTTransferOperation(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InvalidOperationIdError(`Error - SelectOperationClass: unknown opid ${opid}`);\n};\nexports.SelectOperationClass = SelectOperationClass;\n/**\n * A class representing an operation. All operation types must extend on this class.\n */\nclass Operation extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Operation\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Operation]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Operation]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigIdxs: this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Operation = Operation;\nOperation.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOperationID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOperationID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\n/**\n * A class which contains an [[Operation]] for transfers.\n *\n */\nclass TransferableOperation extends serialization_1.Serializable {\n    constructor(assetID = undefined, utxoids = undefined, operation = undefined) {\n        super();\n        this._typeName = \"TransferableOperation\";\n        this._typeID = undefined;\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.utxoIDs = [];\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetID;\n        /**\n         * Returns an array of UTXOIDs in this operation.\n         */\n        this.getUTXOIDs = () => this.utxoIDs;\n        /**\n         * Returns the operation\n         */\n        this.getOperation = () => this.operation;\n        if (typeof assetID !== \"undefined\" &&\n            assetID.length === constants_1.AVMConstants.ASSETIDLEN &&\n            operation instanceof Operation &&\n            typeof utxoids !== \"undefined\" &&\n            Array.isArray(utxoids)) {\n            this.assetID = assetID;\n            this.operation = operation;\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxoid = new UTXOID();\n                if (typeof utxoids[`${i}`] === \"string\") {\n                    utxoid.fromString(utxoids[`${i}`]);\n                }\n                else if (utxoids[`${i}`] instanceof buffer_1.Buffer) {\n                    utxoid.fromBuffer(utxoids[`${i}`]);\n                }\n                else if (utxoids[`${i}`] instanceof UTXOID) {\n                    utxoid.fromString(utxoids[`${i}`].toString()); // clone\n                }\n                this.utxoIDs.push(utxoid);\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { assetID: serialization.encoder(this.assetID, encoding, buffer, cb58, 32), utxoIDs: this.utxoIDs.map((u) => u.serialize(encoding)), operation: this.operation.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, cb58, buffer, 32);\n        this.utxoIDs = fields[\"utxoIDs\"].map((u) => {\n            let utxoid = new UTXOID();\n            utxoid.deserialize(u, encoding);\n            return utxoid;\n        });\n        this.operation = (0, exports.SelectOperationClass)(fields[\"operation\"][\"_typeID\"]);\n        this.operation.deserialize(fields[\"operation\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const numutxoIDs = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.utxoIDs = [];\n        for (let i = 0; i < numutxoIDs; i++) {\n            const utxoid = new UTXOID();\n            offset = utxoid.fromBuffer(bytes, offset);\n            this.utxoIDs.push(utxoid);\n        }\n        const opid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.operation = (0, exports.SelectOperationClass)(opid);\n        return this.operation.fromBuffer(bytes, offset);\n    }\n    toBuffer() {\n        const numutxoIDs = buffer_1.Buffer.alloc(4);\n        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);\n        let bsize = this.assetID.length + numutxoIDs.length;\n        const barr = [this.assetID, numutxoIDs];\n        this.utxoIDs = this.utxoIDs.sort(UTXOID.comparator());\n        for (let i = 0; i < this.utxoIDs.length; i++) {\n            const b = this.utxoIDs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        const opid = buffer_1.Buffer.alloc(4);\n        opid.writeUInt32BE(this.operation.getOperationID(), 0);\n        barr.push(opid);\n        bsize += opid.length;\n        const b = this.operation.toBuffer();\n        bsize += b.length;\n        barr.push(b);\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.TransferableOperation = TransferableOperation;\n/**\n * Returns a function used to sort an array of [[TransferableOperation]]s\n */\nTransferableOperation.comparator = () => {\n    return function (a, b) {\n        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n    };\n};\n/**\n * An [[Operation]] class which specifies a SECP256k1 Mint Op.\n */\nclass SECPMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which mints new tokens on an assetID.\n     *\n     * @param mintOutput The [[SECPMintOutput]] that will be produced by this transaction.\n     * @param transferOutput A [[SECPTransferOutput]] that will be produced from this minting operation.\n     */\n    constructor(mintOutput = undefined, transferOutput = undefined) {\n        super();\n        this._typeName = \"SECPMintOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPMINTOPID\n            : constants_1.AVMConstants.SECPMINTOPID_CODECONE;\n        this.mintOutput = undefined;\n        this.transferOutput = undefined;\n        if (typeof mintOutput !== \"undefined\") {\n            this.mintOutput = mintOutput;\n        }\n        if (typeof transferOutput !== \"undefined\") {\n            this.transferOutput = transferOutput;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { mintOutput: this.mintOutput.serialize(encoding), transferOutputs: this.transferOutput.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        this.mintOutput.deserialize(fields[\"mintOutput\"], encoding);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        this.transferOutput.deserialize(fields[\"transferOutputs\"], encoding);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPMINTOPID\n                : constants_1.AVMConstants.SECPMINTOPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.SECPCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n        }\n    }\n    /**\n     * Returns the [[SECPMintOutput]] to be produced by this operation.\n     */\n    getMintOutput() {\n        return this.mintOutput;\n    }\n    /**\n     * Returns [[SECPTransferOutput]] to be produced by this operation.\n     */\n    getTransferOutput() {\n        return this.transferOutput;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[SECPMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        offset = this.mintOutput.fromBuffer(bytes, offset);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        offset = this.transferOutput.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[SECPMintOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const mintoutBuff = this.mintOutput.toBuffer();\n        const transferOutBuff = this.transferOutput.toBuffer();\n        const bsize = superbuff.length + mintoutBuff.length + transferOutBuff.length;\n        const barr = [superbuff, mintoutBuff, transferOutBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.SECPMintOperation = SECPMintOperation;\n/**\n * An [[Operation]] class which specifies a NFT Mint Op.\n */\nclass NFTMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param groupID The group to which to issue the NFT Output\n     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload\n     * @param outputOwners An array of outputOwners\n     */\n    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {\n        super();\n        this._typeName = \"NFTMintOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTMINTOPID\n            : constants_1.AVMConstants.NFTMINTOPID_CODECONE;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        this.outputOwners = [];\n        /**\n         * Returns the credential ID.\n         */\n        this.getCredentialID = () => {\n            if (this._codecID === 0) {\n                return constants_1.AVMConstants.NFTCREDENTIAL;\n            }\n            else if (this._codecID === 1) {\n                return constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n            }\n        };\n        /**\n         * Returns the payload.\n         */\n        this.getGroupID = () => {\n            return bintools.copyFrom(this.groupID, 0);\n        };\n        /**\n         * Returns the payload.\n         */\n        this.getPayload = () => {\n            return bintools.copyFrom(this.payload, 0);\n        };\n        /**\n         * Returns the payload's raw {@link https://github.com/feross/buffer|Buffer} with length prepended, for use with [[PayloadBase]]'s fromBuffer\n         */\n        this.getPayloadBuffer = () => {\n            let payloadlen = buffer_1.Buffer.alloc(4);\n            payloadlen.writeUInt32BE(this.payload.length, 0);\n            return buffer_1.Buffer.concat([payloadlen, bintools.copyFrom(this.payload, 0)]);\n        };\n        /**\n         * Returns the outputOwners.\n         */\n        this.getOutputOwners = () => {\n            return this.outputOwners;\n        };\n        if (typeof groupID !== \"undefined\" &&\n            typeof payload !== \"undefined\" &&\n            outputOwners.length) {\n            this.groupID.writeUInt32BE(groupID ? groupID : 0, 0);\n            this.payload = payload;\n            this.outputOwners = outputOwners;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { groupID: serialization.encoder(this.groupID, encoding, buffer, decimalString, 4), payload: serialization.encoder(this.payload, encoding, buffer, hex), outputOwners: this.outputOwners.map((o) => o.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serialization.decoder(fields[\"groupID\"], encoding, decimalString, buffer, 4);\n        this.payload = serialization.decoder(fields[\"payload\"], encoding, hex, buffer);\n        // this.outputOwners = fields[\"outputOwners\"].map((o: NFTMintOutput) => {\n        //   let oo: NFTMintOutput = new NFTMintOutput()\n        //   oo.deserialize(o, encoding)\n        //   return oo\n        // })\n        this.outputOwners = fields[\"outputOwners\"].map((o) => {\n            let oo = new output_1.OutputOwners();\n            oo.deserialize(o, encoding);\n            return oo;\n        });\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTMINTOPID\n                : constants_1.AVMConstants.NFTMINTOPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let payloadLen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);\n        offset += payloadLen;\n        let numoutputs = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.outputOwners = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let outputOwner = new output_1.OutputOwners();\n            offset = outputOwner.fromBuffer(bytes, offset);\n            this.outputOwners.push(outputOwner);\n        }\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const payloadlen = buffer_1.Buffer.alloc(4);\n        payloadlen.writeUInt32BE(this.payload.length, 0);\n        const outputownerslen = buffer_1.Buffer.alloc(4);\n        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);\n        let bsize = superbuff.length +\n            this.groupID.length +\n            payloadlen.length +\n            this.payload.length +\n            outputownerslen.length;\n        const barr = [\n            superbuff,\n            this.groupID,\n            payloadlen,\n            this.payload,\n            outputownerslen\n        ];\n        for (let i = 0; i < this.outputOwners.length; i++) {\n            let b = this.outputOwners[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTMintOperation = NFTMintOperation;\n/**\n * A [[Operation]] class which specifies a NFT Transfer Op.\n */\nclass NFTTransferOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param output An [[NFTTransferOutput]]\n     */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"NFTTransferOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTXFEROPID\n            : constants_1.AVMConstants.NFTXFEROPID_CODECONE;\n        this.getOutput = () => this.output;\n        if (typeof output !== \"undefined\") {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { output: this.output.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = new outputs_1.NFTTransferOutput();\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTTransferOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTXFEROPID\n                : constants_1.AVMConstants.NFTXFEROPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.NFTCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n        }\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.output = new outputs_1.NFTTransferOutput();\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const outbuff = this.output.toBuffer();\n        const bsize = superbuff.length + outbuff.length;\n        const barr = [superbuff, outbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTTransferOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTTransferOperation = NFTTransferOperation;\n/**\n * Class for representing a UTXOID used in [[TransferableOp]] types\n */\nclass UTXOID extends nbytes_1.NBytes {\n    /**\n     * Class for representing a UTXOID used in [[TransferableOp]] types\n     */\n    constructor() {\n        super();\n        this._typeName = \"UTXOID\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(36);\n        this.bsize = 36;\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXOID]].\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n     * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.\n     *\n     * @param bytes A base-58 string containing a raw [[UTXOID]]\n     *\n     * @returns The length of the raw [[UTXOID]]\n     */\n    fromString(utxoid) {\n        const utxoidbuff = bintools.b58ToBuffer(utxoid);\n        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {\n            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);\n            if (newbuff.length === 36) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (utxoidbuff.length === 40) {\n            throw new errors_1.ChecksumError(\"Error - UTXOID.fromString: invalid checksum on address\");\n        }\n        else if (utxoidbuff.length === 36) {\n            this.bytes = utxoidbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.AddressError(\"Error - UTXOID.fromString: invalid address\");\n        }\n        return this.getSize();\n    }\n    clone() {\n        const newbase = new UTXOID();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new UTXOID();\n    }\n}\nexports.UTXOID = UTXOID;\n/**\n * Returns a function used to sort an array of [[UTXOID]]s\n */\nUTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nconst SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.EVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nexports.SelectCredentialClass = SelectCredentialClass;\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let credential = (0, exports.SelectCredentialClass)(id, ...args);\n        return credential;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsMkNBQTBDO0FBQzFDLDBEQUFxRDtBQUNyRCwrQ0FBZ0Q7QUFFaEQ7Ozs7OztHQU1HO0FBQ0ksTUFBTSxxQkFBcUIsR0FBRyxDQUNuQyxNQUFjLEVBQ2QsR0FBRyxJQUFXLEVBQ0YsRUFBRTtJQUNkLElBQUksTUFBTSxLQUFLLHdCQUFZLENBQUMsY0FBYyxFQUFFO1FBQzFDLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUNuQztJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksb0JBQVcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO0FBQ3hFLENBQUMsQ0FBQTtBQVRZLFFBQUEscUJBQXFCLHlCQVNqQztBQUVELE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQTlDOztRQUNZLGNBQVMsR0FBVyxnQkFBZ0IsQ0FBQTtRQUNwQyxZQUFPLEdBQVcsd0JBQVksQ0FBQyxjQUFjLENBQUE7SUFzQnpELENBQUM7SUFwQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQTtRQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sT0FBZSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFXO1FBQ25CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxVQUFVLEdBQWUsSUFBQSw2QkFBcUIsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUMvRCxPQUFPLFVBQVUsQ0FBQTtJQUNuQixDQUFDO0NBQ0Y7QUF4QkQsd0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUVWTS1DcmVkZW50aWFsc1xuICovXG5cbmltcG9ydCB7IEVWTUNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jcmVkZW50aWFsc1wiXG5pbXBvcnQgeyBDcmVkSWRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoXG4gIGNyZWRpZDogbnVtYmVyLFxuICAuLi5hcmdzOiBhbnlbXVxuKTogQ3JlZGVudGlhbCA9PiB7XG4gIGlmIChjcmVkaWQgPT09IEVWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncylcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgQ3JlZElkRXJyb3IoXCJFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWRcIilcbn1cblxuZXhwb3J0IGNsYXNzIFNFQ1BDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWU6IHN0cmluZyA9IFwiU0VDUENyZWRlbnRpYWxcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRDogbnVtYmVyID0gRVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90eXBlSURcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGxldCBuZXdiYXNlOiBTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpXG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXNcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBjcmVkZW50aWFsOiBDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGlkLCAuLi5hcmdzKVxuICAgIHJldHVybiBjcmVkZW50aWFsXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateAssetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-CreateAssetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst initialstates_1 = require(\"./initialstates\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst utf8 = \"utf8\";\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nclass CreateAssetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Asset transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param name String for the descriptive name of the asset\n     * @param symbol String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n     * @param initialState Optional [[InitialStates]] that represent the intial state of a created asset\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialState = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"CreateAssetTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.CREATEASSETTX\n            : constants_1.AVMConstants.CREATEASSETTX_CODECONE;\n        this.name = \"\";\n        this.symbol = \"\";\n        this.denomination = buffer_1.Buffer.alloc(1);\n        this.initialState = new initialstates_1.InitialStates();\n        /**\n         * Returns the id of the [[CreateAssetTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns the array of array of [[Output]]s for the initial state\n         */\n        this.getInitialStates = () => this.initialState;\n        /**\n         * Returns the string representation of the name\n         */\n        this.getName = () => this.name;\n        /**\n         * Returns the string representation of the symbol\n         */\n        this.getSymbol = () => this.symbol;\n        /**\n         * Returns the numeric representation of the denomination\n         */\n        this.getDenomination = () => this.denomination.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination\n         */\n        this.getDenominationBuffer = () => {\n            return this.denomination;\n        };\n        if (typeof name === \"string\" &&\n            typeof symbol === \"string\" &&\n            typeof denomination === \"number\" &&\n            denomination >= 0 &&\n            denomination <= 32 &&\n            typeof initialState !== \"undefined\") {\n            this.initialState = initialState;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { name: serialization.encoder(this.name, encoding, utf8, utf8), symbol: serialization.encoder(this.symbol, encoding, utf8, utf8), denomination: serialization.encoder(this.denomination, encoding, buffer, decimalString, 1), initialState: this.initialState.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.name = serialization.decoder(fields[\"name\"], encoding, utf8, utf8);\n        this.symbol = serialization.decoder(fields[\"symbol\"], encoding, utf8, utf8);\n        this.denomination = serialization.decoder(fields[\"denomination\"], encoding, decimalString, buffer, 1);\n        this.initialState = new initialstates_1.InitialStates();\n        this.initialState.deserialize(fields[\"initialState\"], encoding);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - CreateAssetTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.CREATEASSETTX\n                : constants_1.AVMConstants.CREATEASSETTX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]\n     *\n     * @returns The length of the raw [[CreateAssetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const namesize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.name = bintools\n            .copyFrom(bytes, offset, offset + namesize)\n            .toString(\"utf8\");\n        offset += namesize;\n        const symsize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.symbol = bintools\n            .copyFrom(bytes, offset, offset + symsize)\n            .toString(\"utf8\");\n        offset += symsize;\n        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);\n        offset += 1;\n        const inits = new initialstates_1.InitialStates();\n        offset = inits.fromBuffer(bytes, offset);\n        this.initialState = inits;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const initstatebuff = this.initialState.toBuffer();\n        const namebuff = buffer_1.Buffer.alloc(this.name.length);\n        namebuff.write(this.name, 0, this.name.length, utf8);\n        const namesize = buffer_1.Buffer.alloc(2);\n        namesize.writeUInt16BE(this.name.length, 0);\n        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);\n        symbuff.write(this.symbol, 0, this.symbol.length, utf8);\n        const symsize = buffer_1.Buffer.alloc(2);\n        symsize.writeUInt16BE(this.symbol.length, 0);\n        const bsize = superbuff.length +\n            namesize.length +\n            namebuff.length +\n            symsize.length +\n            symbuff.length +\n            this.denomination.length +\n            initstatebuff.length;\n        const barr = [\n            superbuff,\n            namesize,\n            namebuff,\n            symsize,\n            symbuff,\n            this.denomination,\n            initstatebuff\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new CreateAssetTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new CreateAssetTx(...args);\n    }\n}\nexports.CreateAssetTx = CreateAssetTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Reporter = require('../base/reporter').Reporter;\nconst Buffer = require('safer-buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n  if (data instanceof DecoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    Buffer.isBuffer(data.base) &&\n    data.constructor.name === 'DecoderBuffer' &&\n    typeof data.offset === 'number' &&\n    typeof data.length === 'number' &&\n    typeof data.save === 'function' &&\n    typeof data.restore === 'function' &&\n    typeof data.isEmpty === 'function' &&\n    typeof data.readUInt8 === 'function' &&\n    typeof data.skip === 'function' &&\n    typeof data.raw === 'function';\n\n  return isCompatible;\n};\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  const res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n};\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  const res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n};\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n};\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!EncoderBuffer.isEncoderBuffer(item))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n  if (data instanceof EncoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    data.constructor.name === 'EncoderBuffer' &&\n    typeof data.length === 'number' &&\n    typeof data.join === 'function';\n\n  return isCompatible;\n};\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = Buffer.alloc(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenesisAsset = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-GenesisAsset\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst initialstates_1 = require(\"./initialstates\");\nconst constants_1 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst createassettx_1 = require(\"./createassettx\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * @ignore\n */\nconst serialization = serialization_1.Serialization.getInstance();\nconst bintools = bintools_1.default.getInstance();\nconst utf8 = \"utf8\";\nconst buffer = \"Buffer\";\nconst decimalString = \"decimalString\";\nclass GenesisAsset extends createassettx_1.CreateAssetTx {\n    /**\n     * Class representing a GenesisAsset\n     *\n     * @param assetAlias Optional String for the asset alias\n     * @param name Optional String for the descriptive name of the asset\n     * @param symbol Optional String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n     * @param initialState Optional [[InitialStates]] that represent the intial state of a created asset\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(assetAlias = undefined, name = undefined, symbol = undefined, denomination = undefined, initialState = undefined, memo = undefined) {\n        super(constants_1.DefaultNetworkID, buffer_1.Buffer.alloc(32), [], [], memo);\n        this._typeName = \"GenesisAsset\";\n        this._codecID = undefined;\n        this._typeID = undefined;\n        this.assetAlias = \"\";\n        /**\n         * Returns the string representation of the assetAlias\n         */\n        this.getAssetAlias = () => this.assetAlias;\n        if (typeof assetAlias === \"string\" &&\n            typeof name === \"string\" &&\n            typeof symbol === \"string\" &&\n            typeof denomination === \"number\" &&\n            denomination >= 0 &&\n            denomination <= 32 &&\n            typeof initialState !== \"undefined\") {\n            this.assetAlias = assetAlias;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n            this.initialState = initialState;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        delete fields[\"blockchainID\"];\n        delete fields[\"outs\"];\n        delete fields[\"ins\"];\n        return Object.assign(Object.assign({}, fields), { assetAlias: serialization.encoder(this.assetAlias, encoding, utf8, utf8), name: serialization.encoder(this.name, encoding, utf8, utf8), symbol: serialization.encoder(this.symbol, encoding, utf8, utf8), denomination: serialization.encoder(this.denomination, encoding, buffer, decimalString, 1), initialState: this.initialState.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"blockchainID\"] = buffer_1.Buffer.alloc(32, 16).toString(\"hex\");\n        fields[\"outs\"] = [];\n        fields[\"ins\"] = [];\n        super.deserialize(fields, encoding);\n        this.assetAlias = serialization.decoder(fields[\"assetAlias\"], encoding, utf8, utf8);\n        this.name = serialization.decoder(fields[\"name\"], encoding, utf8, utf8);\n        this.symbol = serialization.decoder(fields[\"symbol\"], encoding, utf8, utf8);\n        this.denomination = serialization.decoder(fields[\"denomination\"], encoding, decimalString, buffer, 1);\n        this.initialState = new initialstates_1.InitialStates();\n        this.initialState.deserialize(fields[\"initialState\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[GenesisAsset]], parses it, populates the class, and returns the length of the [[GenesisAsset]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[GenesisAsset]]\n     *\n     * @returns The length of the raw [[GenesisAsset]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        const assetAliasSize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.assetAlias = bintools\n            .copyFrom(bytes, offset, offset + assetAliasSize)\n            .toString(\"utf8\");\n        offset += assetAliasSize;\n        offset += super.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[GenesisAsset]].\n     */\n    toBuffer(networkID = constants_1.DefaultNetworkID) {\n        // asset alias\n        const assetAlias = this.getAssetAlias();\n        const assetAliasbuffSize = buffer_1.Buffer.alloc(2);\n        assetAliasbuffSize.writeUInt16BE(assetAlias.length, 0);\n        let bsize = assetAliasbuffSize.length;\n        let barr = [assetAliasbuffSize];\n        const assetAliasbuff = buffer_1.Buffer.alloc(assetAlias.length);\n        assetAliasbuff.write(assetAlias, 0, assetAlias.length, utf8);\n        bsize += assetAliasbuff.length;\n        barr.push(assetAliasbuff);\n        const networkIDBuff = buffer_1.Buffer.alloc(4);\n        networkIDBuff.writeUInt32BE(new bn_js_1.default(networkID).toNumber(), 0);\n        bsize += networkIDBuff.length;\n        barr.push(networkIDBuff);\n        // Blockchain ID\n        bsize += 32;\n        barr.push(buffer_1.Buffer.alloc(32));\n        // num Outputs\n        bsize += 4;\n        barr.push(buffer_1.Buffer.alloc(4));\n        // num Inputs\n        bsize += 4;\n        barr.push(buffer_1.Buffer.alloc(4));\n        // memo\n        const memo = this.getMemo();\n        const memobuffSize = buffer_1.Buffer.alloc(4);\n        memobuffSize.writeUInt32BE(memo.length, 0);\n        bsize += memobuffSize.length;\n        barr.push(memobuffSize);\n        bsize += memo.length;\n        barr.push(memo);\n        // asset name\n        const name = this.getName();\n        const namebuffSize = buffer_1.Buffer.alloc(2);\n        namebuffSize.writeUInt16BE(name.length, 0);\n        bsize += namebuffSize.length;\n        barr.push(namebuffSize);\n        const namebuff = buffer_1.Buffer.alloc(name.length);\n        namebuff.write(name, 0, name.length, utf8);\n        bsize += namebuff.length;\n        barr.push(namebuff);\n        // symbol\n        const symbol = this.getSymbol();\n        const symbolbuffSize = buffer_1.Buffer.alloc(2);\n        symbolbuffSize.writeUInt16BE(symbol.length, 0);\n        bsize += symbolbuffSize.length;\n        barr.push(symbolbuffSize);\n        const symbolbuff = buffer_1.Buffer.alloc(symbol.length);\n        symbolbuff.write(symbol, 0, symbol.length, utf8);\n        bsize += symbolbuff.length;\n        barr.push(symbolbuff);\n        // denomination\n        const denomination = this.getDenomination();\n        const denominationbuffSize = buffer_1.Buffer.alloc(1);\n        denominationbuffSize.writeUInt8(denomination, 0);\n        bsize += denominationbuffSize.length;\n        barr.push(denominationbuffSize);\n        bsize += this.initialState.toBuffer().length;\n        barr.push(this.initialState.toBuffer());\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.GenesisAsset = GenesisAsset;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-InitialStates\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialStates = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst output_1 = require(\"../../common/output\");\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for creating initial output states used in asset creation\n */\nclass InitialStates extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"InitialStates\";\n        this._typeID = undefined;\n        this.fxs = {};\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        const flatfxs = {};\n        for (let fxid in this.fxs) {\n            flatfxs[`${fxid}`] = this.fxs[`${fxid}`].map((o) => o.serialize(encoding));\n        }\n        return Object.assign(Object.assign({}, fields), { fxs: flatfxs });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        const unflat = {};\n        for (let fxid in fields[\"fxs\"]) {\n            unflat[`${fxid}`] = fields[\"fxs\"][`${fxid}`].map((o) => {\n                const out = (0, outputs_1.SelectOutputClass)(o[\"_typeID\"]);\n                out.deserialize(o, encoding);\n                return out;\n            });\n        }\n        this.fxs = unflat;\n    }\n    /**\n     *\n     * @param out The output state to add to the collection\n     * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID\n     */\n    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {\n        if (!(fxid in this.fxs)) {\n            this.fxs[`${fxid}`] = [];\n        }\n        this.fxs[`${fxid}`].push(out);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const result = [];\n        const klen = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const klennum = klen.readUInt32BE(0);\n        for (let i = 0; i < klennum; i++) {\n            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const fxid = fxidbuff.readUInt32BE(0);\n            result[`${fxid}`] = [];\n            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const statelen = statelenbuff.readUInt32BE(0);\n            for (let j = 0; j < statelen; j++) {\n                const outputid = bintools\n                    .copyFrom(bytes, offset, offset + 4)\n                    .readUInt32BE(0);\n                offset += 4;\n                const out = (0, outputs_1.SelectOutputClass)(outputid);\n                offset = out.fromBuffer(bytes, offset);\n                result[`${fxid}`].push(out);\n            }\n        }\n        this.fxs = result;\n        return offset;\n    }\n    toBuffer() {\n        const buff = [];\n        const keys = Object.keys(this.fxs)\n            .map((k) => parseInt(k, 10))\n            .sort();\n        const klen = buffer_1.Buffer.alloc(4);\n        klen.writeUInt32BE(keys.length, 0);\n        buff.push(klen);\n        for (let i = 0; i < keys.length; i++) {\n            const fxid = keys[`${i}`];\n            const fxidbuff = buffer_1.Buffer.alloc(4);\n            fxidbuff.writeUInt32BE(fxid, 0);\n            buff.push(fxidbuff);\n            const initialState = this.fxs[`${fxid}`].sort(output_1.Output.comparator());\n            const statelen = buffer_1.Buffer.alloc(4);\n            statelen.writeUInt32BE(initialState.length, 0);\n            buff.push(statelen);\n            for (let j = 0; j < initialState.length; j++) {\n                const outputid = buffer_1.Buffer.alloc(4);\n                outputid.writeInt32BE(initialState[`${j}`].getOutputID(), 0);\n                buff.push(outputid);\n                buff.push(initialState[`${j}`].toBuffer());\n            }\n        }\n        return buffer_1.Buffer.concat(buff);\n    }\n}\nexports.InitialStates = InitialStates;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\n// there's 3 implementations written in increasing order of efficiency\n\n// 1 - no Set type is defined\nfunction uniqNoSet(arr) {\n\tvar ret = [];\n\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (ret.indexOf(arr[i]) === -1) {\n\t\t\tret.push(arr[i]);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// 2 - a simple Set type is defined\nfunction uniqSet(arr) {\n\tvar seen = new Set();\n\treturn arr.filter(function (el) {\n\t\tif (!seen.has(el)) {\n\t\t\tseen.add(el);\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n// 3 - a standard Set type is defined and it has a forEach method\nfunction uniqSetWithForEach(arr) {\n\tvar ret = [];\n\n\t(new Set(arr)).forEach(function (el) {\n\t\tret.push(el);\n\t});\n\n\treturn ret;\n}\n\n// V8 currently has a broken implementation\n// https://github.com/joyent/node/issues/8449\nfunction doesForEachActuallyWork() {\n\tvar ret = false;\n\n\t(new Set([true])).forEach(function (el) {\n\t\tret = el;\n\t});\n\n\treturn ret === true;\n}\n\nif ('Set' in global) {\n\tif (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {\n\t\tmodule.exports = uniqSetWithForEach;\n\t} else {\n\t\tmodule.exports = uniqSet;\n\t}\n} else {\n\tmodule.exports = uniqNoSet;\n}\n","'use strict';\n\nconst asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","'use strict';\n\nconst Reporter = require('../base/reporter').Reporter;\nconst EncoderBuffer = require('../base/buffer').EncoderBuffer;\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst assert = require('minimalistic-assert');\n\n// Supported tags\nconst tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nconst methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nconst overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent, name) {\n  const state = {};\n  this._baseState = state;\n\n  state.name = name;\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nconst stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  const state = this._baseState;\n  const cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  const res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  const state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      const clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  const state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  const state = this._baseState;\n\n  // Filter children and args\n  const children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      const res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        const value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    const state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    const state = this._baseState;\n    const args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  const state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  const state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  const state = this._baseState;\n  const args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  const state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  const state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  const state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  let result = state['default'];\n  let present = true;\n\n  let prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    let tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      const save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  let prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      const explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    const start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      let save;\n      if (state.any)\n        save = input.save();\n      const body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any) {\n      // no-op\n    } else if (state.choice === null) {\n      result = this._decodeGeneric(state.tag, input, options);\n    } else {\n      result = this._decodeChoice(input, options);\n    }\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      const data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n        ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  const state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n      ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  const state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  const state = this._baseState;\n  let result = null;\n  let match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    const save = input.save();\n    const node = state.choice[key];\n    try {\n      const value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  const state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  const result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  let result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default'];\n    else\n      return;\n  }\n\n  // Encode children first\n  let content = null;\n  let primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      const prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      const res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      const child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        const state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  if (!state.any && state.choice === null) {\n    const tag = state.implicit !== null ? state.implicit : state.tag;\n    const cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  const state = this._baseState;\n\n  const node = state.choice[data.type];\n  if (!node) {\n    assert(\n      false,\n      data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  const state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n};\n","'use strict';\n\nconst inherits = require('inherits');\n\nconst DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  const buf = DEREncoder.prototype.encode.call(this, data);\n\n  const p = buf.toString('base64');\n  const out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (let i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","'use strict';\n\n// Helper\nfunction reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n}\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = reverse(exports.tag);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = \"\";\n        this.hrp = \"\";\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            const type = \"bech32\";\n            return serialization.bufferToType(addr, type, this.hrp, this.chainid);\n        };\n        /**\n         * Returns the chainID associated with this key.\n         *\n         * @returns The [[KeyPair]]'s chainID\n         */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        const newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = \"\";\n        this.chainid = \"\";\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n\n  const label = options.label.toUpperCase();\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMConstants = void 0;\nclass AVMConstants {\n}\nexports.AVMConstants = AVMConstants;\nAVMConstants.LATESTCODEC = 0;\nAVMConstants.SECPFXID = 0;\nAVMConstants.NFTFXID = 1;\nAVMConstants.SECPMINTOUTPUTID = 6;\nAVMConstants.SECPMINTOUTPUTID_CODECONE = 65537;\nAVMConstants.SECPXFEROUTPUTID = 7;\nAVMConstants.SECPXFEROUTPUTID_CODECONE = 65538;\nAVMConstants.NFTXFEROUTPUTID = 11;\nAVMConstants.NFTXFEROUTPUTID_CODECONE = 131073;\nAVMConstants.NFTMINTOUTPUTID = 10;\nAVMConstants.NFTMINTOUTPUTID_CODECONE = 131072;\nAVMConstants.SECPINPUTID = 5;\nAVMConstants.SECPINPUTID_CODECONE = 65536;\nAVMConstants.SECPMINTOPID = 8;\nAVMConstants.SECPMINTOPID_CODECONE = 65539;\nAVMConstants.NFTMINTOPID = 12;\nAVMConstants.NFTMINTOPID_CODECONE = 131074;\nAVMConstants.NFTXFEROPID = 13;\nAVMConstants.NFTXFEROPID_CODECONE = 131075;\nAVMConstants.BASETX = 0;\nAVMConstants.BASETX_CODECONE = 0;\nAVMConstants.CREATEASSETTX = 1;\nAVMConstants.CREATEASSETTX_CODECONE = 1;\nAVMConstants.OPERATIONTX = 2;\nAVMConstants.OPERATIONTX_CODECONE = 2;\nAVMConstants.IMPORTTX = 3;\nAVMConstants.IMPORTTX_CODECONE = 3;\nAVMConstants.EXPORTTX = 4;\nAVMConstants.EXPORTTX_CODECONE = 4;\nAVMConstants.SECPCREDENTIAL = 9;\nAVMConstants.SECPCREDENTIAL_CODECONE = 65540;\nAVMConstants.NFTCREDENTIAL = 14;\nAVMConstants.NFTCREDENTIAL_CODECONE = 131076;\nAVMConstants.ASSETIDLEN = 32;\nAVMConstants.BLOCKCHAINIDLEN = 32;\nAVMConstants.SYMBOLMAXLEN = 4;\nAVMConstants.ASSETNAMELEN = 128;\nAVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxNQUFhLFlBQVk7O0FBQXpCLG9DQTRFQztBQTNFUSx3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixxQkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQixvQkFBTyxHQUFXLENBQUMsQ0FBQTtBQUVuQiw2QkFBZ0IsR0FBVyxDQUFDLENBQUE7QUFFNUIsc0NBQXlCLEdBQVcsS0FBSyxDQUFBO0FBRXpDLDZCQUFnQixHQUFXLENBQUMsQ0FBQTtBQUU1QixzQ0FBeUIsR0FBVyxLQUFLLENBQUE7QUFFekMsNEJBQWUsR0FBVyxFQUFFLENBQUE7QUFFNUIscUNBQXdCLEdBQVcsTUFBTSxDQUFBO0FBRXpDLDRCQUFlLEdBQVcsRUFBRSxDQUFBO0FBRTVCLHFDQUF3QixHQUFXLE1BQU0sQ0FBQTtBQUV6Qyx3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixpQ0FBb0IsR0FBVyxLQUFLLENBQUE7QUFFcEMseUJBQVksR0FBVyxDQUFDLENBQUE7QUFFeEIsa0NBQXFCLEdBQVcsS0FBSyxDQUFBO0FBRXJDLHdCQUFXLEdBQVcsRUFBRSxDQUFBO0FBRXhCLGlDQUFvQixHQUFXLE1BQU0sQ0FBQTtBQUVyQyx3QkFBVyxHQUFXLEVBQUUsQ0FBQTtBQUV4QixpQ0FBb0IsR0FBVyxNQUFNLENBQUE7QUFFckMsbUJBQU0sR0FBVyxDQUFDLENBQUE7QUFFbEIsNEJBQWUsR0FBVyxDQUFDLENBQUE7QUFFM0IsMEJBQWEsR0FBVyxDQUFDLENBQUE7QUFFekIsbUNBQXNCLEdBQVcsQ0FBQyxDQUFBO0FBRWxDLHdCQUFXLEdBQVcsQ0FBQyxDQUFBO0FBRXZCLGlDQUFvQixHQUFXLENBQUMsQ0FBQTtBQUVoQyxxQkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQiw4QkFBaUIsR0FBVyxDQUFDLENBQUE7QUFFN0IscUJBQVEsR0FBVyxDQUFDLENBQUE7QUFFcEIsOEJBQWlCLEdBQVcsQ0FBQyxDQUFBO0FBRTdCLDJCQUFjLEdBQVcsQ0FBQyxDQUFBO0FBRTFCLG9DQUF1QixHQUFXLEtBQUssQ0FBQTtBQUV2QywwQkFBYSxHQUFXLEVBQUUsQ0FBQTtBQUUxQixtQ0FBc0IsR0FBVyxNQUFNLENBQUE7QUFFdkMsdUJBQVUsR0FBVyxFQUFFLENBQUE7QUFFdkIsNEJBQWUsR0FBVyxFQUFFLENBQUE7QUFFNUIseUJBQVksR0FBVyxDQUFDLENBQUE7QUFFeEIseUJBQVksR0FBVyxHQUFHLENBQUE7QUFFMUIsMEJBQWEsR0FBVyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLUNvbnN0YW50c1xuICovXG5cbmV4cG9ydCBjbGFzcyBBVk1Db25zdGFudHMge1xuICBzdGF0aWMgTEFURVNUQ09ERUM6IG51bWJlciA9IDBcblxuICBzdGF0aWMgU0VDUEZYSUQ6IG51bWJlciA9IDBcblxuICBzdGF0aWMgTkZURlhJRDogbnVtYmVyID0gMVxuXG4gIHN0YXRpYyBTRUNQTUlOVE9VVFBVVElEOiBudW1iZXIgPSA2XG5cbiAgc3RhdGljIFNFQ1BNSU5UT1VUUFVUSURfQ09ERUNPTkU6IG51bWJlciA9IDY1NTM3XG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDdcblxuICBzdGF0aWMgU0VDUFhGRVJPVVRQVVRJRF9DT0RFQ09ORTogbnVtYmVyID0gNjU1MzhcblxuICBzdGF0aWMgTkZUWEZFUk9VVFBVVElEOiBudW1iZXIgPSAxMVxuXG4gIHN0YXRpYyBORlRYRkVST1VUUFVUSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3M1xuXG4gIHN0YXRpYyBORlRNSU5UT1VUUFVUSUQ6IG51bWJlciA9IDEwXG5cbiAgc3RhdGljIE5GVE1JTlRPVVRQVVRJRF9DT0RFQ09ORTogbnVtYmVyID0gMTMxMDcyXG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEOiBudW1iZXIgPSA1XG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEX0NPREVDT05FOiBudW1iZXIgPSA2NTUzNlxuXG4gIHN0YXRpYyBTRUNQTUlOVE9QSUQ6IG51bWJlciA9IDhcblxuICBzdGF0aWMgU0VDUE1JTlRPUElEX0NPREVDT05FOiBudW1iZXIgPSA2NTUzOVxuXG4gIHN0YXRpYyBORlRNSU5UT1BJRDogbnVtYmVyID0gMTJcblxuICBzdGF0aWMgTkZUTUlOVE9QSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3NFxuXG4gIHN0YXRpYyBORlRYRkVST1BJRDogbnVtYmVyID0gMTNcblxuICBzdGF0aWMgTkZUWEZFUk9QSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3NVxuXG4gIHN0YXRpYyBCQVNFVFg6IG51bWJlciA9IDBcblxuICBzdGF0aWMgQkFTRVRYX0NPREVDT05FOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIENSRUFURUFTU0VUVFg6IG51bWJlciA9IDFcblxuICBzdGF0aWMgQ1JFQVRFQVNTRVRUWF9DT0RFQ09ORTogbnVtYmVyID0gMVxuXG4gIHN0YXRpYyBPUEVSQVRJT05UWDogbnVtYmVyID0gMlxuXG4gIHN0YXRpYyBPUEVSQVRJT05UWF9DT0RFQ09ORTogbnVtYmVyID0gMlxuXG4gIHN0YXRpYyBJTVBPUlRUWDogbnVtYmVyID0gM1xuXG4gIHN0YXRpYyBJTVBPUlRUWF9DT0RFQ09ORTogbnVtYmVyID0gM1xuXG4gIHN0YXRpYyBFWFBPUlRUWDogbnVtYmVyID0gNFxuXG4gIHN0YXRpYyBFWFBPUlRUWF9DT0RFQ09ORTogbnVtYmVyID0gNFxuXG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDogbnVtYmVyID0gOVxuXG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTF9DT0RFQ09ORTogbnVtYmVyID0gNjU1NDBcblxuICBzdGF0aWMgTkZUQ1JFREVOVElBTDogbnVtYmVyID0gMTRcblxuICBzdGF0aWMgTkZUQ1JFREVOVElBTF9DT0RFQ09ORTogbnVtYmVyID0gMTMxMDc2XG5cbiAgc3RhdGljIEFTU0VUSURMRU46IG51bWJlciA9IDMyXG5cbiAgc3RhdGljIEJMT0NLQ0hBSU5JRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgU1lNQk9MTUFYTEVOOiBudW1iZXIgPSA0XG5cbiAgc3RhdGljIEFTU0VUTkFNRUxFTjogbnVtYmVyID0gMTI4XG5cbiAgc3RhdGljIEFERFJFU1NMRU5HVEg6IG51bWJlciA9IDIwXG59XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-KeyChain\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainID = \"\";\n        this.hrp = \"\";\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            const type = \"bech32\";\n            return serialization.bufferToType(addr, type, this.hrp, this.chainID);\n        };\n        /**\n         * Returns the chainID associated with this key.\n         *\n         * @returns The [[KeyPair]]'s chainID\n         */\n        this.getChainID = () => this.chainID;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainID String for the chainID\n         */\n        this.setChainID = (chainID) => {\n            this.chainID = chainID;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainID = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        const newkp = new KeyPair(this.hrp, this.chainID);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainID);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainID) {\n        super();\n        this.hrp = \"\";\n        this.chainID = \"\";\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            const keypair = new KeyPair(this.hrp, this.chainID);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainID);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer}\n         * or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            const keypair = new KeyPair(this.hrp, this.chainID);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainID = chainID;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainID);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainID);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        const newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AuthAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AuthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n     * method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/auth\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/auth\") {\n        super(core, baseURL);\n        /**\n         * Creates a new authorization token that grants access to one or more API endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param endpoints A list of endpoints that will be accessible using the generated token. If there\"s an element that is \"*\", this token can reach any endpoint.\n         *\n         * @returns Returns a Promise<string> containing the authorization token.\n         */\n        this.newToken = (password, endpoints) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                endpoints\n            };\n            const response = yield this.callMethod(\"auth.newToken\", params);\n            return response.data.result.token\n                ? response.data.result.token\n                : response.data.result;\n        });\n        /**\n         * Revokes an authorization token, removing all of its rights to access endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param token An authorization token whose access should be revoked.\n         *\n         * @returns Returns a Promise<boolean> indicating if a token was successfully revoked.\n         */\n        this.revokeToken = (password, token) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                token\n            };\n            const response = yield this.callMethod(\"auth.revokeToken\", params);\n            return response.data.result.success;\n        });\n        /**\n         * Change this node's authorization token password. **Any authorization tokens created under an old password will become invalid.**\n         *\n         * @param oldPassword This node's authorization token password, set through the CLI when the node was launched.\n         * @param newPassword A new password for this node's authorization token issuance.\n         *\n         * @returns Returns a Promise<boolean> indicating if the password was successfully changed.\n         */\n        this.changePassword = (oldPassword, newPassword) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                oldPassword,\n                newPassword\n            };\n            const response = yield this.callMethod(\"auth.changePassword\", params);\n            return response.data.result.success;\n        });\n    }\n}\nexports.AuthAPI = AuthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXV0aC9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQThDO0FBUzlDOzs7Ozs7R0FNRztBQUNILE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBcUVsQzs7Ozs7O09BTUc7SUFDSCxZQUFZLElBQW1CLEVBQUUsVUFBa0IsV0FBVztRQUM1RCxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBNUV0Qjs7Ozs7OztXQU9HO1FBQ0gsYUFBUSxHQUFHLENBQ1QsUUFBZ0IsRUFDaEIsU0FBbUIsRUFDb0IsRUFBRTtZQUN6QyxNQUFNLE1BQU0sR0FBc0I7Z0JBQ2hDLFFBQVE7Z0JBQ1IsU0FBUzthQUNWLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUN6RCxlQUFlLEVBQ2YsTUFBTSxDQUNQLENBQUE7WUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7Z0JBQy9CLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO2dCQUM1QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDMUIsQ0FBQyxDQUFBLENBQUE7UUFFRDs7Ozs7OztXQU9HO1FBQ0gsZ0JBQVcsR0FBRyxDQUFPLFFBQWdCLEVBQUUsS0FBYSxFQUFvQixFQUFFO1lBQ3hFLE1BQU0sTUFBTSxHQUF5QjtnQkFDbkMsUUFBUTtnQkFDUixLQUFLO2FBQ04sQ0FBQTtZQUNELE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQ3pELGtCQUFrQixFQUNsQixNQUFNLENBQ1AsQ0FBQTtZQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ3JDLENBQUMsQ0FBQSxDQUFBO1FBRUQ7Ozs7Ozs7V0FPRztRQUNILG1CQUFjLEdBQUcsQ0FDZixXQUFtQixFQUNuQixXQUFtQixFQUNELEVBQUU7WUFDcEIsTUFBTSxNQUFNLEdBQTRCO2dCQUN0QyxXQUFXO2dCQUNYLFdBQVc7YUFDWixDQUFBO1lBQ0QsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FDekQscUJBQXFCLEVBQ3JCLE1BQU0sQ0FDUCxDQUFBO1lBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDckMsQ0FBQyxDQUFBLENBQUE7SUFXRCxDQUFDO0NBQ0Y7QUEvRUQsMEJBK0VDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUF1dGhcbiAqL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSBcIi4uLy4uL2F2YWxhbmNoZVwiXG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9qcnBjYXBpXCJcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FwaWJhc2VcIlxuaW1wb3J0IHsgRXJyb3JSZXNwb25zZU9iamVjdCB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuaW1wb3J0IHtcbiAgQ2hhbmdlUGFzc3dvcmRJbnRlcmZhY2UsXG4gIE5ld1Rva2VuSW50ZXJmYWNlLFxuICBSZXZva2VUb2tlbkludGVyZmFjZVxufSBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBdXRoQVBJLlxuICpcbiAqIEBjYXRlZ29yeSBSUENBUElzXG4gKlxuICogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW0pSUENBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYXV0aG9yaXphdGlvbiB0b2tlbiB0aGF0IGdyYW50cyBhY2Nlc3MgdG8gb25lIG9yIG1vcmUgQVBJIGVuZHBvaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAqIEBwYXJhbSBlbmRwb2ludHMgQSBsaXN0IG9mIGVuZHBvaW50cyB0aGF0IHdpbGwgYmUgYWNjZXNzaWJsZSB1c2luZyB0aGUgZ2VuZXJhdGVkIHRva2VuLiBJZiB0aGVyZVwicyBhbiBlbGVtZW50IHRoYXQgaXMgXCIqXCIsIHRoaXMgdG9rZW4gY2FuIHJlYWNoIGFueSBlbmRwb2ludC5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8c3RyaW5nPiBjb250YWluaW5nIHRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgKi9cbiAgbmV3VG9rZW4gPSBhc3luYyAoXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICBlbmRwb2ludHM6IHN0cmluZ1tdXG4gICk6IFByb21pc2U8c3RyaW5nIHwgRXJyb3JSZXNwb25zZU9iamVjdD4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczogTmV3VG9rZW5JbnRlcmZhY2UgPSB7XG4gICAgICBwYXNzd29yZCxcbiAgICAgIGVuZHBvaW50c1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcbiAgICAgIFwiYXV0aC5uZXdUb2tlblwiLFxuICAgICAgcGFyYW1zXG4gICAgKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC50b2tlblxuICAgICAgPyByZXNwb25zZS5kYXRhLnJlc3VsdC50b2tlblxuICAgICAgOiByZXNwb25zZS5kYXRhLnJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFJldm9rZXMgYW4gYXV0aG9yaXphdGlvbiB0b2tlbiwgcmVtb3ZpbmcgYWxsIG9mIGl0cyByaWdodHMgdG8gYWNjZXNzIGVuZHBvaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAqIEBwYXJhbSB0b2tlbiBBbiBhdXRob3JpemF0aW9uIHRva2VuIHdob3NlIGFjY2VzcyBzaG91bGQgYmUgcmV2b2tlZC5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8Ym9vbGVhbj4gaW5kaWNhdGluZyBpZiBhIHRva2VuIHdhcyBzdWNjZXNzZnVsbHkgcmV2b2tlZC5cbiAgICovXG4gIHJldm9rZVRva2VuID0gYXN5bmMgKHBhc3N3b3JkOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IFJldm9rZVRva2VuSW50ZXJmYWNlID0ge1xuICAgICAgcGFzc3dvcmQsXG4gICAgICB0b2tlblxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcbiAgICAgIFwiYXV0aC5yZXZva2VUb2tlblwiLFxuICAgICAgcGFyYW1zXG4gICAgKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzXG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQuICoqQW55IGF1dGhvcml6YXRpb24gdG9rZW5zIGNyZWF0ZWQgdW5kZXIgYW4gb2xkIHBhc3N3b3JkIHdpbGwgYmVjb21lIGludmFsaWQuKipcbiAgICpcbiAgICogQHBhcmFtIG9sZFBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAqIEBwYXJhbSBuZXdQYXNzd29yZCBBIG5ldyBwYXNzd29yZCBmb3IgdGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBpc3N1YW5jZS5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8Ym9vbGVhbj4gaW5kaWNhdGluZyBpZiB0aGUgcGFzc3dvcmQgd2FzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkLlxuICAgKi9cbiAgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAoXG4gICAgb2xkUGFzc3dvcmQ6IHN0cmluZyxcbiAgICBuZXdQYXNzd29yZDogc3RyaW5nXG4gICk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczogQ2hhbmdlUGFzc3dvcmRJbnRlcmZhY2UgPSB7XG4gICAgICBvbGRQYXNzd29yZCxcbiAgICAgIG5ld1Bhc3N3b3JkXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhdXRoLmNoYW5nZVBhc3N3b3JkXCIsXG4gICAgICBwYXJhbXNcbiAgICApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LiBJbnN0ZWFkIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV1cbiAgICogbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAqIEBwYXJhbSBiYXNlVVJMIERlZmF1bHRzIHRvIHRoZSBzdHJpbmcgXCIvZXh0L2F1dGhcIiBhcyB0aGUgcGF0aCB0byBycGMncyBiYXNlVVJMXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBBdmFsYW5jaGVDb3JlLCBiYXNlVVJMOiBzdHJpbmcgPSBcIi9leHQvYXV0aFwiKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZVVSTClcbiAgfVxufVxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiXG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTTransferOutput = exports.NFTMintOutput = exports.SECPMintOutput = exports.SECPTransferOutput = exports.NFTOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nconst SelectOutputClass = (outputid, ...args) => {\n    if (outputid === constants_1.AVMConstants.SECPXFEROUTPUTID ||\n        outputid === constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.SECPMINTOUTPUTID ||\n        outputid === constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE) {\n        return new SECPMintOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.NFTMINTOUTPUTID ||\n        outputid === constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE) {\n        return new NFTMintOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.NFTXFEROUTPUTID ||\n        outputid === constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE) {\n        return new NFTTransferOutput(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nexports.SelectOutputClass = SelectOutputClass;\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += constants_1.AVMConstants.ASSETIDLEN;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\nclass NFTOutput extends output_1.BaseNFTOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.NFTOutput = NFTOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPXFEROUTPUTID\n            : constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPXFEROUTPUTID\n                : constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPMintOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPMintOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPMINTOUTPUTID\n            : constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPMINTOUTPUTID\n                : constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.SECPMintOutput = SECPMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.\n */\nclass NFTMintOutput extends NFTOutput {\n    /**\n     * An [[Output]] class which contains an NFT mint for an assetID.\n     *\n     * @param groupID A number specifies the group this NFT is issued to\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing  addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n     */\n    constructor(groupID = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTMintOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTMINTOUTPUTID\n            : constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE;\n        if (typeof groupID !== \"undefined\") {\n            this.groupID.writeUInt32BE(groupID, 0);\n        }\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTMINTOUTPUTID\n                : constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOutput]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = this.groupID.length + superbuff.length;\n        let barr = [this.groupID, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTMintOutput = NFTMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.\n */\nclass NFTTransferOutput extends NFTOutput {\n    /**\n       * An [[Output]] class which contains an NFT on an assetID.\n       *\n       * @param groupID A number representing the amount in the output\n       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(groupID = undefined, payload = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTTransferOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTXFEROUTPUTID\n            : constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE;\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with content only.\n         */\n        this.getPayload = () => bintools.copyFrom(this.payload);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with length of payload prepended.\n         */\n        this.getPayloadBuffer = () => buffer_1.Buffer.concat([\n            bintools.copyFrom(this.sizePayload),\n            bintools.copyFrom(this.payload)\n        ]);\n        if (typeof groupID !== \"undefined\" && typeof payload !== \"undefined\") {\n            this.groupID.writeUInt32BE(groupID, 0);\n            this.sizePayload.writeUInt32BE(payload.length, 0);\n            this.payload = bintools.copyFrom(payload, 0, payload.length);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { payload: serialization.encoder(this.payload, encoding, \"Buffer\", \"hex\", this.payload.length) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.payload = serialization.decoder(fields[\"payload\"], encoding, \"hex\", \"Buffer\");\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTXFEROUTPUTID\n                : constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        this.sizePayload = bintools.copyFrom(utxobuff, offset, offset + 4);\n        let psize = this.sizePayload.readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(utxobuff, offset, offset + psize);\n        offset = offset + psize;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.groupID.length +\n            this.sizePayload.length +\n            this.payload.length +\n            superbuff.length;\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n        const barr = [\n            this.groupID,\n            this.sizePayload,\n            this.payload,\n            superbuff\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTTransferOutput = NFTTransferOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMConstants = void 0;\nclass EVMConstants {\n}\nexports.EVMConstants = EVMConstants;\nEVMConstants.SECPCREDENTIAL = 9;\nEVMConstants.IMPORTTX = 0;\nEVMConstants.EXPORTTX = 1;\nEVMConstants.SECPINPUTID = 5;\nEVMConstants.ASSETIDLEN = 32;\nEVMConstants.SECPXFEROUTPUTID = 7;\nEVMConstants.LATESTCODEC = 0;\nEVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFJSCxNQUFhLFlBQVk7O0FBQXpCLG9DQWdCQztBQWZRLDJCQUFjLEdBQVcsQ0FBQyxDQUFBO0FBRTFCLHFCQUFRLEdBQVcsQ0FBQyxDQUFBO0FBRXBCLHFCQUFRLEdBQVcsQ0FBQyxDQUFBO0FBRXBCLHdCQUFXLEdBQVcsQ0FBQyxDQUFBO0FBRXZCLHVCQUFVLEdBQVcsRUFBRSxDQUFBO0FBRXZCLDZCQUFnQixHQUFXLENBQUMsQ0FBQTtBQUU1Qix3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QiwwQkFBYSxHQUFXLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQ29uc3RhbnRzXG4gKi9cblxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5cbmV4cG9ydCBjbGFzcyBFVk1Db25zdGFudHMge1xuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6IG51bWJlciA9IDlcblxuICBzdGF0aWMgSU1QT1JUVFg6IG51bWJlciA9IDBcblxuICBzdGF0aWMgRVhQT1JUVFg6IG51bWJlciA9IDFcblxuICBzdGF0aWMgU0VDUElOUFVUSUQ6IG51bWJlciA9IDVcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgU0VDUFhGRVJPVVRQVVRJRDogbnVtYmVyID0gN1xuXG4gIHN0YXRpYyBMQVRFU1RDT0RFQzogbnVtYmVyID0gMFxuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOiBudW1iZXIgPSAyMFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEMge1xuICBibG9ja2NoYWluSUQ6IHN0cmluZ1xuICBhbGlhczogc3RyaW5nXG4gIHZtOiBzdHJpbmdcbiAgZmVlPzogQk5cbiAgZ2FzUHJpY2U6IEJOIHwgbnVtYmVyXG4gIGNoYWluSUQ/OiBudW1iZXJcbiAgbWluR2FzUHJpY2U/OiBCTlxuICBtYXhHYXNQcmljZT86IEJOXG4gIHR4Qnl0ZXNHYXM/OiBudW1iZXJcbiAgY29zdFBlclNpZ25hdHVyZT86IG51bWJlclxuICB0eEZlZT86IEJOXG4gIGF2YXhBc3NldElEPzogc3RyaW5nXG59XG5leHBvcnQgaW50ZXJmYWNlIFgge1xuICBibG9ja2NoYWluSUQ6IHN0cmluZ1xuICBhbGlhczogc3RyaW5nXG4gIHZtOiBzdHJpbmdcbiAgY3JlYXRpb25UeEZlZTogQk4gfCBudW1iZXJcbiAgYXZheEFzc2V0SUQ/OiBzdHJpbmdcbiAgdHhGZWU/OiBCTiB8IG51bWJlclxuICBmZWU/OiBCTlxufVxuZXhwb3J0IGludGVyZmFjZSBQIHtcbiAgYmxvY2tjaGFpbklEOiBzdHJpbmdcbiAgYWxpYXM6IHN0cmluZ1xuICB2bTogc3RyaW5nXG4gIGNyZWF0aW9uVHhGZWU6IEJOIHwgbnVtYmVyXG4gIG1pbkNvbnN1bXB0aW9uOiBudW1iZXJcbiAgbWF4Q29uc3VtcHRpb246IG51bWJlclxuICBtYXhTdGFraW5nRHVyYXRpb246IEJOXG4gIG1heFN1cHBseTogQk5cbiAgbWluU3Rha2U6IEJOXG4gIG1pblN0YWtlRHVyYXRpb246IG51bWJlclxuICBtYXhTdGFrZUR1cmF0aW9uOiBudW1iZXJcbiAgbWluRGVsZWdhdGlvblN0YWtlOiBCTlxuICBtaW5EZWxlZ2F0aW9uRmVlOiBCTlxuICBhdmF4QXNzZXRJRD86IHN0cmluZ1xuICB0eEZlZT86IEJOIHwgbnVtYmVyXG4gIGZlZT86IEJOXG59XG5leHBvcnQgaW50ZXJmYWNlIE5ldHdvcmsge1xuICBDOiBDXG4gIGhycDogc3RyaW5nXG4gIFg6IFhcbiAgUDogUFxuICBba2V5OiBzdHJpbmddOiBDIHwgWCB8IFAgfCBzdHJpbmdcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya3Mge1xuICBba2V5OiBudW1iZXJdOiBOZXR3b3JrXG59XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ExportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst inputs_1 = require(\"./inputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst outputs_1 = require(\"./outputs\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\nclass ExportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing a ExportTx.\n     *\n     * @param networkID Optional networkID\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param destinationChain Optional destinationChain, default Buffer.alloc(32, 16)\n     * @param inputs Optional array of the [[EVMInputs]]s\n     * @param exportedOutputs Optional array of the [[EVMOutputs]]s\n     */\n    constructor(networkID = undefined, blockchainID = buffer_1.Buffer.alloc(32, 16), destinationChain = buffer_1.Buffer.alloc(32, 16), inputs = undefined, exportedOutputs = undefined) {\n        super(networkID, blockchainID);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.EVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numInputs = buffer_1.Buffer.alloc(4);\n        this.inputs = [];\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.exportedOutputs = [];\n        /**\n         * Returns the destinationChain as a {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getDestinationChain = () => this.destinationChain;\n        /**\n         * Returns the inputs as an array of [[EVMInputs]]\n         */\n        this.getInputs = () => this.inputs;\n        /**\n         * Returns the outs as an array of [[EVMOutputs]]\n         */\n        this.getExportedOutputs = () => this.exportedOutputs;\n        this.destinationChain = destinationChain;\n        if (typeof inputs !== \"undefined\" && Array.isArray(inputs)) {\n            inputs.forEach((input) => {\n                if (!(input instanceof inputs_1.EVMInput)) {\n                    throw new errors_1.EVMInputError(\"Error - ExportTx.constructor: invalid EVMInput in array parameter 'inputs'\");\n                }\n            });\n            if (inputs.length > 1) {\n                inputs = inputs.sort(inputs_1.EVMInput.comparator());\n            }\n            this.inputs = inputs;\n        }\n        if (typeof exportedOutputs !== \"undefined\" &&\n            Array.isArray(exportedOutputs)) {\n            exportedOutputs.forEach((exportedOutput) => {\n                if (!(exportedOutput instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(\"Error - ExportTx.constructor: TransferableOutput EVMInput in array parameter 'exportedOutputs'\");\n                }\n            });\n            this.exportedOutputs = exportedOutputs;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serializer.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), exportedOutputs: this.exportedOutputs.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serializer.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportedOutputs = fields[\"exportedOutputs\"].map((i) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(i, encoding);\n            return eo;\n        });\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numInputs.writeUInt32BE(this.inputs.length, 0);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n        let barr = [\n            super.toBuffer(),\n            this.destinationChain,\n            this.numInputs\n        ];\n        let bsize = super.toBuffer().length +\n            this.destinationChain.length +\n            this.numInputs.length;\n        this.inputs.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numExportedOutputs.length;\n        barr.push(this.numExportedOutputs);\n        this.exportedOutputs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[ExportTx]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numInputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numInputs = this.numInputs.readUInt32BE(0);\n        for (let i = 0; i < numInputs; i++) {\n            const anIn = new inputs_1.EVMInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.inputs.push(anIn);\n        }\n        this.numExportedOutputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numExportedOutputs = this.numExportedOutputs.readUInt32BE(0);\n        for (let i = 0; i < numExportedOutputs; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportedOutputs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[ExportTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        this.inputs.forEach((input) => {\n            const cred = (0, credentials_1.SelectCredentialClass)(input.getCredentialID());\n            const sigidxs = input.getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            sigs.push(cred);\n        });\n        return sigs;\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-MinterSet\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinterSet = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst decimalString = \"decimalString\";\nconst cb58 = \"cb58\";\nconst num = \"number\";\nconst buffer = \"Buffer\";\n/**\n * Class for representing a threshold and set of minting addresses in Avalanche.\n *\n * @typeparam MinterSet including a threshold and array of addresses\n */\nclass MinterSet extends serialization_1.Serializable {\n    /**\n     *\n     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction\n     * @param minters Array of addresss which are authorized to sign a minting transaction\n     */\n    constructor(threshold = 1, minters = []) {\n        super();\n        this._typeName = \"MinterSet\";\n        this._typeID = undefined;\n        this.minters = [];\n        /**\n         * Returns the threshold.\n         */\n        this.getThreshold = () => {\n            return this.threshold;\n        };\n        /**\n         * Returns the minters.\n         */\n        this.getMinters = () => {\n            return this.minters;\n        };\n        this._cleanAddresses = (addresses) => {\n            let addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[`${i}`] === \"string\") {\n                    addrs.push(bintools.stringToAddress(addresses[`${i}`]));\n                }\n                else if (addresses[`${i}`] instanceof buffer_1.Buffer) {\n                    addrs.push(addresses[`${i}`]);\n                }\n            }\n            return addrs;\n        };\n        this.threshold = threshold;\n        this.minters = this._cleanAddresses(minters);\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { threshold: serialization.encoder(this.threshold, encoding, num, decimalString, 4), minters: this.minters.map((m) => serialization.encoder(m, encoding, buffer, cb58, 20)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.threshold = serialization.decoder(fields[\"threshold\"], encoding, decimalString, num, 4);\n        this.minters = fields[\"minters\"].map((m) => serialization.decoder(m, encoding, cb58, buffer, 20));\n    }\n}\nexports.MinterSet = MinterSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludGVyc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL21pbnRlcnNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBQzNDLDZEQUtrQztBQUVsQzs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDakQsTUFBTSxhQUFhLEdBQWtCLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDaEUsTUFBTSxhQUFhLEdBQW1CLGVBQWUsQ0FBQTtBQUNyRCxNQUFNLElBQUksR0FBbUIsTUFBTSxDQUFBO0FBQ25DLE1BQU0sR0FBRyxHQUFtQixRQUFRLENBQUE7QUFDcEMsTUFBTSxNQUFNLEdBQW1CLFFBQVEsQ0FBQTtBQUV2Qzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUErRHpDOzs7O09BSUc7SUFDSCxZQUFZLFlBQW9CLENBQUMsRUFBRSxVQUErQixFQUFFO1FBQ2xFLEtBQUssRUFBRSxDQUFBO1FBcEVDLGNBQVMsR0FBRyxXQUFXLENBQUE7UUFDdkIsWUFBTyxHQUFHLFNBQVMsQ0FBQTtRQWlDbkIsWUFBTyxHQUFhLEVBQUUsQ0FBQTtRQUVoQzs7V0FFRztRQUNILGlCQUFZLEdBQUcsR0FBVyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtRQUN2QixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFhLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ3JCLENBQUMsQ0FBQTtRQUVTLG9CQUFlLEdBQUcsQ0FBQyxTQUE4QixFQUFZLEVBQUU7WUFDdkUsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFBO1lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3pDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBVyxDQUFDLENBQUMsQ0FBQTtpQkFDbEU7cUJBQU0sSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLGVBQU0sRUFBRTtvQkFDOUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBVyxDQUFDLENBQUE7aUJBQ3hDO2FBQ0Y7WUFDRCxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUMsQ0FBQTtRQVNDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBcEVELFNBQVMsQ0FBQyxXQUErQixLQUFLO1FBQzVDLE1BQU0sTUFBTSxHQUFXLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEQsdUNBQ0ssTUFBTSxLQUNULFNBQVMsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUM5QixJQUFJLENBQUMsU0FBUyxFQUNkLFFBQVEsRUFDUixHQUFHLEVBQ0gsYUFBYSxFQUNiLENBQUMsQ0FDRixFQUNELE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQzlCLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUNyRCxJQUNGO0lBQ0gsQ0FBQztJQUNELFdBQVcsQ0FBQyxNQUFjLEVBQUUsV0FBK0IsS0FBSztRQUM5RCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQ3BDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFDbkIsUUFBUSxFQUNSLGFBQWEsRUFDYixHQUFHLEVBQ0gsQ0FBQyxDQUNGLENBQUE7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUNqRCxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FDckQsQ0FBQTtJQUNILENBQUM7Q0F5Q0Y7QUF6RUQsOEJBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1NaW50ZXJTZXRcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uLy4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7XG4gIFNlcmlhbGl6YWJsZSxcbiAgU2VyaWFsaXphdGlvbixcbiAgU2VyaWFsaXplZEVuY29kaW5nLFxuICBTZXJpYWxpemVkVHlwZVxufSBmcm9tIFwiLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5jb25zdCBkZWNpbWFsU3RyaW5nOiBTZXJpYWxpemVkVHlwZSA9IFwiZGVjaW1hbFN0cmluZ1wiXG5jb25zdCBjYjU4OiBTZXJpYWxpemVkVHlwZSA9IFwiY2I1OFwiXG5jb25zdCBudW06IFNlcmlhbGl6ZWRUeXBlID0gXCJudW1iZXJcIlxuY29uc3QgYnVmZmVyOiBTZXJpYWxpemVkVHlwZSA9IFwiQnVmZmVyXCJcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgdGhyZXNob2xkIGFuZCBzZXQgb2YgbWludGluZyBhZGRyZXNzZXMgaW4gQXZhbGFuY2hlLlxuICpcbiAqIEB0eXBlcGFyYW0gTWludGVyU2V0IGluY2x1ZGluZyBhIHRocmVzaG9sZCBhbmQgYXJyYXkgb2YgYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBNaW50ZXJTZXQgZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJNaW50ZXJTZXRcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgY29uc3QgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIHRocmVzaG9sZDogc2VyaWFsaXphdGlvbi5lbmNvZGVyKFxuICAgICAgICB0aGlzLnRocmVzaG9sZCxcbiAgICAgICAgZW5jb2RpbmcsXG4gICAgICAgIG51bSxcbiAgICAgICAgZGVjaW1hbFN0cmluZyxcbiAgICAgICAgNFxuICAgICAgKSxcbiAgICAgIG1pbnRlcnM6IHRoaXMubWludGVycy5tYXAoKG0pID0+XG4gICAgICAgIHNlcmlhbGl6YXRpb24uZW5jb2RlcihtLCBlbmNvZGluZywgYnVmZmVyLCBjYjU4LCAyMClcbiAgICAgIClcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnRocmVzaG9sZCA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcInRocmVzaG9sZFwiXSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgZGVjaW1hbFN0cmluZyxcbiAgICAgIG51bSxcbiAgICAgIDRcbiAgICApXG4gICAgdGhpcy5taW50ZXJzID0gZmllbGRzW1wibWludGVyc1wiXS5tYXAoKG06IHN0cmluZykgPT5cbiAgICAgIHNlcmlhbGl6YXRpb24uZGVjb2RlcihtLCBlbmNvZGluZywgY2I1OCwgYnVmZmVyLCAyMClcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgdGhyZXNob2xkOiBudW1iZXJcbiAgcHJvdGVjdGVkIG1pbnRlcnM6IEJ1ZmZlcltdID0gW11cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGhyZXNob2xkLlxuICAgKi9cbiAgZ2V0VGhyZXNob2xkID0gKCk6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMudGhyZXNob2xkXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWludGVycy5cbiAgICovXG4gIGdldE1pbnRlcnMgPSAoKTogQnVmZmVyW10gPT4ge1xuICAgIHJldHVybiB0aGlzLm1pbnRlcnNcbiAgfVxuXG4gIHByb3RlY3RlZCBfY2xlYW5BZGRyZXNzZXMgPSAoYWRkcmVzc2VzOiBzdHJpbmdbXSB8IEJ1ZmZlcltdKTogQnVmZmVyW10gPT4ge1xuICAgIGxldCBhZGRyczogQnVmZmVyW10gPSBbXVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0eXBlb2YgYWRkcmVzc2VzW2Ake2l9YF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYWRkcnMucHVzaChiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcmVzc2VzW2Ake2l9YF0gYXMgc3RyaW5nKSlcbiAgICAgIH0gZWxzZSBpZiAoYWRkcmVzc2VzW2Ake2l9YF0gaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgYWRkcnMucHVzaChhZGRyZXNzZXNbYCR7aX1gXSBhcyBCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhZGRyc1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB0aHJlc2hvbGQgVGhlIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIG1pbnQgbW9yZSBvZiBhbiBhc3NldCBieSBzaWduaW5nIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gbWludGVycyBBcnJheSBvZiBhZGRyZXNzcyB3aGljaCBhcmUgYXV0aG9yaXplZCB0byBzaWduIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IodGhyZXNob2xkOiBudW1iZXIgPSAxLCBtaW50ZXJzOiBzdHJpbmdbXSB8IEJ1ZmZlcltdID0gW10pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50aHJlc2hvbGQgPSB0aHJlc2hvbGRcbiAgICB0aGlzLm1pbnRlcnMgPSB0aGlzLl9jbGVhbkFkZHJlc3NlcyhtaW50ZXJzKVxuICB9XG59XG4iXX0=","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-BaseTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMBaseTx extends evmtx_1.EVMStandardBaseTx {\n    /**\n     * Class representing an EVMBaseTx which is the foundation for all EVM transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super(networkID, blockchainID);\n        this._typeName = \"BaseTx\";\n        this._typeID = undefined;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        return sigs;\n    }\n    clone() {\n        const newEVMBaseTx = new EVMBaseTx();\n        newEVMBaseTx.fromBuffer(this.toBuffer());\n        return newEVMBaseTx;\n    }\n    create(...args) {\n        return new EVMBaseTx(...args);\n    }\n    select(id, ...args) {\n        const newEVMBaseTx = (0, tx_1.SelectTxClass)(id, ...args);\n        return newEVMBaseTx;\n    }\n}\nexports.EVMBaseTx = EVMBaseTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZXR4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2Jhc2V0eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBRTNDLDhDQUFzRDtBQUV0RCxxREFBd0Q7QUFDeEQsNkJBQW9DO0FBR3BDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVqRDs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLHlCQUFvQztJQThEakU7Ozs7O09BS0c7SUFDSCxZQUNFLFlBQW9CLDRCQUFnQixFQUNwQyxlQUF1QixlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFFM0MsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQXZFdEIsY0FBUyxHQUFHLFFBQVEsQ0FBQTtRQUNwQixZQUFPLEdBQUcsU0FBUyxDQUFBO1FBUTdCOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQVcsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDckIsQ0FBQyxDQUFBO0lBMERELENBQUM7SUFyRUQsd0JBQXdCO0lBRXhCLFdBQVcsQ0FBQyxNQUFjLEVBQUUsV0FBK0IsS0FBSztRQUM5RCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBU0Q7Ozs7Ozs7O09BUUc7SUFDSCxVQUFVLENBQUMsS0FBYSxFQUFFLFNBQWlCLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzdELE1BQU0sSUFBSSxDQUFDLENBQUE7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDakUsTUFBTSxJQUFJLEVBQUUsQ0FBQTtRQUNaLE9BQU8sTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLENBQUMsR0FBVyxFQUFFLEVBQVk7UUFDNUIsTUFBTSxJQUFJLEdBQWlCLEVBQUUsQ0FBQTtRQUM3QixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxZQUFZLEdBQWMsSUFBSSxTQUFTLEVBQUUsQ0FBQTtRQUMvQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ3hDLE9BQU8sWUFBb0IsQ0FBQTtJQUM3QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUE7SUFDdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVLEVBQUUsR0FBRyxJQUFXO1FBQy9CLE1BQU0sWUFBWSxHQUFjLElBQUEsa0JBQWEsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUMxRCxPQUFPLFlBQW9CLENBQUE7SUFDN0IsQ0FBQztDQWNGO0FBMUVELDhCQTBFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQmFzZVR4XG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IEJpblRvb2xzIGZyb20gXCIuLi8uLi91dGlscy9iaW50b29sc1wiXG5pbXBvcnQgeyBLZXlDaGFpbiwgS2V5UGFpciB9IGZyb20gXCIuL2tleWNoYWluXCJcbmltcG9ydCB7IEVWTVN0YW5kYXJkQmFzZVR4IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9ldm10eFwiXG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jcmVkZW50aWFsc1wiXG5pbXBvcnQgeyBEZWZhdWx0TmV0d29ya0lEIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBTZWxlY3RUeENsYXNzIH0gZnJvbSBcIi4vdHhcIlxuaW1wb3J0IHsgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIGJhc2UgZm9yIGFsbCB0cmFuc2FjdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFVk1CYXNlVHggZXh0ZW5kcyBFVk1TdGFuZGFyZEJhc2VUeDxLZXlQYWlyLCBLZXlDaGFpbj4ge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJCYXNlVHhcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIC8vc2VyaWFsaXplIGlzIGluaGVyaXRlZFxuXG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhlIFtbQmFzZVR4XV1cbiAgICovXG4gIGdldFR4VHlwZSA9ICgpOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiB0aGlzLl90eXBlSURcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYW4gW1tCYXNlVHhdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBCYXNlVHggaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tCYXNlVHhdXVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tCYXNlVHhdXVxuICAgKlxuICAgKiBAcmVtYXJrcyBhc3N1bWUgbm90LWNoZWNrc3VtbWVkXG4gICAqL1xuICBmcm9tQnVmZmVyKGJ5dGVzOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgdGhpcy5uZXR3b3JrSUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgIG9mZnNldCArPSA0XG4gICAgdGhpcy5ibG9ja2NoYWluSUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMilcbiAgICBvZmZzZXQgKz0gMzJcbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgdGhlIGJ5dGVzIG9mIGFuIFtbVW5zaWduZWRUeF1dIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIFtbQ3JlZGVudGlhbF1dc1xuICAgKlxuICAgKiBAcGFyYW0gbXNnIEEgQnVmZmVyIGZvciB0aGUgW1tVbnNpZ25lZFR4XV1cbiAgICogQHBhcmFtIGtjIEFuIFtbS2V5Q2hhaW5dXSB1c2VkIGluIHNpZ25pbmdcbiAgICpcbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgW1tDcmVkZW50aWFsXV1zXG4gICAqL1xuICBzaWduKG1zZzogQnVmZmVyLCBrYzogS2V5Q2hhaW4pOiBDcmVkZW50aWFsW10ge1xuICAgIGNvbnN0IHNpZ3M6IENyZWRlbnRpYWxbXSA9IFtdXG4gICAgcmV0dXJuIHNpZ3NcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0VWTUJhc2VUeDogRVZNQmFzZVR4ID0gbmV3IEVWTUJhc2VUeCgpXG4gICAgbmV3RVZNQmFzZVR4LmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKVxuICAgIHJldHVybiBuZXdFVk1CYXNlVHggYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBFVk1CYXNlVHgoLi4uYXJncykgYXMgdGhpc1xuICB9XG5cbiAgc2VsZWN0KGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgY29uc3QgbmV3RVZNQmFzZVR4OiBFVk1CYXNlVHggPSBTZWxlY3RUeENsYXNzKGlkLCAuLi5hcmdzKVxuICAgIHJldHVybiBuZXdFVk1CYXNlVHggYXMgdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBFVk1CYXNlVHggd2hpY2ggaXMgdGhlIGZvdW5kYXRpb24gZm9yIGFsbCBFVk0gdHJhbnNhY3Rpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0lEIE9wdGlvbmFsIG5ldHdvcmtJRCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgICogQHBhcmFtIGJsb2NrY2hhaW5JRCBPcHRpb25hbCBibG9ja2NoYWluSUQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5ldHdvcmtJRDogbnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCxcbiAgICBibG9ja2NoYWluSUQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMiwgMTYpXG4gICkge1xuICAgIHN1cGVyKG5ldHdvcmtJRCwgYmxvY2tjaGFpbklEKVxuICB9XG59XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenesisData = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-GenesisData\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst constants_1 = require(\"./constants\");\nconst _1 = require(\".\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst serialization = serialization_1.Serialization.getInstance();\nconst bintools = bintools_1.default.getInstance();\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nclass GenesisData extends serialization_1.Serializable {\n    /**\n     * Class representing AVM GenesisData\n     *\n     * @param genesisAssets Optional GenesisAsset[]\n     * @param networkID Optional DefaultNetworkID\n     */\n    constructor(genesisAssets = [], networkID = utils_1.DefaultNetworkID) {\n        super();\n        this._typeName = \"GenesisData\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the GenesisAssets[]\n         */\n        this.getGenesisAssets = () => this.genesisAssets;\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        this.genesisAssets = genesisAssets;\n        this.networkID.writeUInt32BE(networkID, 0);\n    }\n    // TODO - setCodecID?\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { genesisAssets: this.genesisAssets.map((genesisAsset) => genesisAsset.serialize(encoding)), networkID: serialization.encoder(this.networkID, encoding, buffer, decimalString) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.genesisAssets = fields[\"genesisAssets\"].map((genesisAsset) => {\n            let g = new _1.GenesisAsset();\n            g.deserialize(genesisAsset, encoding);\n            return g;\n        });\n        this.networkID = serialization.decoder(fields[\"networkID\"], encoding, decimalString, buffer, 4);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[GenesisAsset]], parses it, populates the class, and returns the length of the [[GenesisAsset]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[GenesisAsset]]\n     *\n     * @returns The length of the raw [[GenesisAsset]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this._codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const numGenesisAssets = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const assetCount = numGenesisAssets.readUInt32BE(0);\n        this.genesisAssets = [];\n        for (let i = 0; i < assetCount; i++) {\n            const genesisAsset = new _1.GenesisAsset();\n            offset = genesisAsset.fromBuffer(bytes, offset);\n            this.genesisAssets.push(genesisAsset);\n            if (i === 0) {\n                this.networkID.writeUInt32BE(genesisAsset.getNetworkID(), 0);\n            }\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[GenesisData]].\n     */\n    toBuffer() {\n        // codec id\n        const codecbuffSize = buffer_1.Buffer.alloc(2);\n        codecbuffSize.writeUInt16BE(this._codecID, 0);\n        // num assets\n        const numAssetsbuffSize = buffer_1.Buffer.alloc(4);\n        numAssetsbuffSize.writeUInt32BE(this.genesisAssets.length, 0);\n        let bsize = codecbuffSize.length + numAssetsbuffSize.length;\n        let barr = [codecbuffSize, numAssetsbuffSize];\n        this.genesisAssets.forEach((genesisAsset) => {\n            const b = genesisAsset.toBuffer(this.getNetworkID());\n            bsize += b.length;\n            barr.push(b);\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.GenesisData = GenesisData;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\n\nconst bignum = require('bn.js');\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!DecoderBuffer.isDecoderBuffer(data)) {\n    data = new DecoderBuffer(data, options);\n  }\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  const state = buffer.save();\n  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  const decodedTag = derDecodeTag(buffer,\n    'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  let len = derDecodeLen(buffer,\n    decodedTag.primitive,\n    'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  const state = buffer.save();\n  const res = this._skipUntilEnd(\n    buffer,\n    'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  for (;;) {\n    const tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    const len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    let res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len);\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n  options) {\n  const result = [];\n  while (!buffer.isEmpty()) {\n    const possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    const res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    const unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    const raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    let str = '';\n    for (let i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    const numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    const printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  let result;\n  const identifiers = [];\n  let ident = 0;\n  let subident = 0;\n  while (!buffer.isEmpty()) {\n    subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  const first = (identifiers[0] / 40) | 0;\n  const second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    let tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  const str = buffer.raw().toString();\n\n  let year;\n  let mon;\n  let day;\n  let hour;\n  let min;\n  let sec;\n  if (tag === 'gentime') {\n    year = str.slice(0, 4) | 0;\n    mon = str.slice(4, 6) | 0;\n    day = str.slice(6, 8) | 0;\n    hour = str.slice(8, 10) | 0;\n    min = str.slice(10, 12) | 0;\n    sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    year = str.slice(0, 2) | 0;\n    mon = str.slice(2, 4) | 0;\n    day = str.slice(4, 6) | 0;\n    hour = str.slice(6, 8) | 0;\n    min = str.slice(8, 10) | 0;\n    sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull() {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  const res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  const raw = buffer.raw();\n  let res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  let tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  const cls = der.tagClass[tag >> 6];\n  const primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    let oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  const tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  let len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  const num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (let i = 0; i < num; i++) {\n    len <<= 8;\n    const j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","'use strict';\n\nconst inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  const state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  const state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  const state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  const state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  const state = this._reporterState;\n\n  const prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  const state = this._reporterState;\n\n  const now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  let err;\n  const state = this._reporterState;\n\n  const inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  const state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n}\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will sent to\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.EXPORTTX : constants_1.AVMConstants.EXPORTTX_CODECONE;\n        this.destinationChain = undefined;\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n         * Returns the id of the [[ExportTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the destination chainid.\n         */\n        this.getDestinationChain = () => {\n            return this.destinationChain;\n        };\n        this.destinationChain = destinationChain; // no correction, if they don\"t pass a chainid here, it will BOMB on toBuffer\n        if (typeof exportOuts !== \"undefined\" && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[`${i}`] instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(`Error - ExportTx.constructor: invalid TransferableOutput in array parameter ${exportOuts}`);\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serialization.encoder(this.destinationChain, encoding, buffer, cb58), exportOuts: this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serialization.decoder(fields[\"destinationChain\"], encoding, cb58, buffer, 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - ExportTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.EXPORTTX\n                : constants_1.AVMConstants.EXPORTTX_CODECONE;\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the totall exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[`${i}`].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [\n            ...this.getOuts(),\n            ...this.getExportOutputs()\n        ];\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMOutput = exports.SECPTransferOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputID A number representing the outputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nconst SelectOutputClass = (outputID, ...args) => {\n    if (outputID == constants_1.EVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputID\");\n};\nexports.SelectOutputClass = SelectOutputClass;\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += constants_1.EVMConstants.ASSETIDLEN;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.EVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\nclass EVMOutput {\n    /**\n     * An [[EVMOutput]] class which contains address, amount, and assetID.\n     *\n     * @param address The address recieving the asset as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} or number representing the amount.\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined) {\n        this.address = buffer_1.Buffer.alloc(20);\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the address of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAddress = () => this.address;\n        /**\n         * Returns the address as a bech32 encoded string.\n         */\n        this.getAddressString = () => this.address.toString(\"hex\");\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        /**\n         * Returns the assetID of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof address !== \"undefined\" &&\n            typeof amount !== \"undefined\" &&\n            typeof assetID !== \"undefined\") {\n            if (typeof address === \"string\") {\n                // if present then remove `0x` prefix\n                const prefix = address.substring(0, 2);\n                if (prefix === \"0x\") {\n                    address = address.split(\"x\")[1];\n                }\n                address = buffer_1.Buffer.from(address, \"hex\");\n            }\n            // convert number amount to BN\n            let amnt;\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            // convert string assetID to Buffer\n            if (!(assetID instanceof buffer_1.Buffer)) {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            this.address = address;\n            this.amountValue = amnt.clone();\n            this.amount = bintools.fromBNToBuffer(amnt, 8);\n            this.assetID = assetID;\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        const bsize = this.address.length + this.amount.length + this.assetID.length;\n        const barr = [this.address, this.amount, this.assetID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Decodes the [[EVMOutput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.address = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMOutput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMOutput(...args);\n    }\n    clone() {\n        const newEVMOutput = this.create();\n        newEVMOutput.fromBuffer(this.toBuffer());\n        return newEVMOutput;\n    }\n}\nexports.EVMOutput = EVMOutput;\n/**\n * Returns a function used to sort an array of [[EVMOutput]]s\n */\nEVMOutput.comparator = () => (a, b) => {\n    // primarily sort by address\n    let sorta = a.getAddress();\n    let sortb = b.getAddress();\n    // secondarily sort by assetID\n    if (sorta.equals(sortb)) {\n        sorta = a.getAssetID();\n        sortb = b.getAssetID();\n    }\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL2V2bS9vdXRwdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFnQztBQUNoQyxrREFBc0I7QUFDdEIsb0VBQTJDO0FBQzNDLDJDQUEwQztBQUMxQyxnREFJNEI7QUFHNUIsK0NBQWtEO0FBRWxELE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFFakQ7Ozs7OztHQU1HO0FBQ0ksTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFFBQWdCLEVBQUUsR0FBRyxJQUFXLEVBQVUsRUFBRTtJQUM1RSxJQUFJLFFBQVEsSUFBSSx3QkFBWSxDQUFDLGdCQUFnQixFQUFFO1FBQzdDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0tBQ3ZDO0lBQ0QsTUFBTSxJQUFJLHNCQUFhLENBQUMsNkNBQTZDLENBQUMsQ0FBQTtBQUN4RSxDQUFDLENBQUE7QUFMWSxRQUFBLGlCQUFpQixxQkFLN0I7QUFFRCxNQUFhLGtCQUFtQixTQUFRLG1DQUEwQjtJQUFsRTs7UUFDWSxjQUFTLEdBQUcsb0JBQW9CLENBQUE7UUFDaEMsWUFBTyxHQUFHLFNBQVMsQ0FBQTtJQXdCL0IsQ0FBQztJQXRCQyx3QkFBd0I7SUFFeEIsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBQSx5QkFBaUIsRUFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUM1RCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDckQsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQzlCLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxHQUFHLHdCQUFZLENBQUMsVUFBVSxDQUNqQyxDQUFBO1FBQ0QsTUFBTSxJQUFJLHdCQUFZLENBQUMsVUFBVSxDQUFBO1FBQ2pDLE1BQU0sUUFBUSxHQUFXLFFBQVE7YUFDOUIsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQzthQUNuQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEIsTUFBTSxJQUFJLENBQUMsQ0FBQTtRQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBQSx5QkFBaUIsRUFBQyxRQUFRLENBQUMsQ0FBQTtRQUN6QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0NBQ0Y7QUExQkQsZ0RBMEJDO0FBRUQsTUFBc0IsWUFBYSxTQUFRLDZCQUFvQjtJQUEvRDs7UUFDWSxjQUFTLEdBQUcsY0FBYyxDQUFBO1FBQzFCLFlBQU8sR0FBRyxTQUFTLENBQUE7SUFlL0IsQ0FBQztJQWJDLDhDQUE4QztJQUU5Qzs7O09BR0c7SUFDSCxnQkFBZ0IsQ0FBQyxPQUFlO1FBQzlCLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVLEVBQUUsR0FBRyxJQUFXO1FBQy9CLE9BQU8sSUFBQSx5QkFBaUIsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0NBQ0Y7QUFqQkQsb0NBaUJDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLFlBQVk7SUFBcEQ7O1FBQ1ksY0FBUyxHQUFHLG9CQUFvQixDQUFBO1FBQ2hDLFlBQU8sR0FBRyx3QkFBWSxDQUFDLGdCQUFnQixDQUFBO0lBb0JuRCxDQUFDO0lBbEJDLDhDQUE4QztJQUU5Qzs7T0FFRztJQUNILFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVc7UUFDbkIsT0FBTyxJQUFJLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUE7SUFDaEQsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLE1BQU0sR0FBdUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ2hELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDbEMsT0FBTyxNQUFjLENBQUE7SUFDdkIsQ0FBQztDQUNGO0FBdEJELGdEQXNCQztBQUVELE1BQWEsU0FBUztJQW9GcEI7Ozs7OztPQU1HO0lBQ0gsWUFDRSxVQUEyQixTQUFTLEVBQ3BDLFNBQXNCLFNBQVMsRUFDL0IsVUFBMkIsU0FBUztRQTdGNUIsWUFBTyxHQUFXLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDbEMsV0FBTSxHQUFXLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEMsZ0JBQVcsR0FBTyxJQUFJLGVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMzQixZQUFPLEdBQVcsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQW1CNUM7O1dBRUc7UUFDSCxlQUFVLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUV2Qzs7V0FFRztRQUNILHFCQUFnQixHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTdEOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFOUM7O1dBRUc7UUFDSCxlQUFVLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQXVEckMsSUFDRSxPQUFPLE9BQU8sS0FBSyxXQUFXO1lBQzlCLE9BQU8sTUFBTSxLQUFLLFdBQVc7WUFDN0IsT0FBTyxPQUFPLEtBQUssV0FBVyxFQUM5QjtZQUNBLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO2dCQUMvQixxQ0FBcUM7Z0JBQ3JDLE1BQU0sTUFBTSxHQUFXLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2dCQUM5QyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7b0JBQ25CLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNoQztnQkFDRCxPQUFPLEdBQUcsZUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7YUFDdEM7WUFFRCw4QkFBOEI7WUFDOUIsSUFBSSxJQUFRLENBQUE7WUFDWixJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtnQkFDOUIsSUFBSSxHQUFHLElBQUksZUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQ3RCO2lCQUFNO2dCQUNMLElBQUksR0FBRyxNQUFNLENBQUE7YUFDZDtZQUVELG1DQUFtQztZQUNuQyxJQUFJLENBQUMsQ0FBQyxPQUFPLFlBQVksZUFBTSxDQUFDLEVBQUU7Z0JBQ2hDLE9BQU8sR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQ3ZDO1lBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUM5QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtTQUN2QjtJQUNILENBQUM7SUFyRkQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sTUFBTSxLQUFLLEdBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7UUFDaEUsTUFBTSxJQUFJLEdBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2hFLE1BQU0sSUFBSSxHQUFXLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQy9DLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFpQixDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUM1RCxNQUFNLElBQUksRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzFELE1BQU0sSUFBSSxDQUFDLENBQUE7UUFDWCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDNUQsTUFBTSxJQUFJLEVBQUUsQ0FBQTtRQUNaLE9BQU8sTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUE7SUFDdkMsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLFlBQVksR0FBYyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDN0MsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUN4QyxPQUFPLFlBQW9CLENBQUE7SUFDN0IsQ0FBQzs7QUFsRkgsOEJBaUlDO0FBM0hDOztHQUVHO0FBQ0ksb0JBQVUsR0FDZixHQUF1RSxFQUFFLENBQ3pFLENBQUMsQ0FBdUIsRUFBRSxDQUF1QixFQUFjLEVBQUU7SUFDL0QsNEJBQTRCO0lBQzVCLElBQUksS0FBSyxHQUFXLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNsQyxJQUFJLEtBQUssR0FBVyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDbEMsOEJBQThCO0lBQzlCLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN2QixLQUFLLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ3RCLEtBQUssR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7S0FDdkI7SUFDRCxPQUFPLGVBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBZSxDQUFBO0FBQ25ELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tT3V0cHV0c1xuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vLi4vdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IHsgRVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCJcbmltcG9ydCB7XG4gIE91dHB1dCxcbiAgU3RhbmRhcmRBbW91bnRPdXRwdXQsXG4gIFN0YW5kYXJkVHJhbnNmZXJhYmxlT3V0cHV0XG59IGZyb20gXCIuLi8uLi9jb21tb24vb3V0cHV0XCJcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gXCIuLi8uLi91dGlscy9zZXJpYWxpemF0aW9uXCJcbmltcG9ydCB7IEVWTUlucHV0IH0gZnJvbSBcIi4vaW5wdXRzXCJcbmltcG9ydCB7IE91dHB1dElkRXJyb3IgfSBmcm9tIFwiLi4vLi4vdXRpbHMvZXJyb3JzXCJcblxuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgT3V0cHV0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBvdXRwdXRJRCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG91dHB1dElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tPdXRwdXRdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdE91dHB1dENsYXNzID0gKG91dHB1dElEOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogT3V0cHV0ID0+IHtcbiAgaWYgKG91dHB1dElEID09IEVWTUNvbnN0YW50cy5TRUNQWEZFUk9VVFBVVElEKSB7XG4gICAgcmV0dXJuIG5ldyBTRUNQVHJhbnNmZXJPdXRwdXQoLi4uYXJncylcbiAgfVxuICB0aHJvdyBuZXcgT3V0cHV0SWRFcnJvcihcIkVycm9yIC0gU2VsZWN0T3V0cHV0Q2xhc3M6IHVua25vd24gb3V0cHV0SURcIilcbn1cblxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyYWJsZU91dHB1dCBleHRlbmRzIFN0YW5kYXJkVHJhbnNmZXJhYmxlT3V0cHV0IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiVHJhbnNmZXJhYmxlT3V0cHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICAvL3NlcmlhbGl6ZSBpcyBpbmhlcml0ZWRcblxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMub3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3MoZmllbGRzW1wib3V0cHV0XCJdW1wiX3R5cGVJRFwiXSlcbiAgICB0aGlzLm91dHB1dC5kZXNlcmlhbGl6ZShmaWVsZHNbXCJvdXRwdXRcIl0sIGVuY29kaW5nKVxuICB9XG5cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHRoaXMuYXNzZXRJRCA9IGJpbnRvb2xzLmNvcHlGcm9tKFxuICAgICAgYnl0ZXMsXG4gICAgICBvZmZzZXQsXG4gICAgICBvZmZzZXQgKyBFVk1Db25zdGFudHMuQVNTRVRJRExFTlxuICAgIClcbiAgICBvZmZzZXQgKz0gRVZNQ29uc3RhbnRzLkFTU0VUSURMRU5cbiAgICBjb25zdCBvdXRwdXRpZDogbnVtYmVyID0gYmludG9vbHNcbiAgICAgIC5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgICAgLnJlYWRVSW50MzJCRSgwKVxuICAgIG9mZnNldCArPSA0XG4gICAgdGhpcy5vdXRwdXQgPSBTZWxlY3RPdXRwdXRDbGFzcyhvdXRwdXRpZClcbiAgICByZXR1cm4gdGhpcy5vdXRwdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBbW91bnRPdXRwdXQgZXh0ZW5kcyBTdGFuZGFyZEFtb3VudE91dHB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIkFtb3VudE91dHB1dFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYXNzZXRJRCBBbiBhc3NldElEIHdoaWNoIGlzIHdyYXBwZWQgYXJvdW5kIHRoZSBCdWZmZXIgb2YgdGhlIE91dHB1dFxuICAgKi9cbiAgbWFrZVRyYW5zZmVyYWJsZShhc3NldElEOiBCdWZmZXIpOiBUcmFuc2ZlcmFibGVPdXRwdXQge1xuICAgIHJldHVybiBuZXcgVHJhbnNmZXJhYmxlT3V0cHV0KGFzc2V0SUQsIHRoaXMpXG4gIH1cblxuICBzZWxlY3QoaWQ6IG51bWJlciwgLi4uYXJnczogYW55W10pOiBPdXRwdXQge1xuICAgIHJldHVybiBTZWxlY3RPdXRwdXRDbGFzcyhpZCwgLi4uYXJncylcbiAgfVxufVxuXG4vKipcbiAqIEFuIFtbT3V0cHV0XV0gY2xhc3Mgd2hpY2ggc3BlY2lmaWVzIGFuIE91dHB1dCB0aGF0IGNhcnJpZXMgYW4gYW1tb3VudCBmb3IgYW4gYXNzZXRJRCBhbmQgdXNlcyBzZWNwMjU2azEgc2lnbmF0dXJlIHNjaGVtZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNFQ1BUcmFuc2Zlck91dHB1dCBleHRlbmRzIEFtb3VudE91dHB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlNFQ1BUcmFuc2Zlck91dHB1dFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gRVZNQ29uc3RhbnRzLlNFQ1BYRkVST1VUUFVUSURcblxuICAvL3NlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgYm90aCBhcmUgaW5oZXJpdGVkXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG91dHB1dElEIGZvciB0aGlzIG91dHB1dFxuICAgKi9cbiAgZ2V0T3V0cHV0SUQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BUcmFuc2Zlck91dHB1dCguLi5hcmdzKSBhcyB0aGlzXG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdvdXQ6IFNFQ1BUcmFuc2Zlck91dHB1dCA9IHRoaXMuY3JlYXRlKClcbiAgICBuZXdvdXQuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpXG4gICAgcmV0dXJuIG5ld291dCBhcyB0aGlzXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVWTU91dHB1dCB7XG4gIHByb3RlY3RlZCBhZGRyZXNzOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMjApXG4gIHByb3RlY3RlZCBhbW91bnQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg4KVxuICBwcm90ZWN0ZWQgYW1vdW50VmFsdWU6IEJOID0gbmV3IEJOKDApXG4gIHByb3RlY3RlZCBhc3NldElEOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIpXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB1c2VkIHRvIHNvcnQgYW4gYXJyYXkgb2YgW1tFVk1PdXRwdXRdXXNcbiAgICovXG4gIHN0YXRpYyBjb21wYXJhdG9yID1cbiAgICAoKTogKChhOiBFVk1PdXRwdXQgfCBFVk1JbnB1dCwgYjogRVZNT3V0cHV0IHwgRVZNSW5wdXQpID0+IDEgfCAtMSB8IDApID0+XG4gICAgKGE6IEVWTU91dHB1dCB8IEVWTUlucHV0LCBiOiBFVk1PdXRwdXQgfCBFVk1JbnB1dCk6IDEgfCAtMSB8IDAgPT4ge1xuICAgICAgLy8gcHJpbWFyaWx5IHNvcnQgYnkgYWRkcmVzc1xuICAgICAgbGV0IHNvcnRhOiBCdWZmZXIgPSBhLmdldEFkZHJlc3MoKVxuICAgICAgbGV0IHNvcnRiOiBCdWZmZXIgPSBiLmdldEFkZHJlc3MoKVxuICAgICAgLy8gc2Vjb25kYXJpbHkgc29ydCBieSBhc3NldElEXG4gICAgICBpZiAoc29ydGEuZXF1YWxzKHNvcnRiKSkge1xuICAgICAgICBzb3J0YSA9IGEuZ2V0QXNzZXRJRCgpXG4gICAgICAgIHNvcnRiID0gYi5nZXRBc3NldElEKClcbiAgICAgIH1cbiAgICAgIHJldHVybiBCdWZmZXIuY29tcGFyZShzb3J0YSwgc29ydGIpIGFzIDEgfCAtMSB8IDBcbiAgICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGlucHV0IGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAqL1xuICBnZXRBZGRyZXNzID0gKCk6IEJ1ZmZlciA9PiB0aGlzLmFkZHJlc3NcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWRkcmVzcyBhcyBhIGJlY2gzMiBlbmNvZGVkIHN0cmluZy5cbiAgICovXG4gIGdldEFkZHJlc3NTdHJpbmcgPSAoKTogc3RyaW5nID0+IHRoaXMuYWRkcmVzcy50b1N0cmluZyhcImhleFwiKVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhbW91bnQgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfS5cbiAgICovXG4gIGdldEFtb3VudCA9ICgpOiBCTiA9PiB0aGlzLmFtb3VudFZhbHVlLmNsb25lKClcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXNzZXRJRCBvZiB0aGUgaW5wdXQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIGdldEFzc2V0SUQgPSAoKTogQnVmZmVyID0+IHRoaXMuYXNzZXRJRFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRVZNT3V0cHV0XV0uXG4gICAqL1xuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIGNvbnN0IGJzaXplOiBudW1iZXIgPVxuICAgICAgdGhpcy5hZGRyZXNzLmxlbmd0aCArIHRoaXMuYW1vdW50Lmxlbmd0aCArIHRoaXMuYXNzZXRJRC5sZW5ndGhcbiAgICBjb25zdCBiYXJyOiBCdWZmZXJbXSA9IFt0aGlzLmFkZHJlc3MsIHRoaXMuYW1vdW50LCB0aGlzLmFzc2V0SURdXG4gICAgY29uc3QgYnVmZjogQnVmZmVyID0gQnVmZmVyLmNvbmNhdChiYXJyLCBic2l6ZSlcbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZXMgdGhlIFtbRVZNT3V0cHV0XV0gYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBhbmQgcmV0dXJucyB0aGUgc2l6ZS5cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLmFkZHJlc3MgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAyMClcbiAgICBvZmZzZXQgKz0gMjBcbiAgICB0aGlzLmFtb3VudCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDgpXG4gICAgb2Zmc2V0ICs9IDhcbiAgICB0aGlzLmFzc2V0SUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMilcbiAgICBvZmZzZXQgKz0gMzJcbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRVZNT3V0cHV0XV0uXG4gICAqL1xuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBiaW50b29scy5idWZmZXJUb0I1OCh0aGlzLnRvQnVmZmVyKCkpXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IEVWTU91dHB1dCguLi5hcmdzKSBhcyB0aGlzXG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdFVk1PdXRwdXQ6IEVWTU91dHB1dCA9IHRoaXMuY3JlYXRlKClcbiAgICBuZXdFVk1PdXRwdXQuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpXG4gICAgcmV0dXJuIG5ld0VWTU91dHB1dCBhcyB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQW4gW1tFVk1PdXRwdXRdXSBjbGFzcyB3aGljaCBjb250YWlucyBhZGRyZXNzLCBhbW91bnQsIGFuZCBhc3NldElELlxuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzcyBUaGUgYWRkcmVzcyByZWNpZXZpbmcgdGhlIGFzc2V0IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb3IgYSBzdHJpbmcuXG4gICAqIEBwYXJhbSBhbW91bnQgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfSBvciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBhbW91bnQuXG4gICAqIEBwYXJhbSBhc3NldElEIFRoZSBhc3NldElEIHdoaWNoIGlzIGJlaW5nIHNlbnQgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvciBhIHN0cmluZy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFkZHJlc3M6IEJ1ZmZlciB8IHN0cmluZyA9IHVuZGVmaW5lZCxcbiAgICBhbW91bnQ6IEJOIHwgbnVtYmVyID0gdW5kZWZpbmVkLFxuICAgIGFzc2V0SUQ6IEJ1ZmZlciB8IHN0cmluZyA9IHVuZGVmaW5lZFxuICApIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgYWRkcmVzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgdHlwZW9mIGFtb3VudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgdHlwZW9mIGFzc2V0SUQgIT09IFwidW5kZWZpbmVkXCJcbiAgICApIHtcbiAgICAgIGlmICh0eXBlb2YgYWRkcmVzcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBpZiBwcmVzZW50IHRoZW4gcmVtb3ZlIGAweGAgcHJlZml4XG4gICAgICAgIGNvbnN0IHByZWZpeDogc3RyaW5nID0gYWRkcmVzcy5zdWJzdHJpbmcoMCwgMilcbiAgICAgICAgaWYgKHByZWZpeCA9PT0gXCIweFwiKSB7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc3BsaXQoXCJ4XCIpWzFdXG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzcyA9IEJ1ZmZlci5mcm9tKGFkZHJlc3MsIFwiaGV4XCIpXG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnZlcnQgbnVtYmVyIGFtb3VudCB0byBCTlxuICAgICAgbGV0IGFtbnQ6IEJOXG4gICAgICBpZiAodHlwZW9mIGFtb3VudCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBhbW50ID0gbmV3IEJOKGFtb3VudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFtbnQgPSBhbW91bnRcbiAgICAgIH1cblxuICAgICAgLy8gY29udmVydCBzdHJpbmcgYXNzZXRJRCB0byBCdWZmZXJcbiAgICAgIGlmICghKGFzc2V0SUQgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICAgIGFzc2V0SUQgPSBiaW50b29scy5jYjU4RGVjb2RlKGFzc2V0SUQpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3NcbiAgICAgIHRoaXMuYW1vdW50VmFsdWUgPSBhbW50LmNsb25lKClcbiAgICAgIHRoaXMuYW1vdW50ID0gYmludG9vbHMuZnJvbUJOVG9CdWZmZXIoYW1udCwgOClcbiAgICAgIHRoaXMuYXNzZXRJRCA9IGFzc2V0SURcbiAgICB9XG4gIH1cbn1cbiJdfQ==","'use strict';\n\nconst encoders = require('./encoders');\nconst decoders = require('./decoders');\nconst inherits = require('inherits');\n\nconst api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n}\n\nEntity.prototype._createNamed = function createNamed(Base) {\n  const name = this.name;\n\n  function Generated(entity) {\n    this._initNamed(entity, name);\n  }\n  inherits(Generated, Base);\n  Generated.prototype._initNamed = function _initNamed(entity, name) {\n    Base.call(this, entity, name);\n  };\n\n  return new Generated(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createassettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./genesisasset\"), exports);\n__exportStar(require(\"./genesisdata\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./initialstates\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./minterset\"), exports);\n__exportStar(require(\"./operationtx\"), exports);\n__exportStar(require(\"./ops\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCO0FBQ3JCLDJDQUF3QjtBQUN4Qiw4Q0FBMkI7QUFDM0Isa0RBQStCO0FBQy9CLGdEQUE2QjtBQUM3Qiw2Q0FBMEI7QUFDMUIsaURBQThCO0FBQzlCLGdEQUE2QjtBQUM3Qiw2Q0FBMEI7QUFDMUIsa0RBQStCO0FBQy9CLDJDQUF3QjtBQUN4Qiw2Q0FBMEI7QUFDMUIsOENBQTJCO0FBQzNCLGdEQUE2QjtBQUM3Qix3Q0FBcUI7QUFDckIsNENBQXlCO0FBQ3pCLHVDQUFvQjtBQUNwQiwwQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuZXhwb3J0ICogZnJvbSBcIi4vYmFzZXR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnN0YW50c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9jcmVhdGVhc3NldHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWRlbnRpYWxzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2V4cG9ydHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVzaXNhc3NldFwiXG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lc2lzZGF0YVwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbXBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbml0aWFsc3RhdGVzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9rZXljaGFpblwiXG5leHBvcnQgKiBmcm9tIFwiLi9taW50ZXJzZXRcIlxuZXhwb3J0ICogZnJvbSBcIi4vb3BlcmF0aW9udHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vb3BzXCJcbmV4cG9ydCAqIGZyb20gXCIuL291dHB1dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vdXR4b3NcIlxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hZG1pbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"./tx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nconst display = \"display\";\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = serialization.decoder(this.outs.length.toString(), display, decimalString, buffer, 4);\n        this.numins = serialization.decoder(this.ins.length.toString(), display, decimalString, buffer, 4);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - BaseTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.ins[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.ins[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, tx_2.SelectTxClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCO0FBQ3JCLDJDQUF3QjtBQUN4Qiw4Q0FBMkI7QUFDM0IsZ0RBQTZCO0FBQzdCLDJDQUF3QjtBQUN4Qiw2Q0FBMEI7QUFDMUIsNkNBQTBCO0FBQzFCLDZDQUEwQjtBQUMxQiw0Q0FBeUI7QUFDekIsdUNBQW9CO0FBQ3BCLDBDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiXG5leHBvcnQgKiBmcm9tIFwiLi9iYXNldHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vY29uc3RhbnRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWRlbnRpYWxzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9leHBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbXBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9rZXljaGFpblwiXG5leHBvcnQgKiBmcm9tIFwiLi9vdXRwdXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3R4XCJcbmV4cG9ydCAqIGZyb20gXCIuL3V0eG9zXCJcbiJdfQ==","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdminAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AdminAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.\n * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AdminAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n     * method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/admin\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/admin\") {\n        super(core, baseURL);\n        /**\n         * Assign an API an alias, a different endpoint for the API. The original endpoint will still\n         * work. This change only affects this node other nodes will not know about this alias.\n         *\n         * @param endpoint The original endpoint of the API. endpoint should only include the part of\n         * the endpoint after /ext/\n         * @param alias The API being aliased can now be called at ext/alias\n         *\n         * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n         */\n        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                endpoint,\n                alias\n            };\n            const response = yield this.callMethod(\"admin.alias\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Give a blockchain an alias, a different name that can be used any place the blockchain’s\n         * ID is used.\n         *\n         * @param chain The blockchain’s ID\n         * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)\n         *\n         * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n         */\n        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain,\n                alias\n            };\n            const response = yield this.callMethod(\"admin.aliasChain\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Get all aliases for given blockchain\n         *\n         * @param chain The blockchain’s ID\n         *\n         * @returns Returns a Promise<string[]> containing aliases of the blockchain.\n         */\n        this.getChainAliases = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            const response = yield this.callMethod(\"admin.getChainAliases\", params);\n            return response.data.result.aliases\n                ? response.data.result.aliases\n                : response.data.result;\n        });\n        /**\n         * Dump the mutex statistics of the node to the specified file.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.lockProfile\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Dump the current memory footprint of the node to the specified file.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.memoryProfile\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Start profiling the cpu utilization of the node. Will dump the profile information into\n         * the specified file on stop.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.startCPUProfiler\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Stop the CPU profile that was previously started.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.stopCPUProfiler\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n    }\n}\nexports.AdminAPI = AdminAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYWRtaW4vYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUE4QztBQVE5Qzs7Ozs7OztHQU9HO0FBRUgsTUFBYSxRQUFTLFNBQVEsaUJBQU87SUE2SG5DOzs7Ozs7T0FNRztJQUNILFlBQVksSUFBbUIsRUFBRSxVQUFrQixZQUFZO1FBQzdELEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFwSXRCOzs7Ozs7Ozs7V0FTRztRQUNILFVBQUssR0FBRyxDQUFPLFFBQWdCLEVBQUUsS0FBYSxFQUFvQixFQUFFO1lBQ2xFLE1BQU0sTUFBTSxHQUFnQjtnQkFDMUIsUUFBUTtnQkFDUixLQUFLO2FBQ04sQ0FBQTtZQUNELE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQ3pELGFBQWEsRUFDYixNQUFNLENBQ1AsQ0FBQTtZQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDakMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUMxQixDQUFDLENBQUEsQ0FBQTtRQUVEOzs7Ozs7OztXQVFHO1FBQ0gsZUFBVSxHQUFHLENBQU8sS0FBYSxFQUFFLEtBQWEsRUFBb0IsRUFBRTtZQUNwRSxNQUFNLE1BQU0sR0FBcUI7Z0JBQy9CLEtBQUs7Z0JBQ0wsS0FBSzthQUNOLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUN6RCxrQkFBa0IsRUFDbEIsTUFBTSxDQUNQLENBQUE7WUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ2pDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO2dCQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDMUIsQ0FBQyxDQUFBLENBQUE7UUFFRDs7Ozs7O1dBTUc7UUFDSCxvQkFBZSxHQUFHLENBQU8sS0FBYSxFQUFxQixFQUFFO1lBQzNELE1BQU0sTUFBTSxHQUEwQjtnQkFDcEMsS0FBSzthQUNOLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUN6RCx1QkFBdUIsRUFDdkIsTUFBTSxDQUNQLENBQUE7WUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ2pDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO2dCQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDMUIsQ0FBQyxDQUFBLENBQUE7UUFFRDs7OztXQUlHO1FBQ0gsZ0JBQVcsR0FBRyxHQUEyQixFQUFFO1lBQ3pDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQ3pELG1CQUFtQixDQUNwQixDQUFBO1lBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO2dCQUNqQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDOUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQzFCLENBQUMsQ0FBQSxDQUFBO1FBRUQ7Ozs7V0FJRztRQUNILGtCQUFhLEdBQUcsR0FBMkIsRUFBRTtZQUMzQyxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUN6RCxxQkFBcUIsQ0FDdEIsQ0FBQTtZQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDakMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUMxQixDQUFDLENBQUEsQ0FBQTtRQUVEOzs7OztXQUtHO1FBQ0gscUJBQWdCLEdBQUcsR0FBMkIsRUFBRTtZQUM5QyxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUN6RCx3QkFBd0IsQ0FDekIsQ0FBQTtZQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDakMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUMxQixDQUFDLENBQUEsQ0FBQTtRQUVEOzs7O1dBSUc7UUFDSCxvQkFBZSxHQUFHLEdBQTJCLEVBQUU7WUFDN0MsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FDekQsdUJBQXVCLENBQ3hCLENBQUE7WUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ2pDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO2dCQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDMUIsQ0FBQyxDQUFBLENBQUE7SUFXRCxDQUFDO0NBQ0Y7QUF2SUQsNEJBdUlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFkbWluXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gXCIuLi8uLi9hdmFsYW5jaGVcIlxuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gXCIuLi8uLi9jb21tb24vanJwY2FwaVwiXG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hcGliYXNlXCJcbmltcG9ydCB7XG4gIEFsaWFzQ2hhaW5QYXJhbXMsXG4gIEFsaWFzUGFyYW1zLFxuICBHZXRDaGFpbkFsaWFzZXNQYXJhbXNcbn0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiXG5cbi8qKlxuICogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlJ3MgQWRtaW5BUEkuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbSlJQQ0FQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLlxuICogSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuXG5leHBvcnQgY2xhc3MgQWRtaW5BUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAqIEFzc2lnbiBhbiBBUEkgYW4gYWxpYXMsIGEgZGlmZmVyZW50IGVuZHBvaW50IGZvciB0aGUgQVBJLiBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgd2lsbCBzdGlsbFxuICAgKiB3b3JrLiBUaGlzIGNoYW5nZSBvbmx5IGFmZmVjdHMgdGhpcyBub2RlIG90aGVyIG5vZGVzIHdpbGwgbm90IGtub3cgYWJvdXQgdGhpcyBhbGlhcy5cbiAgICpcbiAgICogQHBhcmFtIGVuZHBvaW50IFRoZSBvcmlnaW5hbCBlbmRwb2ludCBvZiB0aGUgQVBJLiBlbmRwb2ludCBzaG91bGQgb25seSBpbmNsdWRlIHRoZSBwYXJ0IG9mXG4gICAqIHRoZSBlbmRwb2ludCBhZnRlciAvZXh0L1xuICAgKiBAcGFyYW0gYWxpYXMgVGhlIEFQSSBiZWluZyBhbGlhc2VkIGNhbiBub3cgYmUgY2FsbGVkIGF0IGV4dC9hbGlhc1xuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBjb250YWluaW5nIHN1Y2Nlc3MsIHRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlLlxuICAgKi9cbiAgYWxpYXMgPSBhc3luYyAoZW5kcG9pbnQ6IHN0cmluZywgYWxpYXM6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczogQWxpYXNQYXJhbXMgPSB7XG4gICAgICBlbmRwb2ludCxcbiAgICAgIGFsaWFzXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhZG1pbi5hbGlhc1wiLFxuICAgICAgcGFyYW1zXG4gICAgKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzXG4gICAgICA/IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgICAgIDogcmVzcG9uc2UuZGF0YS5yZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlIGEgYmxvY2tjaGFpbiBhbiBhbGlhcywgYSBkaWZmZXJlbnQgbmFtZSB0aGF0IGNhbiBiZSB1c2VkIGFueSBwbGFjZSB0aGUgYmxvY2tjaGFpbuKAmXNcbiAgICogSUQgaXMgdXNlZC5cbiAgICpcbiAgICogQHBhcmFtIGNoYWluIFRoZSBibG9ja2NoYWlu4oCZcyBJRFxuICAgKiBAcGFyYW0gYWxpYXMgQ2FuIG5vdyBiZSB1c2VkIGluIHBsYWNlIG9mIHRoZSBibG9ja2NoYWlu4oCZcyBJRCAoaW4gQVBJIGVuZHBvaW50cywgZm9yIGV4YW1wbGUpXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPGJvb2xlYW4+IGNvbnRhaW5pbmcgc3VjY2VzcywgdHJ1ZSBmb3Igc3VjY2VzcywgZmFsc2UgZm9yIGZhaWx1cmUuXG4gICAqL1xuICBhbGlhc0NoYWluID0gYXN5bmMgKGNoYWluOiBzdHJpbmcsIGFsaWFzOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IEFsaWFzQ2hhaW5QYXJhbXMgPSB7XG4gICAgICBjaGFpbixcbiAgICAgIGFsaWFzXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhZG1pbi5hbGlhc0NoYWluXCIsXG4gICAgICBwYXJhbXNcbiAgICApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgICAgID8gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICAgICAgOiByZXNwb25zZS5kYXRhLnJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgYWxpYXNlcyBmb3IgZ2l2ZW4gYmxvY2tjaGFpblxuICAgKlxuICAgKiBAcGFyYW0gY2hhaW4gVGhlIGJsb2NrY2hhaW7igJlzIElEXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZ1tdPiBjb250YWluaW5nIGFsaWFzZXMgb2YgdGhlIGJsb2NrY2hhaW4uXG4gICAqL1xuICBnZXRDaGFpbkFsaWFzZXMgPSBhc3luYyAoY2hhaW46IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IEdldENoYWluQWxpYXNlc1BhcmFtcyA9IHtcbiAgICAgIGNoYWluXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhZG1pbi5nZXRDaGFpbkFsaWFzZXNcIixcbiAgICAgIHBhcmFtc1xuICAgIClcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuYWxpYXNlc1xuICAgICAgPyByZXNwb25zZS5kYXRhLnJlc3VsdC5hbGlhc2VzXG4gICAgICA6IHJlc3BvbnNlLmRhdGEucmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogRHVtcCB0aGUgbXV0ZXggc3RhdGlzdGljcyBvZiB0aGUgbm9kZSB0byB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICovXG4gIGxvY2tQcm9maWxlID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhZG1pbi5sb2NrUHJvZmlsZVwiXG4gICAgKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzXG4gICAgICA/IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgICAgIDogcmVzcG9uc2UuZGF0YS5yZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBEdW1wIHRoZSBjdXJyZW50IG1lbW9yeSBmb290cHJpbnQgb2YgdGhlIG5vZGUgdG8gdGhlIHNwZWNpZmllZCBmaWxlLlxuICAgKlxuICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhIGJvb2xlYW4gdGhhdCBpcyB0cnVlIG9uIHN1Y2Nlc3MuXG4gICAqL1xuICBtZW1vcnlQcm9maWxlID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhZG1pbi5tZW1vcnlQcm9maWxlXCJcbiAgICApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgICAgID8gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICAgICAgOiByZXNwb25zZS5kYXRhLnJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHByb2ZpbGluZyB0aGUgY3B1IHV0aWxpemF0aW9uIG9mIHRoZSBub2RlLiBXaWxsIGR1bXAgdGhlIHByb2ZpbGUgaW5mb3JtYXRpb24gaW50b1xuICAgKiB0aGUgc3BlY2lmaWVkIGZpbGUgb24gc3RvcC5cbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgKi9cbiAgc3RhcnRDUFVQcm9maWxlciA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcbiAgICAgIFwiYWRtaW4uc3RhcnRDUFVQcm9maWxlclwiXG4gICAgKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzXG4gICAgICA/IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgICAgIDogcmVzcG9uc2UuZGF0YS5yZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSBDUFUgcHJvZmlsZSB0aGF0IHdhcyBwcmV2aW91c2x5IHN0YXJ0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICovXG4gIHN0b3BDUFVQcm9maWxlciA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcbiAgICAgIFwiYWRtaW4uc3RvcENQVVByb2ZpbGVyXCJcbiAgICApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgICAgID8gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICAgICAgOiByZXNwb25zZS5kYXRhLnJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXVxuICAgKiBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICogQHBhcmFtIGJhc2VVUkwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvYWRtaW5cIiBhcyB0aGUgcGF0aCB0byBycGMncyBiYXNlVVJMXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBBdmFsYW5jaGVDb3JlLCBiYXNlVVJMOiBzdHJpbmcgPSBcIi9leHQvYWRtaW5cIikge1xuICAgIHN1cGVyKGNvcmUsIGJhc2VVUkwpXG4gIH1cbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-UTXOs\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst tx_1 = require(\"./tx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, outputs_1.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, outputs_1.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.EVMConstants.LATESTCODEC, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txID, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[`${i}`];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput &&\n                    aad.assetExists(assetKey) &&\n                    u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[`${assetKey}`] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        spenders.forEach((spender) => {\n                            const idx = uout.getAddressIdx(spender);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such address in output\");\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spender);\n                        });\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) &&\n                        !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                           + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new errors_1.InsufficientFundsError(`Error - UTXOSet.getMinimumSpendable: insufficient funds to create the transaction`);\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[`${i}`].getAssetIDString();\n                const amount = amounts[`${i}`].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[`${i}`].getChange();\n                if (change.gt(zero)) {\n                    const changeout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an unsigned ImportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddress The address to send the funds\n         * @param importIns An array of [[TransferableInput]]s being imported\n         * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildImportTx = (networkID, blockchainID, toAddress, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined) => {\n            const zero = new bn_js_1.default(0);\n            const map = new Map();\n            let ins = [];\n            let outs = [];\n            let feepaid = new bn_js_1.default(0);\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            // build a set of inputs which covers the fee\n            atomics.forEach((atomic) => {\n                const assetIDBuf = atomic.getAssetID();\n                const assetID = bintools.cb58Encode(atomic.getAssetID());\n                const output = atomic.getOutput();\n                const amount = output.getAmount().clone();\n                let infeeamount = amount.clone();\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    buffer_1.Buffer.compare(feeAssetID, assetIDBuf) === 0) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = atomic.getTxID();\n                const outputidx = atomic.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amount);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetIDBuf, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from);\n                spenders.forEach((spender) => {\n                    const idx = output.getAddressIdx(spender);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such address in output\");\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spender);\n                });\n                ins.push(xferin);\n                if (map.has(assetID)) {\n                    infeeamount = infeeamount.add(new bn_js_1.default(map.get(assetID)));\n                }\n                map.set(assetID, infeeamount.toString());\n            });\n            for (let [assetID, amount] of map) {\n                // Create single EVMOutput for each assetID\n                const evmOutput = new outputs_1.EVMOutput(toAddress, new bn_js_1.default(amount), bintools.cb58Decode(assetID));\n                outs.push(evmOutput);\n            }\n            // lexicographically sort array\n            ins = ins.sort(inputs_1.TransferableInput.comparator());\n            outs = outs.sort(outputs_1.EVMOutput.comparator());\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, sourceChain, ins, outs, fee);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n         * Creates an unsigned ExportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the AssetID for AVAX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildExportTx = (networkID, blockchainID, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new errors_1.FeeAssetError(\"Error - UTXOSet.buildExportTx: feeAssetID must match avaxAssetID\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, destinationChain, ins, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        const utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = new UTXO();\n            utxos[`${utxoidCleaned}`].deserialize(fields[\"utxos\"][`${utxoid}`], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serializer.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][`${address}`]) {\n                let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serializer.decoder(fields[\"addressUTXOs\"][`${address}`][`${utxoid}`], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === \"string\") {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create() {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) &&\n            feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":""}